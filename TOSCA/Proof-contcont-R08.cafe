require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ***************************************************************************
-->  trans [R08]:
-->     < SetND, (cap(dependsOn,IDCP,available,IDND1) SetCP), 
-->  	      (req(dependsOn,IDRQ,waiting,IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP >
-->  => < SetND, (cap(dependsOn,IDCP,available,IDND1) SetCP), 
-->  	      (req(dependsOn,IDRQ,ready,  IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP > .
--> ***************************************************************************
select ProofContCont .
-- When R08 can be applied to the state S:
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sND, 
                (cap(dependsOn,idCP,available,idND) sCP), 
                (req(dependsOn,idRQ,waiting,idND')  sRQ), 
                (rel(dependsOn,idRL,idCP,idRQ)      sRL), mp >) = true .
}
--> ***************************************************************
--> Step 2-8: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The node of the requirement of idRQ does or does not exist.
:def csp2-8idND'a = :csp {
  eq existND(sND,idND') = false .
  eq sND = (node(tnd,idND',snd) sND') .
}
:def csp2-8idND'b = :csp {
  eq snd = initial .
  eq snd = created .
  eq snd = started .
}
:apply (csp2-8idND'a rd- csp2-8idND'b rd-)
show proof
select
