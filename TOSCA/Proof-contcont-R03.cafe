require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> **************************************************************************
-->  ctrans [R03]:
-->     < SetND, (cap(hostedOn,IDCP,closed,   IDND) SetCP), SetRQ, SetRL, MP >
-->  => < SetND, (cap(hostedOn,IDCP,available,IDND) SetCP), SetRQ, SetRL, MP >
-->     if isCreated(state(getNode(SetND,IDND))) .
--> **************************************************************************
select ProofContCont .
-- When R03 can be applied to the state S:
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sND, (cap(hostedOn,idCP,closed,idND) sCP), sRQ, sRL, mp >) = true .
}
--> ******************************************************
--> Step 2-2: Split the current case for a rule into cases
--> where the condition of the rule does or does not hold.
--> ******************************************************
-- The condition of R03 does or does not hold for the node of idND.
:def ctf2-2 = :ctf {
  eq isCreated(state(getNode(sND,idND))) = true .
}
:apply (ctf2-2 rd-)
-- When the condition of R03 holds for the node of idND:
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
-- We know that final(SS) never holds in this case.
--> ***************************************************************
--> Step 2-4: Consider which rule can be applied to the next state.
--> ***************************************************************
-- The next rule should be R04 for the capability of idCP.
--> *************************************************************************************
--> Step 2-5: Split the current case into cases which collectively cover the current case
-->  and the next state of one of the split cases matches to LHS of the current rule.
--> *************************************************************************************
-- LHS of R04 requires a corresponding relationship.
-- There is or is not a corresponding relationship.
:def csp2-5a = :csp {
  eq onlyOneRLOfCP(sRL,idCP) = false .
  eq sRL = (rel(trl,idRL,idCP,idRQ) sRL') .
}
:def csp2-5b = :csp {
  eq trl = hostedOn .
  eq trl = dependsOn .
  eq trl = connectsTo .
}
:apply (csp2-5a rd- csp2-5b rd-)
-- The relationship is hostedOn:
-- There is or is not a corresponding requirement.
:def csp1-6idRQa = :csp {
  eq existRQ(sRQ,idRQ) = false .
  eq sRQ = (req(trl',idRQ,srq,idND') sRQ') .
}
:def csp1-6idRQb = :csp {
  eq trl' = hostedOn .
  eq trl' = dependsOn .
  eq trl' = connectsTo .
}
:apply (csp1-6idRQa rd- csp1-6idRQb rd-)
-- The requirement is hostedOn:
-- The requirement is unbound, waiting, or ready.
:def cspsrq = :csp {
  eq srq = unbound .
  eq srq = waiting .
  eq srq = ready .
}
:apply (cspsrq rd-)
show proof
select
