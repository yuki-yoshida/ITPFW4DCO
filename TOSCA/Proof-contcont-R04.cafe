require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ************************************************************************************************
-->  trans [R04]:
-->     < SetND, (cap(hostedOn,IDCP,available,IDND1) SetCP), 
-->  	      (req(hostedOn,IDRQ,unbound,IDND2) SetRQ), (rel(hostedOn,IDRL,IDCP,IDRQ) SetRL), MP >
-->  => < SetND, (cap(hostedOn,IDCP,available,IDND1) SetCP), 
-->  	      (req(hostedOn,IDRQ,ready,  IDND2) SetRQ), (rel(hostedOn,IDRL,IDCP,IDRQ) SetRL), MP > .
--> ************************************************************************************************
select ProofContCont .
-- When R0R can be applied to the state S:
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sND, 
                (cap(hostedOn,idCP,available,idND) sCP),
                (req(hostedOn,idRQ,unbound,idND')  sRQ),
                (rel(hostedOn,idRL,idCP,idRQ)      sRL), mp >) = true .
}
--> ******************************************************
--> Step 2-2: Split the current case for a rule into cases
--> where the condition of the rule does or does not hold.
--> ******************************************************
-- R04 is an unconditional rule.
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
-- We know that final(SS) never holds in this case.
--> ***************************************************************
--> Step 2-4: Consider which rule can be applied to the next state.
--> ***************************************************************
-- The next rule should be R01 for the node of idND'.
--> *************************************************************************************
--> Step 2-5: Split the current case into cases which collectively cover the current case
-->  and the next state of one of the split cases matches to LHS of the current rule.
--> *************************************************************************************
-- LHS of R01 requires a corresponding node.
-- There is or is not a corresponding node.
:def csp2-5R01a = :csp {
  eq existND(sND,idND') = false .
  eq sND = (node(tnd,idND',snd) sND') .
}
-- The node is initial, created, or started.
:def csp2-5R01b = :csp {
  eq snd = initial .
  eq snd = created .
  eq snd = started .
}
:apply (csp2-5R01a rd- csp2-5R01b rd-)
show proof
select
