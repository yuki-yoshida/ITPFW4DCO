require NatAxiom ../lib/NatAxiom.cafe
require PROOF Proof.cafe

--> *************************************************
--> (3) inv(S) and not final(S) implies m(S) > m(SS).
--> *************************************************

module ProofMeasure {
  protecting(PROOF)
  protecting(NATAXIOM)
}

--> *************************************************************************
--> ctrans [R01]: < (node(TND,IDND,initial) SetND), SetCP, SetRQ, SetRL, MP >
-->            => < (node(TND,IDND,created) SetND), SetCP, SetRQ, SetRL, MP > 
-->	      if allRQOfTypeOfNDInStates(SetRQ,hostedOn,IDND,ready) .
--> *************************************************************************
select ProofMeasure .
-- When R01 can be applied to the state S:
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq mesmes(< (node(tnd,idND,initial) sND), sCP, sRQ, sRL, mp >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2R01 = :csp {
  eq allRQOfTypeOfNDInStates(sRQ,hostedOn,idND,ready) = true .
}
:apply (csp2-2R01 rd-)
show proof

--> *************************************************************************
--> ctrans [R02]: < (node(TND,IDND,created) SetND), SetCP, SetRQ, SetRL, MP >
-->            => < (node(TND,IDND,started) SetND), SetCP, SetRQ, SetRL, MP > 
-->	      if allRQOfNDInStates(SetRQ,IDND,ready) .
--> *************************************************************************
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
select ProofMeasure .
:goal {
  eq mesmes(< (node(tnd,idND,created) sND), sCP, sRQ, sRL, mp >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2R02 = :csp {
  eq allRQOfNDInStates(sRQ,idND,ready) = true .
}
:apply (csp2-2R02 rd-)
show proof

--> ************************************************************************************
--> ctrans [R03]: < SetND, (cap(hostedOn,IDCP,closed,   IDND) SetCP), SetRQ, SetRL, MP >
-->            => < SetND, (cap(hostedOn,IDCP,available,IDND) SetCP), SetRQ, SetRL, MP >
-->	    if isCreated(state(getNode(SetND,IDND))) .
--> ************************************************************************************
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
select ProofMeasure .
:goal {
  eq mesmes(< sND, (cap(hostedOn,idCP,closed,idND) sCP), sRQ, sRL, mp >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2R03 = :csp {
  eq isCreated(state(getNode(sND,idND))) = true .
}
:apply (csp2-2R03 rd-)
show proof

--> ***************************************************************************************************
--> trans [R04]: < SetND, (cap(hostedOn,IDCP,available,IDND1) SetCP), 
-->  	       	(req(hostedOn,IDRQ,unbound,IDND2) SetRQ), (rel(hostedOn,IDRL,IDCP,IDRQ) SetRL), MP >
-->           => < SetND, (cap(hostedOn,IDCP,available,IDND1) SetCP), 
-->  	       	(req(hostedOn,IDRQ,ready,   IDND2) SetRQ), (rel(hostedOn,IDRL,IDCP,IDRQ) SetRL), MP > .
--> ***************************************************************************************************
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
select ProofMeasure .
:goal {
  eq mesmes(< sND, (cap(hostedOn,idCP,available,idND) sCP), 
  	           (req(hostedOn,idRQ,unbound,idND') sRQ), 
	           (rel(hostedOn,idRL,idCP,idRQ) sRL), mp >) = true .
}
:apply (rd-)
show proof

--> **********************************************************************************
--> ctrans [R05]: < SetND, (cap(dependsOn,IDCP,closed,IDND) SetCP), SetRQ, SetRL, MP >
-->            => < SetND, (cap(dependsOn,IDCP,open,  IDND) SetCP), SetRQ, SetRL, MP >
-->	     if isCreated(state(getNode(SetND,IDND))) .
--> **********************************************************************************
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
select ProofMeasure .
:goal {
  eq mesmes(< sND, (cap(dependsOn,idCP,closed,idND) sCP), sRQ, sRL, mp >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2R05 = :csp {
  eq isCreated(state(getNode(sND,idND))) = true .
}
:apply (csp2-2R05 rd-)
show proof

--> *************************************************************************************
--> ctrans [R06]: < SetND, (cap(dependsOn,IDCP,open,     IDND) SetCP), SetRQ, SetRL, MP >
-->            => < SetND, (cap(dependsOn,IDCP,available,IDND) SetCP), SetRQ, SetRL, MP >
-->	     if state(getNode(SetND,IDND)) = started .
--> *************************************************************************************
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
select ProofMeasure .
:goal {
  eq mesmes(< sND, (cap(dependsOn,idCP,open,idND) sCP), sRQ, sRL, mp >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2R06 = :csp {
  eq state(getNode(sND,idND)) = started .
}
:apply (csp2-2R06 rd-)
show proof

--> ****************************************************************************************************
--> ctrans [R07]: < SetND, (cap(dependsOn,IDCP,SCP,IDND1) SetCP), 
-->  	       	  (req(dependsOn,IDRQ,unbound,IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP >
-->            => < SetND, (cap(dependsOn,IDCP,SCP,IDND1) SetCP), 
-->  	       	  (req(dependsOn,IDRQ,waiting,IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP >
-->             if state(SetND,IDND2) = created and isActivated(SCP) .
--> ****************************************************************************************************
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
select ProofMeasure .
:goal {
  eq mesmes(< sND, (cap(dependsOn,idCP,scp,idND) sCP), 
   	           (req(dependsOn,idRQ,unbound,idND') sRQ), 
	           (rel(dependsOn,idRL,idCP,idRQ) sRL), mp >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2R07 = :csp {
  eq (state(getNode(sND,idND')) = created and isActivated(scp)) = true .
}
:apply (csp2-2R07 rd-)
show proof

--> ******************************************************************************************************
--> trans [R08]: < SetND, (cap(dependsOn,IDCP,available,IDND1) SetCP), 
-->  	          (req(dependsOn,IDRQ,waiting,IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP >
-->           => < SetND, (cap(dependsOn,IDCP,available,IDND1) SetCP), 
-->  	       	  (req(dependsOn,IDRQ,ready,  IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP > .
--> ******************************************************************************************************
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
select ProofMeasure .
:goal {
  eq mesmes(< sND, (cap(dependsOn,idCP,scp,idND) sCP), 
   	           (req(dependsOn,idRQ,waiting,idND') sRQ), 
	           (rel(dependsOn,idRL,idCP,idRQ) sRL), mp >) = true .
}
:apply (rd-)
show proof

--> ***********************************************************************************
--> ctrans [R09]: < SetND, (cap(connectsTo,IDCP,closed,IDND) SetCP), SetRQ, SetRL, MP >
-->            => < SetND, (cap(connectsTo,IDCP,open,  IDND) SetCP), SetRQ, SetRL, 
-->	       	 (opMsg(IDCP) MP) >
-->	    if isCreated(state(getNode(SetND,IDND))) .
--> ***********************************************************************************
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
select ProofMeasure .
:goal {
  eq mesmes(< sND, (cap(connectsTo,idCP,closed,idND) sCP), sRQ, sRL, mp >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2R09 = :csp {
  eq isCreated(state(getNode(sND,idND))) = true .
}
:apply (csp2-2R09 rd-)
show proof

--> **************************************************************************************
--> ctrans [R10]: < SetND, (cap(connectsTo,IDCP,open,     IDND) SetCP), SetRQ, SetRL, MP >
-->            => < SetND, (cap(connectsTo,IDCP,available,IDND) SetCP), SetRQ, SetRL,
-->	       	  (avMsg(IDCP) MP) >
-->	     if state(getNode(SetND,IDND)) = started .
--> **************************************************************************************
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
select ProofMeasure .
:goal {
  eq mesmes(< sND, (cap(connectsTo,idCP,open,idND) sCP), sRQ, sRL, mp >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2R10 = :csp {
  eq state(getNode(sND,idND)) = started .
}
:apply (csp2-2R10 rd-)
show proof

--> ********************************************************************************************************
--> ctrans [R11]: < SetND, SetCP, 
--> 	       	  (req(connectsTo,IDRQ,unbound,IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), 
--> 		  (opMsg(IDCP) MP) >
-->            => < SetND, SetCP, 
--> 	       	  (req(connectsTo,IDRQ,waiting,IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), MP >
--> 	     if state(getNode(SetND,IDND)) = created .
--> ********************************************************************************************************
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
select ProofMeasure .
:goal {
  eq mesmes(< sND, sCP, 
   	      (req(connectsTo,idRQ,unbound,idND) sRQ), 
	      (rel(connectsTo,idRL,idCP,idRQ) sRL),
	      (opMsg(idCP) mp) >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2R11 = :csp {
  eq state(getNode(sND,idND)) = created .
}
:apply (csp2-2R11 rd-)
show proof

--> *******************************************************************************************************
--> trans [R12]: < SetND, SetCP, 
--> 	       	  (req(connectsTo,IDRQ,waiting,IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), 
--> 		  (avMsg(IDCP) MP) >
-->            => < SetND, SetCP, 
--> 	       	  (req(connectsTo,IDRQ,ready,  IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), MP > .
--> *******************************************************************************************************
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
select ProofMeasure .
:goal {
  eq mesmes(< sND, sCP, 
   	      (req(connectsTo,idRQ,waiting,idND) sRQ), (rel(connectsTo,idRL,idCP,idRQ) sRL),
	      (avMsg(idCP) mp) >) = true .
}
:apply (rd-)
show proof

select
--> Totally 12 goals should be proved.
