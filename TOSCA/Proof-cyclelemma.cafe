require Proof Proof.cafe
--> **********************************************************************************
--> Initial Cont Lemma: If there is an initail node, then there is an applicable rule.
--> **********************************************************************************
--> ******************************************
--> Step 1-0: Define a predicate to be proved.
--> ******************************************
module! ProofInitialCont {
  protecting(ProofBase)

  vars B1 B2 : Bool

  pred (_when _) : Bool Bool { prec: 64 r-assoc }
  eq (B1 when B2)
     = B2 implies B1 .

  var S : State

  pred invcont : State
  eq invcont(S) 
    = cont(S) = true
    when inv(S) .
}

select ProofInitialCont .

--> Proof of the initialcont lemma
--> When there is an initial node in state S
--> Cyclic Dependency Theorem ensures there is an initial node N
--> where DWSR01(N,S) does not include any initial nodes.
--> So, we can assume that S = < (node(tnd, idND, initial) sND), sCP, sRQ, sRL, mp >
--> and someNDInStates(DWSR01(node(tnd, idND, initial),S),initial) = false .
--> *******************************************
--> Step 1-1: Begin with the most general case. 
--> *******************************************
:goal {eq invcont(< (node(tnd, idND, initial) sND), sCP, sRQ, sRL, mp >) = true .}
--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The next rule should be R01 for the node of idND.
--> **********************************************************************
--> Step 1-3: Split the current case into cases which collectively cover
-->  the current case and one of which matches to LHS of the current rule.
--> **********************************************************************
--> *********************************************************
--> Step 1-4: Split the current case into cases where
-->  the condition of the current rule does or does not hold. 
--> *********************************************************
-- The condition of R01 does or does not hold for the node of idND.
-- The states of all of the hostedOn requirements of the node are or are not ready.
:def csp1-4R01 = :csp { 
  eq allRQOfTypeOfNDInStates(sRQ,hostedOn,idND,ready) = true .
  eq sRQ = (req(hostedOn,idRQ,unbound,idND) sRQ') .
  eq sRQ = (req(hostedOn,idRQ,waiting,idND) sRQ') .
}
:apply (csp1-4R01 rd-)
-- When there is an unbound hostedOn requirement of the node:
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The relationship of the requirement of idRQ does or does not exist.
:def csp1-6idRQ = :csp {
  eq onlyOneRLOfRQ(sRL,idRQ) = false .
  eq sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL') .
}
:apply (csp1-6idRQ rd-)
-- Case 2-2: When the relationship of the requirement of idRQ exists:
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The capability of the relationship does or does not exist.
:def csp1-6idCPa = :csp {
  eq existCP(sCP,idCP) = false .
  eq sCP = (cap(hostedOn,idCP,scp,idND') sCP') .
}
:def ctf1-6idCPb = :ctf {
  eq idND' = idND .
}
:apply (csp1-6idCPa rd- ctf1-6idCPb rd-)
-- When the capability of the relationship exists and
-- the node of the capability of idCP is not the same of the node of the requiement of idRQ:
--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The next rule should be R03 or R04 for the capability of idCP.
--> **********************************************************************
--> Step 1-3: Split the current case into cases which collectively cover
-->  the current case and one of which matches to LHS of the current rule.
--> **********************************************************************
-- LHS of R04 requires a relationship and an available capability of the requirement of idRQ.
-- The state of the capability of idCP is closed, open, or available.
:def csp1-3R04 = :csp {
  eq scp = closed .
  eq scp = open .
  eq scp = available .
}
:apply (csp1-3R04 rd-)
-- When the capability of idCP is closed:
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The node of the capability of idCP does or does not exist.
:def csp1-6idND' = :csp {
  eq existND(sND,idND') = false .
  eq sND = (node(tnd',idND',snd') sND') .
}
:apply (csp1-6idND' rd-)
-- When the node of the capability of idCP exists:
--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The next rule should be R03 for the capability of idCP
--> *********************************************************
--> Step 1-4: Split the current case into cases where
-->  the condition of the current rule does or does not hold. 
--> *********************************************************
-- The condition of R03 requires the node is created or started.
-- The state of the node of idND' is initial, created, or started.
:def csp1-4R03 = :csp {
  eq snd' = initial .
  eq snd' = created .
  eq snd' = started .
}
:apply (csp1-4R03 rd-)
-- When the node of idND' is initial:
--> ******************************************************************************
--> Step 1-7: When falling in a cyclic situation, use the Cyclic Dependency Lemma.
--> ******************************************************************************
-- The Cyclic Dependency Lemma rejects this case.
:set(normalize-init,on)
:init [noCycle] by {
  O:Node <- node(tnd,idND,initial);
  SS:SetOfNDState <- initial;
  S:State  <- < (node(tnd,idND,initial) sND) , sCP , sRQ , sRL , mp >;
}
:set(normalize-init,off)
:apply (rd-)
show proof
select

--> *****************************************************************************************************
--> Created Cont Lemma: Assuming invariants if there is a created node, then there is an applicable rule.
--> *****************************************************************************************************
--> ******************************************
--> Step 1-0: Define a predicate to be proved.
--> ******************************************
module! ProofCreatedCont {
  protecting(ProofInitialCont)

  var T : NDType
  var I : NDID
  var SetND : SetOfNode
  var SetCP : SetOfCapability
  var SetRQ : SetOfRequirement
  var SetRL : SetOfRelationship
  var M : PoolOfMsg
  -- This proof uses the initial cont lemma.
  eq cont(< (node(T, I, initial) SetND), 
             SetCP, SetRQ, SetRL, M >) = true .
}

select ProofCreatedCont .

--> Proof of the createdcont lemma
--> When there is a created node in state S
--> Cyclic Dependency Theorem ensures there is a created node N
--> where DWSR02(N,S) does not include any created nodes.
--> So, we can assume that S = < (node(tnd, idND, created) sND), sCP, sRQ, sRL, mp >
--> and someNDInStates(DWSR02(node(tnd, idND, created),S),created) = false .
--> *******************************************
--> Step 1-1: Begin with the most general case. 
--> *******************************************
:goal {eq invcont(< (node(tnd, idND, created) sND), sCP, sRQ, sRL, mp >)  = true .}
--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The next rule should be R02 for the node of idND.
--> **********************************************************************
--> Step 1-3: Split the current case into cases which collectively cover
-->  the current case and one of which matches to LHS of the current rule.
--> **********************************************************************
--> *********************************************************
--> Step 1-4: Split the current case into cases where
-->  the condition of the current rule does or does not hold. 
--> *********************************************************
-- The states of all of the requirements of the node of idND are or are not ready.
:def csp1-4R02 = :csp { 
  eq allRQOfNDInStates(sRQ,idND,ready) = true .
  eq sRQ = (req(trl,idRQ,unbound,idND) sRQ') .
  eq sRQ = (req(trl,idRQ,waiting,idND) sRQ') .
}
:apply (csp1-4R02 rd-)
-- When there is an unbound requirement of the node of idND:
--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The next applicable rule depends on the type of the requirement.
-- The type of the requirement of idRQ is hostedOn, dependsOn, or connectsTo.
:def csp1-2 = :csp {
  eq trl = hostedOn .
  eq trl = dependsOn .
  eq trl = connectsTo .
}
:apply (csp1-2 rd-)
-- When the type of the requirement of idRQ is dependsOn:
--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The next rule should be R07 for the dependsOn requirement of idRQ.
--> **********************************************************************
--> Step 1-3: Split the current case into cases which collectively cover
-->  the current case and one of which matches to LHS of the current rule.
--> **********************************************************************
-- LHS of R07 requires a relationship and a capability of the dependsOn requirement of idRQ.
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The relationship of the dependsOn requirement of idRQ does or does not exist.
:def csp1-6idRQ = :csp {
  eq onlyOneRLOfRQ(sRL,idRQ) = false .
  eq sRL = (rel(dependsOn,idRL,idCP,idRQ) sRL') .
}
:apply (csp1-6idRQ rd-)
-- When the relationship of the dependsOn requirement of idRQ exists:
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The capability of the relationship does or does not exist.
:def csp1-6idCPa = :csp {
  eq existCP(sCP,idCP) = false .
  eq sCP = (cap(dependsOn,idCP,scp,idND') sCP') .
}
:def ctf1-6idCPb = :ctf {
  eq idND' = idND .
}
:apply (csp1-6idCPa rd- ctf1-6idCPb rd-)
-- When the capability of the relationship exists and
-- the node of the capability of idCP is not the same of the node of the requiement of idRQ:
--> **********************************************************************
--> Step 1-3: Split the current case into cases which collectively cover
-->  the current case and one of which matches to LHS of the current rule.
--> **********************************************************************
-- LHS of R07 requires an activated capability of the dependsOn requirement of idRQ.
-- The state of the capability of idCP is closed, open, or available.
:def csp1-3R07 = :csp {
  eq scp = closed .
  eq scp = open .
  eq scp = available .
}
:apply (csp1-3R07 rd-)
-- When the capability of idCP is closed:
--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The next rule should be R05 for the dependsOn capability of idCP.
--> *********************************************************
--> Step 1-4: Split the current case into cases where
-->  the condition of the current rule does or does not hold. 
--> *********************************************************
-- The condition of R05 requires the parent node of the capability of idCP is created or started.
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The node of the capability of idCP does or does not exist.
:def csp1-6idND'a = :csp {
  eq existND(sND,idND') = false .
  eq sND = (node(tnd',idND',snd') sND') .
}
:def csp1-6idND'b = :csp {
  eq snd' = initial .
  eq snd' = created .
  eq snd' = started .
}
:apply (csp1-6idND'a rd- csp1-6idND'b rd-)
-- When the type of the requirement of idRQ is connectsTo:
--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The next rule should be R11 for the connectsTo requirement of idRQ.
--> **********************************************************************
--> Step 1-3: Split the current case into cases which collectively cover
-->  the current case and one of which matches to LHS of the current rule.
--> **********************************************************************
-- LHS of R11 requires a relationship of the connectsTo requirement of idRQ.
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The relationship of the connectsTo requirement of idRQ does or does not exist.
:apply (csp1-6idRQ rd-)
-- When there is a waiting requirement of idRQ of the node of idND:
:apply (csp1-2 rd-)
-- When the type of the requirement of idRQ is dependsOn:
--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The next rule should be R08 for the dependsOn requirement of idRQ.
--> **********************************************************************
--> Step 1-3: Split the current case into cases which collectively cover
-->  the current case and one of which matches to LHS of the current rule.
--> **********************************************************************
-- LHS of R08 requires a relationship and a capability of the dependsOn requirement of idRQ.
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The relationship of the dependsOn requirement of idRQ does or does not exist.
:apply (csp1-6idRQ rd-)
-- When the relationship of the dependsOn requirement of idRQ exists:
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The capability of the relationship does or does not exist.
:apply (csp1-6idCPa rd- ctf1-6idCPb rd-)
-- When the capability of the relationship exists and
-- the node of the capability of idCP is not the same of the node of the requiement of idRQ:
--> **********************************************************************
--> Step 1-3: Split the current case into cases which collectively cover
-->  the current case and one of which matches to LHS of the current rule.
--> **********************************************************************
-- LHS of R08 requires an available capability of the dependsOn requirement of idRQ.
-- The state of the capability of idCP is closed, open, or available.
:def csp1-3R08 = :csp {
  eq scp = closed .
  eq scp = open .
  eq scp = available .
}
:apply (csp1-3R08 rd-)
-- When the capability of idCP is open:
--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The next rule should be R06 for the dependsOn capability of idCP.
--> *********************************************************
--> Step 1-4: Split the current case into cases where
-->  the condition of the current rule does or does not hold. 
--> *********************************************************
-- The condition of R06 requires the parent node of the capability of idCP is started.
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The node of the capability of idCP does or does not exist.
:apply (csp1-6idND'a rd- csp1-6idND'b rd-)
-- When the node of the capability of idCP exists and
-- the node of idND' is created:
--> ******************************************************************************
--> Step 1-7: When falling in a cyclic situation, use the Cyclic Dependency Lemma.
--> ******************************************************************************
:set(normalize-init,on)
:init [noCycle] by {
  O:Node <- node(tnd,idND,created);
  SS:SetOfNDState <- created;
  S:State  <- < (node(tnd,idND,created) sND) , sCP , sRQ , sRL , mp >;
}
:set(normalize-init,off)
:apply (rd-)
-- When the type of the requirement of idRQ is connectsTo:
--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The next rule should be R12 for the connectsTo requirement of idRQ.
--> **********************************************************************
--> Step 1-3: Split the current case into cases which collectively cover
-->  the current case and one of which matches to LHS of the current rule.
--> **********************************************************************
-- LHS of R12 requires a relationship of the connectsTo requirement of idRQ.
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The relationship of the connectsTo requirement of idRQ does or does not exist.
:apply (csp1-6idRQ rd-)
show proof
select
--> Totally 2 goals should be proved.
