require DomainModel DomainModel.cafe
provide PROOF

module PROOF {
  protecting(PROOFBASE)
  protecting(STATERules)

  var SetND : SetOfNode
  var SetCP : SetOfCapability
  var SetRQ : SetOfRequirement
  var SetRL : SetOfRelationship
  vars IDND IDND1 IDND2 : NDID 
  vars IDCP IDCP1 IDCP2 : CPID 
  var IDRQ  : RQID 
  var IDRL  : RLID 
  var SCP : CPState
  var SRL : RLState
  var MP : PoolOfMsg
  var S : State

--> **************************************
--> Step 0-1: Define init(S) and final(S).
--> **************************************
  eq init(< SetND,SetCP,SetRQ,SetRL,MP >)
     = not (SetND = empND) and (MP = empMsg) and
       wfs(< SetND,SetCP,SetRQ,SetRL,MP >) and
       noNDCycle(< SetND,SetCP,SetRQ,SetRL,MP >) and
       allNDInStates(SetND,initial) and 
       allCPInStates(SetCP,closed) and 
       allRQInStates(SetRQ,unbound) .
  eq final(< SetND,SetCP,SetRQ,SetRL,MP >)
     = allNDInStates(SetND,started) .
  -- It may define more strictly:
  -- = (MP = empMsg) and
  --   allNDInStates(SetND,started) and
  --   allCPInStates(SetCP,available) and
  --   allRQInStates(SetRQ,ready) .

--> **********************
--> Step 0-2: Define m(S).
--> **********************
  eq m(< SetND,SetCP,SetRQ,SetRL,MP >)
     = (( (#NodeInStates(initial,SetND)        * 2) + #NodeInStates(created,SetND))
     +  ( (#CapabilityInStates(closed,SetCP)   * 2) + #CapabilityInStates(open,SetCP)))
     +  ( (#RequirementInStates(unbound,SetRQ) * 2) + #RequirementInStates(waiting,SetRQ)) .


--> *************************
--> Step 0-3: Define inv(S).
--> *************************
  -- The invariant should be defined as the conjunction of all inv-* and all wfs-*.
  -- But this definition causes costly computations.

  -- Invariants defined by using general predicates.
  pred inv-ifNDInitialThenRQUnboundReady : State
  eq inv-ifNDInitialThenRQUnboundReady(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifNDInStatesThenRQInStates(SetND,initial,SetRQ,(unbound ready)) .
  pred inv-ifNDCreatedThenHostedOnRQReady : State
  eq inv-ifNDCreatedThenHostedOnRQReady(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifNDInStatesThenRQOfTypeInStates(SetND,(created started),SetRQ,hostedOn,ready) .
  pred inv-ifNDStartedThenRQReady : State
  eq inv-ifNDStartedThenRQReady(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifNDInStatesThenRQInStates(SetND,started,SetRQ,ready) .
  pred inv-ifCPClosedThenRQUnbound : State
  eq inv-ifCPClosedThenRQUnbound(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifCPInStatesThenRQInStates(SetCP,closed,SetRQ,unbound,SetRL) .
  pred inv-ifCPOpenThenRQUnboundWaiting : State
  eq inv-ifCPOpenThenRQUnboundWaiting(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifCPInStatesThenRQInStates(SetCP,open,SetRQ,(unbound waiting),SetRL) .
  pred inv-HostedOnCPNotOpen : State
  eq inv-HostedOnCPNotOpen(< SetND,SetCP,SetRQ,SetRL,MP >)
     = allHostedOnCPInStates(SetCP,(closed available)) .
  pred inv-HostedOnRQNotWaiting : State
  eq inv-HostedOnRQNotWaiting(< SetND,SetCP,SetRQ,SetRL,MP >)
     = allHostedOnRQInStates(SetRQ,(unbound ready)) .

  -- Problem specific invariants for messaging.
  pred inv-ifConnectsToCPOpenThenRQWaitingOrOpenMsg : State
  eq inv-ifConnectsToCPOpenThenRQWaitingOrOpenMsg(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,open,SetRQ,waiting,SetRL,MP) .
  pred inv-ifConnectsToCPAvailableThenRQWaitingReadyOrOpenMsg : State
  eq inv-ifConnectsToCPAvailableThenRQWaitingReadyOrOpenMsg(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,available,SetRQ,(waiting ready),SetRL,MP) .
  pred inv-ifConnectsToCPAvailableThenRQReadyOrAvailableMsg : State
  eq inv-ifConnectsToCPAvailableThenRQReadyOrAvailableMsg(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(SetCP,available,SetRQ,ready,SetRL,MP) .
  pred inv-ifOpenMsgThenCPActivated : State
  eq inv-ifOpenMsgThenCPActivated(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifOpenMsgThenCPInStates(MP,SetCP,(open available)) .
  pred inv-ifAvailableMsgThenCPAvailable : State
  eq inv-ifAvailableMsgThenCPAvailable(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifAvailableMsgThenCPInStates(MP,SetCP,available) .

  -- wfs-*:
  -- wfs's defined by using general predicates.
  ceq wfs(S) = false if not wfs-uniqND(S) .
  ceq wfs(S) = false if not wfs-uniqCP(S) .
  ceq wfs(S) = false if not wfs-uniqRQ(S) .
  ceq wfs(S) = false if not wfs-uniqRL(S) .
  ceq wfs(S) = false if not wfs-allCPHaveND(S) .
  ceq wfs(S) = false if not wfs-allRQHaveND(S) .
  ceq wfs(S) = false if not wfs-allRLHaveCP(S) .
  ceq wfs(S) = false if not wfs-allRLHaveRQ(S) .
  ceq wfs(S) = false if not wfs-allCPHaveRL(S) .
  ceq wfs(S) = false if not wfs-allRQHaveRL(S) .
  -- Problem specific wfs's for type constraint.
  ceq wfs(S) = false if not wfs-allRLHaveSameTypeCPRQ(S) .
  -- Other problem specific wfs's.
  ceq wfs(S) = false if not wfs-allRLNotInSameND(S) .
  ceq wfs(S) = false if not wfs-allRLHoldLocality(S) .
  ceq wfs(S) = false if not wfs-allNDHaveAtMostOneHost(S) .
  ceq inv(S) = false if not wfs(S) .

  -- inv-*:
  ceq inv(S) = false if not inv-ifNDInitialThenRQUnboundReady(S) .
  ceq inv(S) = false if not inv-ifNDCreatedThenHostedOnRQReady(S) .
  ceq inv(S) = false if not inv-ifNDStartedThenRQReady(S) .
  ceq inv(S) = false if not inv-ifCPClosedThenRQUnbound(S) .
  ceq inv(S) = false if not inv-ifCPOpenThenRQUnboundWaiting(S) .
  ceq inv(S) = false if not inv-HostedOnCPNotOpen(S) .
  ceq inv(S) = false if not inv-HostedOnRQNotWaiting(S) .
  ceq inv(S) = false if not noNDCycle(S) .

  -- Problem specific invariants for messaging.
  ceq inv(S) = false if not inv-ifConnectsToCPOpenThenRQWaitingOrOpenMsg(S) .
  ceq inv(S) = false if not inv-ifConnectsToCPAvailableThenRQWaitingReadyOrOpenMsg(S) .
  ceq inv(S) = false if not inv-ifConnectsToCPAvailableThenRQReadyOrAvailableMsg(S) .
  -- Problem specific invariants for proving other invariants.
  ceq inv(S) = false if not inv-ifOpenMsgThenCPActivated(S) .
  ceq inv(S) = false if not inv-ifAvailableMsgThenCPAvailable(S).

--> **************************************
--> Step 0-4: Prepare arbitrary constants.
--> **************************************
  ops idND idND' : -> NDIDLt
  ops idCP idCP' : -> CPIDLt
  ops idRQ idRQ' : -> RQIDLt
  ops idRL idRL' : -> RLIDLt
  ops sND sND' sND'' sND''' : -> SetOfNode
  ops sCP sCP' sCP'' sCP''' : -> SetOfCapability
  ops sRQ sRQ' sRQ'' sRQ''' : -> SetOfRequirement
  ops sRL sRL' sRL'' sRL''' : -> SetOfRelationship
  ops tnd tnd' tnd'' tnd''' : -> NDType
  ops trl trl' trl'' trl''' : -> RLType
  ops snd snd' snd'' : -> NDState
  ops scp scp' scp'' : -> CPState
  ops srq srq' srq'' : -> RQState
  op stND : -> SetOfNDState
  op stCP : -> SetOfCPState
  op stRQ : -> SetOfRQState
  ops mp mp' : -> PoolOfMsg
  op msg : -> Msg

  -- idND1 is an NDID different from idND.
  op idND1 : -> NDID
  eq (idND1 = idND) = false .
}

-- *************************************************************
-- (1) inv(S) implies cont(SS) or final(SS).
-- (2) inv(S) and not final(S) implies measure(S) > measure(SS).
-- (3) init(S) implies inv(S).
-- (4) inv(S) implies inv(SS).
-- *************************************************************

-- *****************************************
-- (1) inv(S) implies cont(SS) or final(SS).
-- *****************************************
-- in Proof-invcont.cafe

-- *************************************************************************
-- (2) inv(S) and not final(S) implies measure(S) > measure(SS).
-- *************************************************************************
-- in Proof-measure.cafe

-- ***************************
-- (3) init(S) implies inv(S).
-- (4) inv(S) implies inv(SS).
-- ***************************
-- in Proof-inv.cafe
