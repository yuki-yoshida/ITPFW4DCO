require PROOF Proof.cafe
provide ProofContCont

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ******************************************
--> Step 2-0: Define a predicate to be proved.
--> ******************************************
module ProofContCont {
  protecting(PROOF)

  var T : NDType
  var I : NDID
  var SetND : SetOfNode
  var SetCP : SetOfCapability
  var SetRQ : SetOfRequirement
  var SetRL : SetOfRelationship
  var M : PoolOfMsg

  -- initial-cont lemma: 
  eq cont(< (node(T, I, initial) SetND), 
	    SetCP, SetRQ, SetRL, M >)
     = true .
  -- created-cont lemma:
  eq cont(< (node(T, I, created) SetND), 
	    SetCP, SetRQ, SetRL, M >)
     = true .
}
