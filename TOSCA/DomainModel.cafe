require Template ../lib/Template.cafe
require BAG ../lib/BAG.cafe
provide DomainModel

-- An abstract model for OASIS TOSCA

-- There are four kinds of objects:
-- Node(ND): a component of which a cloud application composes.
-- Capability(CP): a function which a node provides.
-- Requirement(RQ): a function which a node requires.
-- Relationship(RL): a relationship between a requirement and a capability.

-- There are typical types of nodes, 
--   VM(Virtual Machine), OS(Operating System), MW(Middleware), SC(Software Component), ...
-- There are typical types of relationships,
--   hostedOn: a node is hosted on another node,
--   dependsOn: a node is started only when another local node has been started,
--   connectsTo: a node needs a connection to another remote node,
-- where "local" means both nodes are hosted in a same VM and "remote" means non-local.

module! NODE {
  -- Sorts
  [Node NDID NDType NDState]
  -- Constructor
  -- node(NDType, NDID, NDState) is a Node.
  op node : NDType NDID NDState -> Node {constr}
  -- Selectors
  op id : Node -> NDID
  op type : Node -> NDType
  op state : Node -> NDState
  var TND : NDType
  var IDND : NDID
  var SND : NDState
  eq type(node(TND,IDND,SND)) = TND .
  eq id(node(TND,IDND,SND)) = IDND .
  eq state(node(TND,IDND,SND)) = SND .
}

module! NODEfuns {
  extending(OBJECTBASE(
	NODE {sort Object -> Node,
	      sort ObjType -> NDType,
	      sort ObjID -> NDID,
	      sort ObjState -> NDState})
	* {sort ObjIDLt -> NDIDLt,
	   sort ObjTypeLt -> NDTypeLt,
	   sort ObjStateLt -> NDStateLt,
	   sort SetOfObject -> SetOfNode,
	   sort SetOfObjState -> SetOfNDState,
	   op empObj -> empND,
	   op empState -> empSND,
	   op existObj -> existND,
	   op existObjInStates -> existNDInStates,
	   op uniqObj -> uniqND,
	   op #ObjInStates -> #NodeInStates,
	   op getObject -> getNode,
	   op allObjInStates -> allNDInStates,
	   op allObjOfTypeInStates -> allNDOfTypeInStates,
	   op allObjNotInStates -> allNDNotInStates,
	   op someObjInStates -> someNDInStates})

  -- There are four typical node types.
  ops VM OS MW SC : -> NDTypeLt {constr}

  ops initial created started : -> NDStateLt {constr}
  eq (initial > created) = true .
  eq (initial > started) = true .
  eq (created > started) = true .
  pred isCreated : NDState
  eq isCreated(initial) = false .
  eq isCreated(created) = true .
  eq isCreated(started) = true .
}

module! CAPABILITY {
  protecting(NODE)
  -- Sorts
  [Capability CPID CPType CPState]
  -- Constructor
  -- cap(CPType, CPID, CPState, NDID) is a Capability of a Node identified by idND.
  op cap : CPType CPID CPState NDID -> Capability {constr}
  -- Selectors
  op id : Capability -> CPID
  op type : Capability -> CPType
  op state : Capability -> CPState
  op node : Capability -> NDID
  var TCP : CPType
  var IDCP : CPID
  var SCP : CPState
  var IDND : NDID
  eq type(cap(TCP,IDCP,SCP,IDND)) = TCP .
  eq id(cap(TCP,IDCP,SCP,IDND)) = IDCP .
  eq state(cap(TCP,IDCP,SCP,IDND)) = SCP .
  eq node(cap(TCP,IDCP,SCP,IDND)) = IDND .
}  

module! CAPABILITYfuns {
  protecting(NODEfuns)

  extending(OBJECTBASE(
	CAPABILITY {sort Object -> Capability
		    sort ObjID -> CPID,
		    sort ObjType -> CPType,
		    sort ObjState -> CPState})
	* {sort ObjIDLt -> CPIDLt,
	   sort ObjTypeLt -> CPTypeLt,
	   sort ObjStateLt -> CPStateLt,
	   sort SetOfObject -> SetOfCapability,
	   sort SetOfObjState -> SetOfCPState,
	   op empObj -> empCP,
	   op empState -> empSCP,
	   op existObj -> existCP,
	   op existObjInStates -> existCPInStates,
	   op uniqObj -> uniqCP,
	   op #ObjInStates -> #CapabilityInStates,
	   op getObject -> getCapability,
	   op allObjInStates -> allCPInStates,
	   op allObjOfTypeInStates -> allCPOfTypeInStates,
	   op allObjNotInStates -> allCPNotInStates,
	   op someObjInStates -> someCPInStates})

  ops closed open available : -> CPStateLt {constr}
  eq (closed > open) = true .
  eq (closed > available) = true .
  eq (open > available) = true .
  pred isActivated : CPState
  eq isActivated(closed) = false .
  eq isActivated(open) = true .
  eq isActivated(available) = true .
}

module! REQUIREMENT {
  protecting(NODE)
  -- Sorts
  [Requirement RQID RQType RQState]
  -- Constructor
  -- req(RQType, RQID, RQState, NDID) is a Requirement of a Node idetified by idND.
  op req : RQType RQID RQState NDID -> Requirement {constr}
  -- Selectors
  op id : Requirement -> RQID
  op type : Requirement -> RQType
  op state : Requirement -> RQState
  op node : Requirement -> NDID
  var TRQ : RQType
  var IDRQ : RQID
  var IDND : NDID
  var SRQ : RQState
  eq type(req(TRQ,IDRQ,SRQ,IDND)) = TRQ .
  eq id(req(TRQ,IDRQ,SRQ,IDND)) = IDRQ .
  eq state(req(TRQ,IDRQ,SRQ,IDND)) = SRQ .
  eq node(req(TRQ,IDRQ,SRQ,IDND)) = IDND .
}  

module! REQUIREMENTfuns {
  protecting(NODEfuns)

  extending(OBJECTBASE(
	REQUIREMENT {sort Object -> Requirement,
		     sort ObjID -> RQID,
		     sort ObjType -> RQType,
		     sort ObjState -> RQState})
	* {sort ObjIDLt -> RQIDLt,
	   sort ObjTypeLt -> RQTypeLt,
	   sort ObjStateLt -> RQStateLt,
	   sort SetOfObject -> SetOfRequirement,
	   sort SetOfObjState -> SetOfRQState,
	   op empObj -> empRQ,
	   op empState -> empSRQ,
	   op existObj -> existRQ,
	   op existObjInStates -> existRQInStates,
	   op uniqObj -> uniqRQ,
	   op #ObjInStates -> #RequirementInStates,
	   op getObject -> getRequirement,
	   op allObjInStates -> allRQInStates,
	   op allObjOfTypeInStates -> allRQOfTypeInStates,
	   op allObjNotInStates -> allRQNotInStates,
	   op someObjInStates -> someRQInStates})

  ops unbound waiting ready : -> RQStateLt {constr}
  eq (unbound > waiting) = true .
  eq (unbound > ready) = true .
  eq (waiting > ready) = true .
}

module! RELATIONSHIP {
  protecting(CAPABILITY + REQUIREMENT)
  -- Sorts
  [Relationship RLID RLState]
  [RLType < CPType RQType]
  -- Constructor
  -- rel(RLType, RLID, CPID, RQID) is a Relationship
  op rel : RLType RLID CPID RQID -> Relationship {constr}
  -- Selectors
  op id : Relationship -> RLID
  op type : Relationship -> RLType
  op state : Relationship -> RLState
  op cap : Relationship -> CPID
  op req : Relationship -> RQID
  var TRL : RLType
  var IDRL : RLID
  var IDCP : CPID
  var IDRQ : RQID
  eq type(rel(TRL,IDRL,IDCP,IDRQ)) = TRL .
  eq id(rel(TRL,IDRL,IDCP,IDRQ)) = IDRL .
  eq cap(rel(TRL,IDRL,IDCP,IDRQ)) = IDCP .
  eq req(rel(TRL,IDRL,IDCP,IDRQ)) = IDRQ .
}  

module! RELATIONSHIPfuns {
  protecting(CAPABILITYfuns + REQUIREMENTfuns)

  extending(OBJECTBASE(
	RELATIONSHIP {sort Object -> Relationship,
		      sort ObjID -> RLID,
		      sort ObjType -> RLType,
		      sort ObjState -> RLState})
	* {sort ObjIDLt -> RLIDLt,
	   sort ObjTypeLt -> RLTypeLt,
	   sort ObjStateLt -> RLStateLt,
	   sort SetOfObject -> SetOfRelationship,
	   sort SetOfObjState -> SetOfRLState,
	   op empObj -> empRL,
	   op existObj -> existRL,
	   op uniqObj -> uniqRL})

  ops hostedOn dependsOn connectsTo : -> RLTypeLt {constr}
  pred isLocalRL : Relationship
  var IDRL : RLID
  var IDCP : CPID
  var IDRQ : RQID
  eq isLocalRL(rel(hostedOn,IDRL,IDCP,IDRQ)) = true .
  eq isLocalRL(rel(dependsOn,IDRL,IDCP,IDRQ)) = true .
  eq isLocalRL(rel(connectsTo,IDRL,IDCP,IDRQ)) = false .
}

module! LINKS {
  protecting(NODE + CAPABILITY + REQUIREMENT + RELATIONSHIP)

  extending(OBJLINKMANY2ONE(
	CAPABILITYfuns {sort Object -> Capability,
			sort ObjID -> CPID,
			sort ObjType -> CPType,
			sort ObjState -> CPState,
			sort SetOfObject -> SetOfCapability,
			sort SetOfObjState -> SetOfCPState,
			op empObj -> empCP,
			op getObject -> getCapability,
			op existObj -> existCP,
			op allObjInStates -> allCPInStates,
			sort LObject -> Node,
			sort LObjID -> NDID,
			sort LObjState -> NDState,
			sort SetOfLObject -> SetOfNode,
			sort SetOfLObjState -> SetOfNDState,
			op link -> node,
			op empLObj -> empND,
			op getLObject -> getNode,
			op existLObj -> existND,
			op allLObjInStates -> allNDInStates,
			op existLObjInStates -> existNDInStates})
	* {op allZHaveX -> allCPHaveND,
	   op allZOfTypeOfXInStates -> allCPOfTypeOfNDInStates,
	   op allZOfXInStates -> allCPOfNDInStates,
	   op getXOfZ -> getNDOfCP,
	   op getXsOfZs -> getNDsOfCPs,
	   op getXsOfZsInStates -> getNDsOfCPsInStates,
	   op getZsOfTypeOfX -> getCPsOfTypeOfND,
	   op getZsOfTypeOfXInStates -> getCPsOfTypeOfNDInStates,
	   op getZsOfTypeOfXsInStates -> getCPsOfTypeOfNDsInStates,
	   op getZsOfX -> getCPsOfND,
	   op getZsOfXInStates -> getCPsOfNDInStates,
	   op getZsOfXs -> getCPsOfNDs,
	   op getZsOfXsInStates -> getCPsOfNDsInStates,
	   op ifXInStatesThenZInStates -> ifNDInStatesThenCPInStates,
	   op ifXInStatesThenZOfTypeInStates -> ifNDInStatesThenCPOfTypeInStates}
	)

  extending(OBJLINKMANY2ONE(
	REQUIREMENTfuns {sort Object -> Requirement,
			 sort ObjID -> RQID,
			 sort ObjType -> RQType,
			 sort ObjState -> RQState,
			 sort SetOfObject -> SetOfRequirement,
			 sort SetOfObjState -> SetOfRQState,
			 op empObj -> empRQ,
			 op getObject -> getRequirement,
			 op existObj -> existRQ,
			 op allObjInStates -> allRQInStates,
			 sort LObject -> Node,
			 sort LObjID -> NDID,
			 sort LObjState -> NDState,
			 sort SetOfLObject -> SetOfNode,
			 sort SetOfLObjState -> SetOfNDState,
			 op link -> node,
			 op empLObj -> empND,
			 op getLObject -> getNode,
			 op existLObj -> existND,
			 op allLObjInStates -> allNDInStates,
			 op existLObjInStates -> existNDInStates})
	* {op allZHaveX -> allRQHaveND,
	   op allZOfTypeOfXInStates -> allRQOfTypeOfNDInStates,
	   op allZOfXInStates -> allRQOfNDInStates,
	   op getXOfZ -> getNDOfRQ,
	   op getXsOfZs -> getNDsOfRQs,
	   op getXsOfZsInStates -> getNDsOfRQsInStates,
	   op getZsOfTypeOfX -> getRQsOfTypeOfND,
	   op getZsOfTypeOfXInStates -> getRQsOfTypeOfNDInStates,
	   op getZsOfTypeOfXsInStates -> getRQsOfTypeOfNDsInStates,
	   op getZsOfX -> getRQsOfND,
	   op getZsOfXInStates -> getRQsOfNDInStates,
	   op getZsOfXs -> getRQsOfNDs,
	   op getZsOfXsInStates -> getRQsOfNDsInStates,
	   op ifXInStatesThenZInStates -> ifNDInStatesThenRQInStates,
	   op ifXInStatesThenZOfTypeInStates -> ifNDInStatesThenRQOfTypeInStates}
	)

  extending(OBJLINKONE2ONE(
	RELATIONSHIPfuns {sort Object -> Relationship,
			  sort ObjID -> RLID,
			  sort ObjType -> RLType,
			  sort ObjState -> RLState,
			  sort SetOfObject -> SetOfRelationship,
			  sort SetOfObjState -> SetOfRLState,
			  op empObj -> empRL,
			  op existObj -> existRL,
			  sort LObject -> Capability,
			  sort LObjID -> CPID,
			  sort LObjState -> CPState,
			  sort SetOfLObject -> SetOfCapability,
			  sort SetOfLObjState -> SetOfCPState,
			  op link -> cap,
			  op empLObj -> empCP,
			  op getLObject -> getCapability,
			  op existLObj -> existCP,
			  op allLObjInStates -> allCPInStates,
			  op existLObjInStates -> existCPInStates})
	* {op allXHaveY -> allCPHaveRL,
	   op allYHaveX -> allRLHaveCP,
	   op existX -> existCP,
	   op getXOfY -> getCPOfRL,
	   op getXsOfYs -> getCPsOfRLs,
	   op getXsOfYsInStates -> getCPsOfRLsInStates,
	   op getYOfX -> getRLOfCP,
	   op getYsOfXs -> getRLsOfCPs,
	   op getYsOfXsInStates -> getRLsOfCPsInStates,
	   op ifXInStatesThenYInStates -> ifCPInStatesThenRLInStates,
	   op ifYInStatesThenXInStates -> ifRLInStatesThenCPInStates,
	   op onlyOneYOfX -> onlyOneRLOfCP,
	   op uniqX -> uniqCP,
	   op YOfXInStates -> RLOfCPInStates}
	)

  extending(OBJLINKONE2ONE(
	RELATIONSHIPfuns {sort Object -> Relationship,
			  sort ObjID -> RLID,
			  sort ObjType -> RLType,
			  sort ObjState -> RLState,
			  sort SetOfObject -> SetOfRelationship,
			  sort SetOfObjState -> SetOfRLState,
			  op empObj -> empRL,
			  op existObj -> existRL,
			  sort LObject -> Requirement,
			  sort LObjID -> RQID,
			  sort LObjState -> RQState,
			  sort SetOfLObject -> SetOfRequirement,
			  sort SetOfLObjState -> SetOfRQState,
			  op link -> req,
			  op empLObj -> empRQ,
			  op getLObject -> getRequirement,
			  op existLObj -> existRQ,
			  op allLObjInStates -> allRQInStates,
			  op existLObjInStates -> existRQInStates})
	* {op existX -> existRQ,
	   op getXOfY -> getRQOfRL,
	   op getXsOfYs -> getRQsOfRLs,
	   op getXsOfYsInStates -> getRQsOfRLsInStates,
	   op getYOfX -> getRLOfRQ,
	   op getYsOfXs -> getRLsOfRQs,
	   op getYsOfXsInStates -> getRLsOfRQsInStates,
	   op uniqX -> uniqRQ,
	   op YOfXInStates -> RLOfRQInStates,
	   op ifXInStatesThenYInStates -> ifRQInStatesThenRLInStates,
	   op ifYInStatesThenXInStates -> ifRLInStatesThenRQInStates,
	   op allYHaveX -> allRLHaveRQ,
	   op allXHaveY -> allRQHaveRL,
	   op existX -> existRQ,
	   op onlyOneYOfX -> onlyOneRLOfRQ}
	)
}

--> Start Defining LINKLINKS <--
module! LINKLINKS {

  extending(OBJLINKONE2ONE2ONE(
	LINKS {sort Object -> Relationship,
	       sort SetOfObject -> SetOfRelationship,
	       sort ObjID -> RLID,
	       sort ObjState -> RLState,
	       sort SetOfObjState -> SetOfRLState,
	       op empObj -> empRL,
	       op existObj -> existRL,

	       sort LObject -> Capability,
	       sort SetOfLObject -> SetOfCapability,
	       sort LObjID -> CPID,
	       sort LObjState -> CPState,
	       sort SetOfLObjState -> SetOfCPState,
	       op empLObj -> empCP,
	       op link -> cap,
	       op existLObj -> existCP,
	       op uniqX -> uniqCP,
	       op getYOfX -> getRLOfCP,
	       op getXOfY -> getCPOfRL,

	       sort L'Object -> Requirement,
	       sort SetOfL'Object -> SetOfRequirement,
	       sort L'ObjID -> RQID,
	       sort L'ObjState -> RQState,
	       sort SetOfL'ObjState -> SetOfRQState,
	       op link' -> req,
	       op uniqX' -> uniqRQ,
	       op getYOfX' -> getRLOfRQ,
	       op getX'OfY -> getRQOfRL})
	* {op getXOfX' -> getCPOfRQ,
	   op getX'OfX -> getRQOfCP,
	   op ifXInStatesThenX'InStates -> ifCPInStatesThenRQInStates}
	)

}

module! MSG {
  protecting(LINKLINKS)

  [Msg]
  -- An open message
  op opMsg : CPID -> Msg {constr}
  -- An available message
  op avMsg : CPID -> Msg {constr}

  vars IDCP1 IDCP2 : CPID 
  eq (opMsg(IDCP1) = opMsg(IDCP2))
     = (IDCP1 = IDCP2) .
  eq (avMsg(IDCP1) = avMsg(IDCP2))
     = (IDCP1 = IDCP2) .
  eq (opMsg(IDCP1) = avMsg(IDCP2))
     = false .
}    

module! STATE {
  protecting(STATEBASE)
  protecting(BAG(MSG {sort Elt -> Msg})
      * {sort Bag -> PoolOfMsg,
      	 op empty -> empMsg})
  op <_,_,_,_,_> : SetOfNode SetOfCapability SetOfRequirement SetOfRelationship PoolOfMsg -> State {constr}
}

module! STATECyclefuns {
  protecting(STATE)

  var ND : Node
  var SetND : SetOfNode
  var SetCP : SetOfCapability
  var SetRQ : SetOfRequirement
  var SetRL : SetOfRelationship
  var MP : PoolOfMsg

  op getAllNDInState : State -> SetOfNode
  eq getAllNDInState(< SetND,SetCP,SetRQ,SetRL,MP >) = SetND .

  op DDSND : Node State -> SetOfNode
  eq DDSND(ND,< SetND,SetCP,SetRQ,SetRL,MP >)
    = getNDsOfCPs(SetND,
                  getCPsOfRLs(SetCP,
     		              getRLsOfRQs(SetRL,
    		                          getRQsOfND(SetRQ,ND)))) .
}

module! STATEfuns {
  protecting(STATE)

  extending(CYCLEPRED(
	STATECyclefuns {sort Object -> Node,
	       		sort SetOfObject -> SetOfNode,
			sort LocalState -> NDState,
			op DDSC -> DDSND,
	       		op empObj -> empND,
	       		op getAllObjC -> getAllNDInState})
	* {op noCycleC -> noNDCycle}
	)

  var ND : Node
  var CP : Capability
  var RQ : Requirement
  var RL : Relationship
  var TND : NDType
  var TRL : RLType
  var IDND : NDID
  var IDCP : CPID
  var IDRQ : RQID
  var IDRL : RLID
  var SCP : CPState
  var SRQ : RQState
  var SetND : SetOfNode
  var SetCP : SetOfCapability
  var SetRQ : SetOfRequirement
  vars SetRL SetRL1 : SetOfRelationship
  var StND : SetOfNDState
  var StCP : SetOfCPState
  var StRQ : SetOfRQState
  var TYRL : RLType
  var MP : PoolOfMsg
  var S : State

  -- op getCPOfRQ : SetOfCapability SetOfRelationship RQID -> Capability
  -- op getCPOfRQ : SetOfCapability SetOfRelationship Requirement -> Capability
  -- eq getCPOfRQ(SetCP,SetRL,RQ)
  --    = getCPOfRQ(SetCP,SetRL,id(RQ)) .
  -- eq getCPOfRQ(SetCP,SetRL,IDRQ)
  --    = getCPOfRL(SetCP,getRLOfRQ(SetRL,IDRQ)) .

  -- op getRQOfCP : SetOfRequirement SetOfRelationship CPID -> Requirement
  -- op getRQOfCP : SetOfRequirement SetOfRelationship Capability -> Requirement
  -- eq getRQOfCP(SetRQ,SetRL,CP)
  --    = getRQOfCP(SetRQ,SetRL,id(CP)) .
  -- eq getRQOfCP(SetRQ,SetRL,IDCP)
  --    = getRQOfRL(SetRQ,getRLOfCP(SetRL,IDCP)) .

  pred allRLHaveSameTypeCPRQ : SetOfRelationship SetOfCapability SetOfRequirement
  eq allRLHaveSameTypeCPRQ(empRL,SetCP,SetRQ)
     = true .
  eq allRLHaveSameTypeCPRQ((RL SetRL),SetCP,SetRQ)
     = (existCP(SetCP,cap(RL)) implies type(getCPOfRL(SetCP,RL)) = type(RL)) and
       (existRQ(SetRQ,req(RL)) implies type(getRQOfRL(SetRQ,RL)) = type(RL)) and
       allRLHaveSameTypeCPRQ(SetRL,SetCP,SetRQ) .

  pred allRLNotInSameND : SetOfRelationship SetOfCapability SetOfRequirement
  eq allRLNotInSameND(empRL,SetCP,SetRQ)
     = true .
  eq allRLNotInSameND((RL SetRL),SetCP,SetRQ)
     = (node(getCPOfRL(SetCP,RL)) = node(getRQOfRL(SetRQ,RL))) = false and
       allRLNotInSameND(SetRL,SetCP,SetRQ) .

  -- WFS ensures that there is at most one HostedOn requirement
  op getHostedOnRQOfND : SetOfRequirement NDID -> Requirement
  op getHostedOnRQOfND : SetOfRequirement Node -> Requirement
  op head : SetOfRequirement -> Requirement
  eq getHostedOnRQOfND(SetRQ,ND)
     = getHostedOnRQOfND(SetRQ,id(ND)) .
  eq getHostedOnRQOfND(SetRQ,IDND)
     = head(getRQsOfTypeOfND(SetRQ,hostedOn,IDND)) .
  eq head((RQ SetRQ)) = RQ .

  op getHostedOnRQsOfNDInStates : SetOfRequirement NDID SetOfRQState -> SetOfRequirement
  op getHostedOnRQsOfNDInStates : SetOfRequirement Node SetOfRQState -> SetOfRequirement
  eq getHostedOnRQsOfNDInStates(SetRQ,ND,StRQ)
     = getHostedOnRQsOfNDInStates(SetRQ,id(ND),StRQ) .
  eq getHostedOnRQsOfNDInStates(SetRQ,IDND,StRQ)
     = getRQsOfTypeOfNDInStates(SetRQ,hostedOn,IDND,StRQ) .

  op VMOfND : NDID SetOfNode SetOfCapability SetOfRequirement SetOfRelationship -> NDID
  op VMOfND : Node SetOfNode SetOfCapability SetOfRequirement SetOfRelationship -> NDID
  eq VMOfND(IDND,SetND,SetCP,SetRQ,SetRL)
     = VMOfND(getNode(SetND,IDND),SetND,SetCP,SetRQ,SetRL) .
  eq VMOfND(ND,SetND,SetCP,SetRQ,SetRL)
     = if type(ND) = VM then
         id(ND)
       else
         VMOfND(getNDOfCP(SetND,
			  getCPOfRL(SetCP,
			            getRLOfRQ(SetRL,
				              getHostedOnRQOfND(SetRQ,ND)))),
	        SetND,SetCP,SetRQ,SetRL)
       fi .

  op VMOfCP : CPID SetOfNode SetOfCapability SetOfRequirement SetOfRelationship -> NDID
  eq VMOfCP(IDCP,SetND,SetCP,SetRQ,SetRL)
     = VMOfND(node(getCapability(SetCP,IDCP)),SetND,SetCP,SetRQ,SetRL) .

  op VMOfRQ : RQID SetOfNode SetOfCapability SetOfRequirement SetOfRelationship -> NDID
  eq VMOfRQ(IDRQ,SetND,SetCP,SetRQ,SetRL)
     = VMOfND(node(getRequirement(SetRQ,IDRQ)),SetND,SetCP,SetRQ,SetRL) .

  pred allRLHoldLocality : SetOfRelationship SetOfNode SetOfCapability SetOfRequirement
  pred allRLHoldLocality-sub : SetOfRelationship SetOfNode SetOfCapability SetOfRequirement SetOfRelationship
  eq allRLHoldLocality(SetRL,SetND,SetCP,SetRQ)
     = allRLHoldLocality-sub(SetRL,SetND,SetCP,SetRQ,SetRL) .
  eq allRLHoldLocality-sub(empRL,SetND,SetCP,SetRQ,SetRL)
     = true .
  eq allRLHoldLocality-sub((RL SetRL1),SetND,SetCP,SetRQ,SetRL)
     = if type(RL) = hostedOn then
       	  true
       else if isLocalRL(RL) then
       	  VMOfCP(cap(RL),SetND,SetCP,SetRQ,SetRL) = VMOfRQ(req(RL),SetND,SetCP,SetRQ,SetRL)
       else 
       	  (VMOfCP(cap(RL),SetND,SetCP,SetRQ,SetRL) = VMOfRQ(req(RL),SetND,SetCP,SetRQ,SetRL)) = false
       fi fi and allRLHoldLocality-sub(SetRL1,SetND,SetCP,SetRQ,SetRL) .

  pred allNDHaveAtMostOneHost : SetOfNode SetOfRequirement
  pred isAtMostOne : SetOfRequirement
  eq allNDHaveAtMostOneHost(empND,SetRQ)
     = true .
  eq allNDHaveAtMostOneHost((ND SetND),SetRQ)
     = isAtMostOne(getRQsOfTypeOfND(SetRQ,hostedOn,ND))
       and allNDHaveAtMostOneHost(SetND,SetRQ) .
  eq isAtMostOne(SetRQ)
     = (# SetRQ) = 0 or (# SetRQ) = 1 .

  pred ifOpenMsgThenCPInStates : PoolOfMsg SetOfCapability SetOfCPState
  eq ifOpenMsgThenCPInStates(empMsg,SetCP,StCP)
     = true .
  eq ifOpenMsgThenCPInStates((opMsg(IDCP) MP),SetCP,StCP)
     = state(getCapability(SetCP,IDCP)) in StCP and
       ifOpenMsgThenCPInStates(MP,SetCP,StCP) .
  eq ifOpenMsgThenCPInStates((avMsg(IDCP) MP),SetCP,StCP)
     = ifOpenMsgThenCPInStates(MP,SetCP,StCP) .

  pred ifAvailableMsgThenCPInStates : PoolOfMsg SetOfCapability SetOfCPState
  eq ifAvailableMsgThenCPInStates(empMsg,SetCP,StCP)
     = true .
  eq ifAvailableMsgThenCPInStates((opMsg(IDCP) MP),SetCP,StCP)
     = ifAvailableMsgThenCPInStates(MP,SetCP,StCP) .
  eq ifAvailableMsgThenCPInStates((avMsg(IDCP) MP),SetCP,StCP)
     = state(getCapability(SetCP,IDCP)) in StCP and
       ifAvailableMsgThenCPInStates(MP,SetCP,StCP) .

  -- pred ifCPInStatesThenRQInStates : 
  --      SetOfCapability SetOfCPState SetOfRequirement SetOfRQState SetOfRelationship
  -- eq ifCPInStatesThenRQInStates(empCP,StCP,SetRQ,StRQ,SetRL)
  --    = true .
  -- eq ifCPInStatesThenRQInStates((CP SetCP),StCP,SetRQ,StRQ,SetRL)
  --    = (state(CP) in StCP implies state(getRQOfCP(SetRQ,SetRL,CP)) in StRQ) and
  --      ifCPInStatesThenRQInStates(SetCP,StCP,SetRQ,StRQ,SetRL) .

  pred ifConnectsToCPInStatesThenRQInStatesOrOpenMsg : 
       SetOfCapability SetOfCPState SetOfRequirement SetOfRQState SetOfRelationship PoolOfMsg
  eq ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(empCP,StCP,SetRQ,StRQ,SetRL,MP)
     = true .
  eq ifConnectsToCPInStatesThenRQInStatesOrOpenMsg((CP SetCP),StCP,SetRQ,StRQ,SetRL,MP)
     = ((type(CP) = connectsTo and state(CP) in StCP) 
        implies (state(getRQOfCP(SetRQ,SetRL,CP)) in StRQ or opMsg(id(CP)) in MP)) and
       ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,StCP,SetRQ,StRQ,SetRL,MP) .

  pred ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg : 
       SetOfCapability SetOfCPState SetOfRequirement SetOfRQState SetOfRelationship PoolOfMsg
  eq ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(empCP,StCP,SetRQ,StRQ,SetRL,MP)
     = true .
  eq ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg((CP SetCP),StCP,SetRQ,StRQ,SetRL,MP)
     = ((type(CP) = connectsTo and state(CP) in StCP) 
        implies (state(getRQOfCP(SetRQ,SetRL,CP)) in StRQ or avMsg(id(CP)) in MP)) and
       ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(SetCP,StCP,SetRQ,StRQ,SetRL,MP) .

  pred allHostedOnCPInStates : SetOfCapability SetOfCPState
  eq allHostedOnCPInStates(SetCP,StCP) 
     = allCPOfTypeInStates(SetCP,hostedOn,StCP) .

  pred allHostedOnRQInStates : SetOfRequirement SetOfRQState
  eq allHostedOnRQInStates(SetRQ,StRQ) 
     = allRQOfTypeInStates(SetRQ,hostedOn,StRQ) .

  pred wfs-uniqND : State
  eq wfs-uniqND(< SetND,SetCP,SetRQ,SetRL,MP >) = uniqND(SetND) .
  pred wfs-uniqCP : State
  eq wfs-uniqCP(< SetND,SetCP,SetRQ,SetRL,MP >) = uniqCP(SetCP) and uniqCP(SetRL) .
  pred wfs-uniqRQ : State
  eq wfs-uniqRQ(< SetND,SetCP,SetRQ,SetRL,MP >) = uniqRQ(SetRQ) and uniqRQ(SetRL) .
  pred wfs-uniqRL : State
  eq wfs-uniqRL(< SetND,SetCP,SetRQ,SetRL,MP >) = uniqRL(SetRL) .
  pred wfs-allCPHaveND : State
  eq wfs-allCPHaveND(< SetND,SetCP,SetRQ,SetRL,MP >) = allCPHaveND(SetCP,SetND) .
  pred wfs-allRQHaveND : State
  eq wfs-allRQHaveND(< SetND,SetCP,SetRQ,SetRL,MP >) = allRQHaveND(SetRQ,SetND) .
  pred wfs-allRLHaveCP : State
  eq wfs-allRLHaveCP(< SetND,SetCP,SetRQ,SetRL,MP >) = allRLHaveCP(SetRL,SetCP) .
  pred wfs-allRLHaveRQ : State
  eq wfs-allRLHaveRQ(< SetND,SetCP,SetRQ,SetRL,MP >) = allRLHaveRQ(SetRL,SetRQ) .
  pred wfs-allCPHaveRL : State
  eq wfs-allCPHaveRL(< SetND,SetCP,SetRQ,SetRL,MP >) = allCPHaveRL(SetCP,SetRL) .
  pred wfs-allRQHaveRL : State
  eq wfs-allRQHaveRL(< SetND,SetCP,SetRQ,SetRL,MP >) = allRQHaveRL(SetRQ,SetRL) .
  pred wfs-allRLHaveSameTypeCPRQ : State
  eq wfs-allRLHaveSameTypeCPRQ(< SetND,SetCP,SetRQ,SetRL,MP >) = allRLHaveSameTypeCPRQ(SetRL,SetCP,SetRQ) .
  pred wfs-allRLNotInSameND : State
  eq wfs-allRLNotInSameND(< SetND,SetCP,SetRQ,SetRL,MP >) = allRLNotInSameND(SetRL,SetCP,SetRQ) .
  pred wfs-allRLHoldLocality : State
  eq wfs-allRLHoldLocality(< SetND,SetCP,SetRQ,SetRL,MP >) = allRLHoldLocality(SetRL,SetND,SetCP,SetRQ) .
  pred wfs-allNDHaveAtMostOneHost : State
  eq wfs-allNDHaveAtMostOneHost(< SetND,SetCP,SetRQ,SetRL,MP >) = allNDHaveAtMostOneHost(SetND,SetRQ) .
  
--> **************************************
--> Step 0-1: Define init(S) and final(S).
--> **************************************
  -- wfs is a conjunction of invariants which are intentionally imposed by the init condition.
  -- Since too long wfs causes a large evalutaion cost, define wfs minimally for each use case.
  eq [:nonexec]: wfs(S)
     = wfs-uniqND(S) and wfs-uniqCP(S) and wfs-uniqRQ(S) and wfs-uniqRL(S) and
       wfs-allCPHaveND(S) and wfs-allRQHaveND(S) and 
       wfs-allCPHaveRL(S) and wfs-allRQHaveRL(S) and 
       wfs-allRLHaveCP(S) and wfs-allRLHaveRQ(S) and 
       wfs-allRLHaveSameTypeCPRQ(S) and
       wfs-allRLNotInSameND(S) and
       wfs-allRLHoldLocality(S) and
       wfs-allNDHaveAtMostOneHost(S) .

  eq init(< SetND,SetCP,SetRQ,SetRL,MP >)
     = not (SetND = empND) and (MP = empMsg) and
       wfs(< SetND,SetCP,SetRQ,SetRL,MP >) and
       noNDCycle(< SetND,SetCP,SetRQ,SetRL,MP >) and
       allNDInStates(SetND,initial) and 
       allCPInStates(SetCP,closed) and 
       allRQInStates(SetRQ,unbound) .

  eq final(< SetND,SetCP,SetRQ,SetRL,MP >)
     = allNDInStates(SetND,started) .
-- It may define more strictly:
--     = (MP = empMsg) and
--       allNDInStates(SetND,started) and allCPInStates(SetCP,available) and allRQInStates(SetRQ,ready) .
}
module! STATERules {
  protecting(STATEfuns)

  var TND : NDType
  vars IDND IDND1 IDND2 : NDID 
  var IDCP : CPID
  var IDRQ : RQID
  var IDRL : RLID
  var SetND : SetOfNode
  var SetCP : SetOfCapability
  var SetRQ : SetOfRequirement
  var SetRL : SetOfRelationship
  var SCP : CPState
  var MP : PoolOfMsg

  -- CREATE Operation for Node Type
  ctrans [R01]:
     < (node(TND,IDND,initial) SetND), SetCP, SetRQ, SetRL, MP >
  => < (node(TND,IDND,created) SetND), SetCP, SetRQ, SetRL, MP > 
     if allRQOfTypeOfNDInStates(SetRQ,hostedOn,IDND,ready) .

  -- START Operation for Node Type
  ctrans [R02]:
     < (node(TND,IDND,created) SetND), SetCP, SetRQ, SetRL, MP >
  => < (node(TND,IDND,started) SetND), SetCP, SetRQ, SetRL, MP > 
     if allRQOfNDInStates(SetRQ,IDND,ready) .

  -- CAPAVAILABLE Operation for HostedOn Relationship Type
  ctrans [R03]:
     < SetND, (cap(hostedOn,IDCP,closed,   IDND) SetCP), SetRQ, SetRL, MP >
  => < SetND, (cap(hostedOn,IDCP,available,IDND) SetCP), SetRQ, SetRL, MP >
     if isCreated(state(getNode(SetND,IDND))) .

  -- REQREADY Operation for HostedOn Relationship Type
  trans [R04]:
     < SetND, (cap(hostedOn,IDCP,available,IDND1) SetCP), 
  	      (req(hostedOn,IDRQ,unbound,IDND2) SetRQ), (rel(hostedOn,IDRL,IDCP,IDRQ) SetRL), MP >
  => < SetND, (cap(hostedOn,IDCP,available,IDND1) SetCP), 
  	      (req(hostedOn,IDRQ,ready,  IDND2) SetRQ), (rel(hostedOn,IDRL,IDCP,IDRQ) SetRL), MP > .

  -- CAPOPEN Operation for DependsOn Relationship Type
  ctrans [R05]:
     < SetND, (cap(dependsOn,IDCP,closed,IDND) SetCP), SetRQ, SetRL, MP >
  => < SetND, (cap(dependsOn,IDCP,open,  IDND) SetCP), SetRQ, SetRL, MP >
     if isCreated(state(getNode(SetND,IDND))) .

  -- CAPAVAILABLE Operation for DependsOn Relationship Type
  ctrans [R06]:
     < SetND, (cap(dependsOn,IDCP,open,     IDND) SetCP), SetRQ, SetRL, MP >
  => < SetND, (cap(dependsOn,IDCP,available,IDND) SetCP), SetRQ, SetRL, MP >
     if state(getNode(SetND,IDND)) = started .

  -- REQWAITING Operation for DependsOn Relationship Type
  ctrans [R07]:
     < SetND, (cap(dependsOn,IDCP,SCP,IDND1) SetCP), 
   	      (req(dependsOn,IDRQ,unbound,IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP >
  => < SetND, (cap(dependsOn,IDCP,SCP,IDND1) SetCP), 
  	      (req(dependsOn,IDRQ,waiting,IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP >
     if state(getNode(SetND,IDND2)) = created and isActivated(SCP) .

  -- REQREADY Operation for DependsOn Relationship Type
  trans [R08]:
     < SetND, (cap(dependsOn,IDCP,available,IDND1) SetCP), 
  	      (req(dependsOn,IDRQ,waiting,IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP >
  => < SetND, (cap(dependsOn,IDCP,available,IDND1) SetCP), 
  	      (req(dependsOn,IDRQ,ready,  IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP > .

  -- CAPOPEN Operation for ConnectsTo Relationship Type
  ctrans [R09]:
     < SetND, (cap(connectsTo,IDCP,closed,IDND) SetCP), SetRQ, SetRL, MP >
  => < SetND, (cap(connectsTo,IDCP,open,  IDND) SetCP), SetRQ, SetRL, (opMsg(IDCP) MP) >
     if isCreated(state(getNode(SetND,IDND))) .

  -- CAPAVAILABLE Operation for ConnectsTo Relationship Type
  ctrans [R10]:
     < SetND, (cap(connectsTo,IDCP,open,     IDND) SetCP), SetRQ, SetRL, MP >
  => < SetND, (cap(connectsTo,IDCP,available,IDND) SetCP), SetRQ, SetRL, (avMsg(IDCP) MP) >
     if state(getNode(SetND,IDND)) = started .

  -- REQWAITING Operation for ConnectsTo Relationship Type
  ctrans [R11]:
     < SetND, SetCP, 
       (req(connectsTo,IDRQ,unbound,IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), 
       (opMsg(IDCP) MP) >
  => < SetND, SetCP, 
       (req(connectsTo,IDRQ,waiting,IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), MP >
     if state(getNode(SetND,IDND)) = created .

  -- REQREADY Operation for ConnectsTo Relationship Type
  trans [R12]:
     < SetND, SetCP, 
       (req(connectsTo,IDRQ,waiting,IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), 
       (avMsg(IDCP) MP) >
  => < SetND, SetCP, 
       (req(connectsTo,IDRQ,ready,  IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), MP > .
}
