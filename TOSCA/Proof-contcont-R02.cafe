require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ***************************************************************
-->  ctrans [R02]:
-->     < (node(TND,IDND,created) SetND), SetCP, SetRQ, SetRL, MP >
-->  => < (node(TND,IDND,started) SetND), SetCP, SetRQ, SetRL, MP > 
-->     if allRQOfNDInStates(SetRQ,IDND,ready) .
--> ***************************************************************
select ProofContCont .
-- When R02 can be applied to the state S:
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (node(tnd,idND,created) sND), sCP, sRQ, sRL, mp >) = true .
}
--> ******************************************************
--> Step 2-2: Split the current case for a rule into cases
--> where the condition of the rule does or does not hold.
--> ******************************************************
-- The condition of R02 does or does not hold for the node of idND.
:def ctf2-2 = :ctf {
  eq allRQOfNDInStates(sRQ,idND,ready) = true .
}
:apply (ctf2-2 rd-)
-- When the condition of R02 holds for the node of idND:
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
-- All of the other nodes are or are not started.
:def csp2-3 = :csp {
  eq allNDInStates(sND,started) = true .
  eq sND = (node(tnd',idND',initial) sND') .
  eq sND = (node(tnd',idND',created) sND') .
}
:apply (csp2-3 rd-)
show proof
select
