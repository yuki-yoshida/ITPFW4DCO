require ProofContCont Proof-contcont.cafe

--> *********************************************************************************
--> (2) inv(S) and wfs(S) and cont(S) and not final(S) implies cont(SS) or final(SS).
--> *********************************************************************************

--> ****************************************************************************
-->  ctrans [R02]:
-->     < (node(TND,IDND,created) SetND), SetCP, SetRQ, SetRL, MP >
-->  => < (node(TND,IDND,started) SetND), SetCP, SetRQ, SetRL, MP > 
-->     if allRQOfNDInStates(SetRQ,IDND,ready) .
--> ****************************************************************************
select ProofContCont .
-- When R02 can be applied to the state S:
--> **************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rules.
--> **************************************************************************
:goal {
  eq contcont(< (node(tnd,idND,created) sND), sCP, sRQ, sRL, mp >) = true .
}
--> ***********************************************************
--> Step 2-2: Split the most general case for a rule into cases
-->  where the condition of the rule does or does not hold.
--> ***********************************************************
-- The condition of R02 does or does not hold for the node of idND.
:ctf {
  eq allRQOfNDInStates(sRQ,idND,ready) = true .
}
-- Case 1: When the condition of R02 holds for the node of idND:
--> ***************************************************************
--> Step 2-3: Split the rule applied case into cases
-->  where predicate final does or does not hold in the next state.
--> ***************************************************************
-- All of the other nodes are or are not started.
:csp {
  eq allNDInStates(sND,started) = true .
  eq sND = (node(tnd',idND',initial) sND') .
  eq sND = (node(tnd',idND',created) sND') .
}
-- Case 1-1: When all of the other nodes are started:
:apply (rd) -- 1-1
-- Case 1-2: When there is an initial node:
:apply (rd) -- 1-2
-- Case 1-3: When there is a created node:
--> ***************************************************************
--> Step 2-4: Think which rule can be applied to the next state
-->  and repeat case splitting similarly as Step 1-3, 1-4, and 1-5.
--> ***************************************************************
-- The next rule should be R02 for the node of idND'.
--> ****************************************************
--> Step 1-4: Split the first rule case into cases where
-->  the condition of the rule does or does not hold.
--> ****************************************************
-- The condition of R02 does or does not hold for the node of idND'.
:ctf {
  eq allRQOfNDInStates(sRQ,idND',ready) = true .
}
-- Case 1-3-1: When R02 can be applied to the node of idND':
:apply (rd-) -- 1-3-1
-- Case 1-3-2: When R02 can not be applied to the node of idND':
:apply (rd-) -- 1-3-2
eof
-- Case 1-2-2-2-2-2-1-2-2: When the node of idND' is started:
:apply (rd-) -- 1-2-2-2-2-2-1-2-2
-- Case 1-2-2-2-2-2-1-2-3: When the node of idND' is initial:
--> ***************************************************************
--> Step 2-4: Think which rule can be applied to the next state
-->  and repeat case splitting similarly as Step 1-3, 1-4, and 1-5.
--> ***************************************************************
-- The next rule should be R01 for the node of idND'.
--> ****************************************************
--> Step 1-4: Split the first rule case into cases where
-->  the condition of the rule does or does not hold.
--> ****************************************************
-- The condition of R01 does or does not hold for the node of idND'.
:ctf {
  eq allRQOfTypeOfNDInStates(sRQ,hostedOn,idND',ready) = true .
}
-- Case 1-2-2-2-2-2-1-2-3-1: When R01 can be applied to the node of idND':
:apply (rd-) -- 1-2-2-2-2-2-1-2-3-1
-- Case 1-2-2-2-2-2-1-2-3-2: When R01 can not be applied to the node of idND':
:apply (rd-) -- 1-2-2-2-2-2-1-2-3-2
-- Case 1-2-2-2-2-2-2: When the capability of idCP is open:
--> ***************************************************************
--> Step 2-4: Think which rule can be applied to the next state
-->  and repeat case splitting similarly as Step 1-3, 1-4, and 1-5.
--> ***************************************************************
-- The next rule should be R06 for the capability of idCP.
--> ****************************************************
--> Step 1-4: Split the first rule case into cases where
-->  the condition of the rule does or does not hold.
--> ****************************************************
-- The condition of R06 does or does not hold for the capability of idCP.
:ctf {
 eq state(getNode(sND, idND')) = started .
}
-- Case 1-2-2-2-2-2-2-1: When the node of idND' is started:
:apply (rd-) -- 1-2-2-2-2-2-2-1
-- Case 1-2-2-2-2-2-2-2: When the node of idND' is not started:
:apply (rd-) -- 1-2-2-2-2-2-2-2
-- Case 1-2-2-2-2-2-3: When the capability of idCP is available:
:apply (rd-) -- 1-2-2-2-2-2-3
:apply (rd-) -- 1-2-2-2

-- Case 1-2-2: When the type of the requirement of idRQ is dependsOn:
-- Because sRQ is redefined, allRQOfTypeOfNDInStates(sRQ,hostedOn,idND,ready) should be claimed again.
:set(normalize-init,on)
:init ( ceq B1:Bool = true if not B2:Bool . ) by {
  B1:Bool <- allRQOfTypeOfNDInStates(sRQ,hostedOn,idND,ready) ;
  B2:Bool <- allRQOfTypeOfNDInStates(sRQ,hostedOn,idND,ready) == true ;
}
:set(normalize-init,off)
--> ***********************************************************
--> Step 1-5: When there is a dangling link, split the case
-->  into cases where the linked object does or does not exist.
--> ***********************************************************
-- The relationship of the requirement does or does not exist.
:csp {
  eq onlyOneRLOfRQ(sRL,idRQ) = false .
  eq sRL = (rel(dependsOn,idRL,idCP,idRQ) sRL') .
}
-- Case 1-2-2-1: When the relationship of the requirement of idRQ does not exist:
:apply (rd-) -- 1-2-2-1
-- Case 1-2-2-2: When the dependsOn relationship of the requirement of idRQ exists:
--> ***********************************************************
--> Step 1-5: When there is a dangling link, split the case
-->  into cases where the linked object does or does not exist.
--> ***********************************************************
-- Case 1-2-3: When the type of the requirement of idRQ is connectsTo:
-- Because sRQ is redefined, allRQOfTypeOfNDInStates(sRQ,hostedOn,idND,ready) should be claimed again.
:set(normalize-init,on)
:init ( ceq B1:Bool = true if not B2:Bool . ) by {
  B1:Bool <- allRQOfTypeOfNDInStates(sRQ,hostedOn,idND,ready) ;
  B2:Bool <- allRQOfTypeOfNDInStates(sRQ,hostedOn,idND,ready) == true ;
}
:set(normalize-init,off)
--> ***********************************************************
--> Step 1-5: When there is a dangling link, split the case
-->  into cases where the linked object does or does not exist.
--> ***********************************************************
-- The relationship of the requirement of idRQ does or does not exist.
:csp {
  eq onlyOneRLOfRQ(sRL,idRQ) = false .
  eq sRL = (rel(connectsTo,idRL,idCP,idRQ) sRL') .
}
-- Case 1-2-3-1: When the relationship of the requirement of idRQ does not exist:
:apply (rd-) -- 1-2-3-1
-- Case 1-2-3-2: When the connectsTo relationship of the requirement of idRQ exists:
--> ***********************************************************
--> Step 1-5: When there is a dangling link, split the case
-->  into cases where the linked object does or does not exist.
--> ***********************************************************
-- The capability of the relationship does or does not exist.
:csp {
  eq existCP(sCP,idCP) = false .
  eq sCP = (cap(connectsTo,idCP,scp,idND') sCP') .
}
-- Case 1-2-3-2-1: When the capability of the relationship does not exist:
:apply (rd-) -- 1-2-3-2-1
-- Case 1-2-3-2-2: When the connectsTo capability of the relationship exists:
-- The node of the capability of idCP is or is not the same as the node of the requiement.
:ctf {
  eq idND' = idND .
}
-- Case 1-2-3-2-2-1: When the node of the capability of idCP is the same as the node of the requiement of idRQ:
:apply (rd-) -- 1-2-3-2-2-1
-- Case 1-2-3-2-2-2: When the node of the capability of idCP is not the same as the node of the requiement of idRQ:
-- The state of the capability of idCP is closed, open, or available.
:csp {
  eq scp = closed .
  eq scp = open .
  eq scp = available .
}
-- Case 1-2-3-2-2-2-1: When the capability of idCP is closed:
--> ***********************************************************
--> Step 1-5: When there is a dangling link, split the case
-->  into cases where the linked object does or does not exist.
--> ***********************************************************
-- The node of the capability of idCP does or does not exist.
:csp {
  eq existND(sND,idND') = false .
  eq sND = (node(tnd',idND',snd) sND') .
}
-- Case 1-2-3-2-2-2-1-1: When the node of the capability of idCP does not exist:
:apply (rd-) -- 1-2-3-2-2-2-1-1
-- Case 1-2-3-2-2-2-1-2: When the node of the capability of idCP exists:
-- The state of the node of idND' is created, started, or initial.
:csp {
  eq snd = initial .
  eq snd = created .
  eq snd = started .
}
-- Case 1-2-3-2-2-2-1-2-1: When the node of idND' is initial:
--> ***************************************************************
--> Step 2-4: Think which rule can be applied to the next state
-->  and repeat case splitting similarly as Step 1-3, 1-4, and 1-5.
--> ***************************************************************
-- The next rule should be R01 for the node of idND'.
--> ****************************************************
--> Step 1-4: Split the first rule case into cases where
-->  the condition of the rule does or does not hold.
--> ****************************************************
-- The condition of R01 does or does not hold for the node of idND'.
:ctf {
  eq allRQOfTypeOfNDInStates(sRQ,hostedOn,idND',ready) = true .
}
-- Case 1-2-3-2-2-2-1-2-1-1: When R01 can be applied to the node of idND':
:apply (rd-) -- 1-2-3-2-2-2-1-2-1-1
-- Case 1-2-3-2-2-2-1-2-1-2: When R01 can not be applied to the node of idND':
:apply (rd-) -- 1-2-3-2-2-2-1-2-1-2
-- Case 1-2-3-2-2-2-1-2-2: When the node of idND' is created:
--> ***************************************************************
--> Step 2-4: Think which rule can be applied to the next state
-->  and repeat case splitting similarly as Step 1-3, 1-4, and 1-5.
--> ***************************************************************
-- The next rule should be R02 for the node of idND'.
--> ****************************************************
--> Step 1-4: Split the first rule case into cases where
-->  the condition of the rule does or does not hold.
--> ****************************************************
-- The condition of R02 does or does not hold for the node of idND'.
:ctf {
  eq allRQOfNDInStates(sRQ,idND',ready) = true .
}
-- Case 1-2-3-2-2-2-1-2-2-1: When R02 can be applied to the node of idND':
:apply (rd-) -- 1-2-3-2-2-2-1-2-2-1
-- Case 1-2-3-2-2-2-1-2-2-2: When R02 can not be applied to the node of idND':
:apply (rd-) -- 1-2-3-2-2-2-1-2-2-2
-- Case 1-2-3-2-2-2-1-2-3: When the node of idND' is started:
:apply (rd-) -- 1-2-3-2-2-2-1-2-3
-- Case 1-2-3-2-2-2-2: When the capability of idCP is open:
--> ***************************************************************
--> Step 2-4: Think which rule can be applied to the next state
-->  and repeat case splitting similarly as Step 1-3, 1-4, and 1-5.
--> ***************************************************************
-- The next rule should be R06 for the capability of idCP.
--> ****************************************************
--> Step 1-4: Split the first rule case into cases where
-->  the condition of the rule does or does not hold.
--> ****************************************************
-- The condition of R06 does or does not hold for the capability of idCP.
:ctf {
 eq state(getNode(sND, idND')) = started .
}
-- Case 1-2-3-2-2-2-2-1: When the the node of idND' is started:
:apply (rd-) -- 1-2-3-2-2-2-2-1
-- Case 1-2-3-2-2-2-2-2: When the the node of idND' is not started:
--> ***************************************************************
--> Step 2-4: Think which rule can be applied to the next state
-->  and repeat case splitting similarly as Step 1-3, 1-4, and 1-5.
--> ***************************************************************
-- The next rule should be R11 for the requirement of idRQ.
--> ********************************************************************
--> Step 1-3: Split the general case into cases which collectively cover
-->  the general case and one of which matches to LHS of the first rule.
--> ********************************************************************
-- LHS of R11 requires an open message of idCP.
-- The message pool does or does not have the open message of idCP.
:csp {
  eq (opMsg(idCP) \in mp) = false .
  eq mp = (opMsg(idCP) mp') .
}
-- Case 1-2-3-2-2-2-2-2-1: When the message pool does not have the open message of idCP:
:apply (rd-) -- 1-2-3-2-2-2-2-2-1
-- Case 1-2-3-2-2-2-2-2-2: When the message pool has the open message of idCP:
:apply (rd-) -- 1-2-3-2-2-2-2-2-2
-- Case 1-2-3-2-2-2-3: When the capability of idCP is available:
--> ********************************************************************
--> Step 1-3: Split the general case into cases which collectively cover
-->  the general case and one of which matches to LHS of the first rule.
--> ********************************************************************
-- LHS of R11 requires an open message of idCP.
-- The message pool does or does not have the open message of idCP.
:csp {
  eq (opMsg(idCP) \in mp) = false .
  eq mp = (opMsg(idCP) mp') .
}
-- Case 1-2-3-2-2-2-2-3-1: When the message pool does not have the open message of idCP:
:apply (rd-) -- 1-2-3-2-2-2-3-1
-- Case 1-2-3-2-2-2-2-3-2: When the message pool has the open message of idCP:
:apply (rd-) -- 1-2-3-2-2-2-3-2
-- Case 1-3: When there is a waiting requirement of the node of idND:
-- The type of the requirement is hostedOn, dependsOn, or connectsTo.
:csp {
  eq trl = hostedOn .
  eq trl = dependsOn .
  eq trl = connectsTo .
}
-- Case 1-3-1: When the type of the requirement of idRQ is hostedOn:
:apply (rd-) -- 1-3-1
-- Case 1-3-2: When the type of the requirement of idRQ is dependsOn:
:apply (rd-) -- 1-3-2
-- Case 1-3-2: When the type of the requirement of idRQ is connectsTo:
:apply (rd-) -- 1-3-3

-- Case 2: When the condition of R02 does not hold for the node of idND:
:apply (rd-) -- 2
show proof

select
