require Proof Proof.cafe

--> Common lemmas in this domain.

module! TOSCALEMMA {
  pr(PROOFfuns)

  pred (_when _) : Bool Bool { prec: 63 r-assoc }
  eq (B1:Bool when B2:Bool)
     = B2 implies B1 .

  vars IDCP IDCP1 IDCP2 : CPID
  var IDND : NDID
  var IDRL : RLID
  var IDRQ : RQID
  var IDRQ' : RQID
  var MP : PoolOfMsg
  vars SRQ1 SRQ2 : RQState
  vars SCP1 SCP2 : CPState
  var STCP : SetOfCPState
  var STRQ : SetOfRQState
  var SetCP : SetOfCapability
  var SetND : SetOfNode
  var SetRL : SetOfRelationship
  var SetRQ : SetOfRequirement
  var TRL : RLType

  -- For any well-formed state, when a requiremnt IDRQ corresponds to a capability IDCP1,
  -- then another capability IDCP2 does not correspond to IDRQ
  -- because relationships between capabilities and requirements are one-to-one.
  pred tosca-lemma01 : RQID CPID CPID SetOfCapability SetOfRequirement SetOfRelationship
  eq tosca-lemma01(IDRQ, IDCP1, IDCP2, SetCP,SetRQ,SetRL)
     = (IDRQ = req(getRLOfCP(SetRL,IDCP1))) = false
     when IDRQ = req(getRLOfCP(SetRL,IDCP2)) and
          not (IDCP1 = IDCP2) and allRLHaveRQ(SetRL,SetRQ) and
          onlyOneRLOfCP(SetRL,IDCP1) and onlyOneRLOfCP(SetRL,IDCP2) .

  ceq [lemma01 :nonexec]:
     (IDRQ = req(RL:Relationship)) = false
     if RL = getRLOfCP(SetRL,IDCP1) and
        IDRQ = req(getRLOfCP(SetRL,IDCP2)) and
        not (IDCP1 = IDCP2) and allRLHaveRQ(SetRL,SetRQ) and
        onlyOneRLOfCP(SetRL,IDCP1) and onlyOneRLOfCP(SetRL,IDCP2) .

  -- ifConnectsToCPInStatesThenRQInStatesOrOpenMsg keeps to hold
  -- after changing the state of a requirement 
  -- whose corresponding capability is not included in the set of capabilities.
  pred tosca-lemma02 : RQState RQState NDID CPID RQID RLID RLType 
                 SetOfCPState SetOfRQState
                 SetOfCapability SetOfRequirement SetOfRelationship PoolOfMsg 
  eq tosca-lemma02(SRQ1,SRQ2,IDND,IDCP,IDRQ,IDRL,TRL,STCP,STRQ,SetCP,SetRQ,SetRL,MP)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,STCP,(req(TRL,IDRQ,SRQ1,IDND) SetRQ),STRQ,
					                        (rel(TRL,IDRL,IDCP,IDRQ) SetRL),MP) implies
       ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,STCP,(req(TRL,IDRQ,SRQ2,IDND) SetRQ),STRQ,
						                (rel(TRL,IDRL,IDCP,IDRQ) SetRL),MP)
     when not existCP(SetCP,IDCP) and uniqCP(SetCP) and
          allCPHaveRL(SetCP,(rel(TRL,IDRL,IDCP,IDRQ) SetRL)) and
          allRLHaveRQ(SetRL,SetRQ) .

  ceq [lemma02 :nonexec]:
     (ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,STCP,(req(TRL,IDRQ,SRQ1,IDND) SetRQ),STRQ,
  					                       (rel(TRL,IDRL,IDCP,IDRQ) SetRL),MP) and
      ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,STCP,(req(TRL,IDRQ,SRQ2,IDND) SetRQ),STRQ,
  						                (rel(TRL,IDRL,IDCP,IDRQ) SetRL),MP))
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,STCP,(req(TRL,IDRQ,SRQ1,IDND) SetRQ),STRQ,
  					                        (rel(TRL,IDRL,IDCP,IDRQ) SetRL),MP)
     if not existCP(SetCP,IDCP) and uniqCP(SetCP)
        and allCPHaveRL(SetCP,(rel(TRL,IDRL,IDCP,IDRQ) SetRL))
        and allRLHaveRQ(SetRL,SetRQ) .
    
  -- ifAvailableMsgThenCPInStates keeps to hold
  -- after changing the state of a capability to the target state. 
  pred tosca-lemma03 : PoolOfMsg SetOfCapability CPID NDID RLType CPState CPState SetOfCPState
  eq tosca-lemma03(MP,SetCP,IDCP,IDND,TRL,SCP1,SCP2,STCP)
     = ifAvailableMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP1,IDND) SetCP),STCP) implies
       ifAvailableMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP2,IDND) SetCP),STCP)
     when (SCP2 \in STCP) .

  -- ifAvailableMsgThenCPInStates keeps to hold
  -- after changing the state of a capability whose current state is not the target state. 
  pred tosca-lemma04 : PoolOfMsg SetOfCapability CPID NDID RLType CPState CPState SetOfCPState
  eq tosca-lemma04(MP,SetCP,IDCP,IDND,TRL,SCP1,SCP2,STCP)
     = ifAvailableMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP1,IDND) SetCP),STCP) implies
       ifAvailableMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP2,IDND) SetCP),STCP)
     when not (SCP1 \in STCP) .

  -- ifConnectsToCPInStatesThenRQInStatesOrOpenMsg keeps to hold
  -- after adding an open message.
  pred tosca-lemma05 : SetOfCapability SetOfCPState SetOfRequirement SetOfRQState 
                         SetOfRelationship PoolOfMsg CPID
  eq tosca-lemma05(SetCP,STCP,SetRQ,STRQ,SetRL,MP,IDCP)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,STCP,SetRQ,STRQ,SetRL,MP) 
       implies ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,STCP,SetRQ,STRQ,SetRL,(opMsg(IDCP) MP)) .

  -- ifConnectsToCPInStatesThenRQInStatesOrOpenMsg keeps to hold
  -- after adding an available message.
  pred tosca-lemma06 : SetOfCapability SetOfCPState SetOfRequirement SetOfRQState 
                         SetOfRelationship PoolOfMsg CPID
  eq tosca-lemma06(SetCP,STCP,SetRQ,STRQ,SetRL,MP,IDCP)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,STCP,SetRQ,STRQ,SetRL,MP) 
       implies ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,STCP,SetRQ,STRQ,SetRL,(avMsg(IDCP) MP)) .

  -- ifConnectsToCPInStatesThenRQInStatesOrOpenMsg keeps to hold
  -- after changing the state of a requirement to the target state.
  pred tosca-lemma07 : SetOfCapability SetOfCPState SetOfRequirement RQState RQState 
       		       	 SetOfRQState SetOfRelationship PoolOfMsg RQID NDID RLID CPID
  eq tosca-lemma07(SetCP,STCP,SetRQ,SRQ1,SRQ2,STRQ,SetRL,MP,IDRQ,IDND,IDRL,IDCP)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,STCP,(req(connectsTo,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),(opMsg(IDCP) MP)) implies
       ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,STCP,(req(connectsTo,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),MP) 
     when SRQ2 \in STRQ .

  -- ifConnectsToCPInStatesThenRQInStatesOrOpenMsg keeps to hold
  -- after changing the state of a requirement whose type is not connectsTo.
  pred tosca-lemma08 : SetOfCapability RLType SetOfCPState SetOfRequirement RQState RQState 
       		       	 SetOfRQState SetOfRelationship PoolOfMsg RQID NDID RLID CPID
  eq tosca-lemma08(SetCP,TRL,STCP,SetRQ,SRQ1,SRQ2,STRQ,SetRL,MP,IDRQ,IDND,IDRL,IDCP)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,STCP,(req(TRL,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(TRL,IDRL,IDCP,IDRQ) SetRL),MP) implies
       ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,STCP,(req(TRL,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(TRL,IDRL,IDCP,IDRQ) SetRL),MP)
     when not (TRL = connectsTo) and 
          uniqCP(SetCP) and
          allCPHaveRL(SetCP,(rel(TRL,IDRL,IDCP,IDRQ) SetRL)) and
          allRLHaveRQ(SetRL,SetRQ) and
          allRLHaveSameTypeCPRQ((rel(TRL,IDRL,IDCP,IDRQ) SetRL),SetCP,(req(TRL,IDRQ,SRQ2,IDND) SetRQ)) .

  -- ifConnectsToCPInStatesThenRQInStatesOrOpenMsg keeps to hold
  -- after deleting an available message and changing the state of a requirement
  -- whose corresponding capability is not included in the set of capabilities.
  pred tosca-lemma09 : SetOfCapability SetOfCPState SetOfRequirement RQState RQState
       		       	 SetOfRQState SetOfRelationship PoolOfMsg RQID NDID RLID CPID
  eq tosca-lemma09(SetCP,STCP,SetRQ,SRQ1,SRQ2,STRQ,SetRL,MP,IDRQ,IDND,IDRL,IDCP)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,STCP,(req(connectsTo,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),(avMsg(IDCP) MP)) implies
       ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,STCP,(req(connectsTo,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),MP) 
     when not existCP(SetCP,IDCP) and 
          allCPHaveRL(SetCP,(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL)) and
          allRLHaveRQ((rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), (req(connectsTo,IDRQ,SRQ2,IDND) SetRQ)) .

  pred tosca-lemma10 : SetOfCapability SetOfCPState SetOfRequirement RQState RQState
       		       	 SetOfRQState SetOfRelationship RQID NDID RLID CPID
  eq tosca-lemma10(SetCP,STCP,SetRQ,SRQ1,SRQ2,STRQ,SetRL,IDRQ,IDND,IDRL,IDCP)
     = not existCP(SetCP,IDCP) and 
       ifCPInStatesThenRQInStates(
		SetCP,STCP,(req(trl,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) implies
       ifCPInStatesThenRQInStates(
		SetCP,STCP,(req(trl,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) .

  pred tosca-lemma11 : SetOfCapability SetOfCPState SetOfRequirement RQState RQState
       		       	 SetOfRQState SetOfRelationship RQID NDID RLID CPID
  eq tosca-lemma11(SetCP,STCP,SetRQ,SRQ1,SRQ2,STRQ,SetRL,IDRQ,IDND,IDRL,IDCP)
     = not (SRQ1 \in STRQ) and
       ifCPInStatesThenRQInStates(
		SetCP,STCP,(req(trl,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) implies
       ifCPInStatesThenRQInStates(
		SetCP,STCP,(req(trl,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) .

  pred tosca-lemma12 : SetOfCapability SetOfCPState SetOfRequirement RQState RQState
       		       	 SetOfRQState SetOfRelationship RQID NDID RLID CPID
  eq tosca-lemma12(SetCP,STCP,SetRQ,SRQ1,SRQ2,STRQ,SetRL,IDRQ,IDND,IDRL,IDCP)
     = (SRQ2 \in STRQ) and
       ifCPInStatesThenRQInStates(
		SetCP,STCP,(req(trl,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) implies
       ifCPInStatesThenRQInStates(
		SetCP,STCP,(req(trl,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) .

  pred tosca-lemma13 : PoolOfMsg SetOfCapability CPID NDID RLType CPState CPState SetOfCPState
  eq tosca-lemma13(MP,SetCP,IDCP,IDND,TRL,SCP1,SCP2,STCP)
     = (SCP2 \in STCP) and
       ifOpenMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP1,IDND) SetCP),STCP) implies
       ifOpenMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP2,IDND) SetCP),STCP) .

  pred tosca-lemma14 : PoolOfMsg SetOfCapability CPID NDID RLType CPState CPState SetOfCPState
  eq tosca-lemma14(MP,SetCP,IDCP,IDND,TRL,SCP1,SCP2,STCP)
     = not (SCP1 \in STCP) and
       ifOpenMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP1,IDND) SetCP),STCP) implies
       ifOpenMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP2,IDND) SetCP),STCP) .

  pred tosca-lemma15 : SetOfCapability SetOfCPState 
                         SetOfRequirement SetOfRQState SetOfRelationship PoolOfMsg CPID
  eq tosca-lemma15(SetCP,STCP,SetRQ,STRQ,SetRL,MP,IDCP)
     = ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(SetCP,STCP,SetRQ,STRQ,SetRL,MP) 
       implies ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(SetCP,STCP,SetRQ,STRQ,SetRL,(opMsg(IDCP) MP)) .

  pred tosca-lemma16 : SetOfCapability SetOfCPState
                         SetOfRequirement SetOfRQState SetOfRelationship PoolOfMsg CPID
  eq tosca-lemma16(SetCP,STCP,SetRQ,STRQ,SetRL,MP,IDCP)
     = ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(SetCP,STCP,SetRQ,STRQ,SetRL,MP) 
       implies ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(SetCP,STCP,SetRQ,STRQ,SetRL,(avMsg(IDCP) MP)) .

  pred tosca-lemma17 : SetOfCapability SetOfCPState SetOfRequirement RQState RQState 
       		       	 SetOfRQState SetOfRelationship PoolOfMsg RQID NDID RLID CPID
  eq tosca-lemma17(SetCP,STCP,SetRQ,SRQ1,SRQ2,STRQ,SetRL,MP,IDRQ,IDND,IDRL,IDCP)
     = (SRQ2 \in STRQ) and
       ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(
		SetCP,STCP,(req(connectsTo,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),(opMsg(IDCP) MP)) implies
       ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(
		SetCP,STCP,(req(connectsTo,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),MP) .

  pred tosca-lemma18 : SetOfCapability SetOfCPState SetOfRequirement RQState RQState 
       		       	 SetOfRQState SetOfRelationship PoolOfMsg RQID NDID RLID CPID
  eq tosca-lemma18(SetCP,STCP,SetRQ,SRQ1,SRQ2,STRQ,SetRL,MP,IDRQ,IDND,IDRL,IDCP)
     = (trl = connectsTo) = false and allCPHaveRL(SetCP,(rel(trl,IDRL,IDCP,IDRQ) SetRL)) and
       ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(
		SetCP,STCP,(req(trl,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL),MP) implies
       ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(
		SetCP,STCP,(req(trl,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL),MP) .

}

--> Proof of tosca-lemma01.
select TOSCALEMMA
:goal { eq tosca-lemma01(idRQ,idCP,idCP',sCP,sRQ,sRL) = true .}
:csp { 
  eq onlyOneRLOfCP(sRL,idCP) = false .
  eq sRL = (rel(trl,idRL,idCP,idRQ) sRL') .
}
:apply (rd)
:csp { 
  eq onlyOneRLOfCP(sRL',idCP') = false .
  eq sRL' = (rel(trl',idRL',idCP',idRQ') sRL'') .
}
:apply (rd)
:ctf {
  eq idRQ' = idRQ .
}
:apply (rd)
:apply (rd)
show proof

--> Proof of tosca-lemma02.
select TOSCALEMMA
:goal {
  eq [goal-1]: tosca-lemma02(srq,srq',idND,idCP,idRQ,idRL,trl,stCP,stRQ,empCP,sRQ,sRL,mp) = true . 
  eq [goal-2]: (tosca-lemma02(srq,srq',idND,idCP,idRQ,idRL,trl,stCP,stRQ,sCP,sRQ,sRL,mp) implies
		tosca-lemma02(srq,srq',idND,idCP,idRQ,idRL,trl,stCP,stRQ,(cap(trl',idCP',scp,idND') sCP),
			                                               sRQ,sRL,mp)) = true .
}
:ctf { 
  eq existCP(sCP,idCP) = true .
}
:apply (rd) -- 1
:ctf { 
  eq uniqCP(sCP) = true .
}
:ctf { 
  eq allCPHaveRL(sCP,(rel(trl,idRL,idCP,idRQ) sRL)) = true .
}
:ctf { 
  eq allRLHaveRQ(sRL,sRQ) = true .
}
:ctf { 
  eq idCP' = idCP .
}
:apply (rd) -- 2-1-1-1-1
:ctf { 
  eq trl' = connectsTo .
}
:ctf { 
  eq (scp \in stCP) = true .
}
:csp { 
  eq onlyOneRLOfCP(sRL,idCP') = false .
  eq sRL = (rel(trl',idRL',idCP',idRQ') sRL') .
}
:apply (rd) -- 2-1-1-1-2-1-1-1
:csp {
  eq existRQ(sRQ,idRQ') = false .
  eq sRQ = (req(trl',idRQ',srq'',idND1) sRQ') .
}
:apply (rd) -- 2-1-1-1-2-1-1-2-1
:ctf {
  eq (srq'' \in stRQ) = true .
}
:apply (rd) -- 2-1-1-1-2-1-1-2-2-1
:apply (rd) -- 2-1-1-1-2-1-1-2-2-2
:ctf {
  eq existCP(sCP,idCP') = true .
}
:apply (rd) -- 2-1-1-1-2-1-2-1
:apply (rd) -- 2-1-1-1-2-1-2-2
:ctf {
  eq existCP(sCP,idCP') = true .
}
:apply (rd) -- 2-1-1-1-2-2-1
:apply (rd) -- 2-1-1-1-2-2-2
:apply (rd) -- 2-1-1-2
:apply (rd) -- 2-1-2
:apply (rd) -- 2-2
show proof

--> Proof of tosca-lemma03.
select TOSCALEMMA
:goal {
  eq [goal-1]: tosca-lemma03(empMsg,sCP,idCP,idND,trl,scp,scp',stCP) = true .
  eq [goal-2]: (tosca-lemma03(mp,sCP,idCP,idND,trl,scp,scp',stCP) implies
		tosca-lemma03((msg mp),sCP,idCP,idND,trl,scp,scp',stCP)) = true .
}
:def csp-1 = :csp {
  eq msg = opMsg(idCP') .
  eq msg = avMsg(idCP') .
}
:def ctf-1 = :ctf {
  eq idCP' = idCP .
}
:apply (csp-1 ctf-1)
:apply (rd) -- 1-1
:apply (rd) -- 1-2
:apply (rd) -- 2-1
:apply (rd) -- 2-2
show proof

--> Proof of tosca-lemma04.
select TOSCALEMMA
:goal {
  eq [goal-1]: tosca-lemma04(empMsg,sCP,idCP,idND,trl,scp,scp',stCP) = true .
  eq [goal-2]: (tosca-lemma04(mp,sCP,idCP,idND,trl,scp,scp',stCP) implies
               tosca-lemma04((msg mp),sCP,idCP,idND,trl,scp,scp',stCP) ) = true .
}
:def csp-1 = :csp {
  eq msg = opMsg(idCP') .
  eq msg = avMsg(idCP') .
}
:def ctf-1 = :ctf {
  eq idCP' = idCP .
}
:apply (csp-1 ctf-1)
:apply (rd) -- 1-1
:apply (rd) -- 1-2
:apply (rd) -- 2-1
:apply (rd) -- 2-2
show proof

--> Proof of tosca-lemma05.
select TOSCALEMMA
:goal {  
  eq [goal-1]: tosca-lemma05(empCP,stCP,sRQ,stRQ,sRL,mp,idCP) = true .
  eq [goal-2]: (tosca-lemma05(sCP,stCP,sRQ,stRQ,sRL,mp,idCP) implies 
		tosca-lemma05((cap(trl,idCP',scp,idND) sCP),stCP,sRQ,stRQ,sRL,mp,idCP)) = true .
}
:def ctf-1 = :ctf {
  eq idCP' = idCP .
}
:def ctf-2 = :ctf {
  eq (scp \in stCP) = true .
}
:apply (ctf-1 ctf-2)
:apply (rd) -- 1-1
:apply (rd) -- 1-2
:apply (rd) -- 2-1
:apply (rd) -- 2-2
show proof

--> Proof of tosca-lemma06.
select TOSCALEMMA .
:goal {  
  eq [goal-1]: tosca-lemma06(empCP,stCP,sRQ,stRQ,sRL,mp,idCP) = true .
  eq [goal-2]: (tosca-lemma06(sCP,stCP,sRQ,stRQ,sRL,mp,idCP) implies 
		tosca-lemma06((cap(trl,idCP',scp,idND) sCP),stCP,sRQ,stRQ,sRL,mp,idCP)) = true .
}
:def ctf-1 = :ctf {
  eq idCP' = idCP .
}
:def ctf-2 = :ctf {
  eq (scp \in stCP) = true .
}
:apply (ctf-1 ctf-2)
:apply (rd) -- 1-1
:apply (rd) -- 1-2
:apply (rd) -- 2-1
:apply (rd) -- 2-2
show proof

--> Proof of tosca-lemma07.
select TOSCALEMMA .
:goal {
  eq [goal-1]: tosca-lemma07(empCP,stCP,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) = true .
  eq [goal-2]: (tosca-lemma07(sCP,
				stCP,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) implies
                tosca-lemma07((cap(trl,idCP',scp,idND') sCP),
				stCP,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP)) = true .
}
:csp {
  eq trl = hostedOn .
  eq trl = dependsOn .
  eq trl = connectsTo .
}
:apply (rd) -- 1
:apply (rd) -- 2
:ctf {
  eq (scp \in stCP) = true .
}
:ctf {
  eq idCP' = idCP .
}
:apply (rd) -- 3-1-1
:ctf {
  eq req(getRLOfCP(sRL,idCP')) = idRQ .
}
:apply (rd) -- 3-1-2-1
:apply (rd) -- 3-1-2-2
:apply (rd) -- 3-2
show proof

--> Proof of tosca-lemma08.
select TOSCALEMMA .
:goal {
  eq tosca-lemma08(sCP,trl,stCP,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) = true .
}
:ctf {
  eq trl = connectsTo .
}
:apply (rd) -- 1
:ctf {
  eq allRLHaveRQ(sRL,sRQ) = true .
}
:csp {
  eq existCP(sCP,idCP) = false .
  eq sCP = (cap(trl',idCP,scp,idND') sCP') .
}
:apply (rd) -- 2-1-1
:ctf {
  eq existCP(sCP',idCP) = true .
}
:apply (rd) -- 2-1-2-1
:ctf {
  eq uniqCP(sCP') = true .
}
:ctf {
  eq allCPHaveRL(sCP',(rel(trl,idRL,idCP,idRQ) sRL)) = true .
}
:ctf {
  eq trl' = trl .
}
:init [lemma02] by {
  SetCP:SetOfCapability <- sCP' ;  
  SRQ1:RQState <- srq ;
  SRQ2:RQState <- srq' ;
}
:apply (rd) -- 2-1-2-2-1-1-1
:apply (rd) -- 2-1-2-2-1-1-2
:apply (rd) -- 2-1-2-2-1-2
:apply (rd) -- 2-1-2-2-2
:apply (rd) -- 2-2
show proof

--> Proof of tosca-lemma09.
select TOSCALEMMA
:goal {
  eq [goal-1]: tosca-lemma09(empCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) = true .
  eq [goal-2]: (tosca-lemma09(sCP,
			      scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) implies
	        tosca-lemma09((cap(trl,idCP',scp',idND') sCP),
			      scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP)) = true .
}  
:ctf {
  eq existCP(sCP,idCP) = true .
}
:apply (rd) -- 1
:ctf {
  eq allCPHaveRL(sCP,(rel(connectsTo,idRL,idCP,idRQ) sRL)) = true .
}
:ctf {
  eq allRLHaveRQ(sRL,(req(connectsTo,idRQ,srq,idND) sRQ)) = true .
}
:ctf {
  eq existRQ(sRL,idRQ) = true .
}
:apply (rd) -- 2-1-1
:ctf {
  eq idCP' = idCP .
}
:apply (rd) -- 2-1-2-1
:ctf {
  eq onlyOneRLOfCP(sRL,idCP') = true .
}
:ctf {
  eq (scp' \in scp) = true .
}
:csp {
  eq trl = hostedOn .
  eq trl = dependsOn .
  eq trl = connectsTo .
}
:apply (rd) -- 2-1-2-2-1-1-1
:apply (rd) -- 2-1-2-2-1-1-2
:init [lemma01] by {
  IDCP1:CPID <- idCP' ;
  IDCP2:CPID <- idCP ;
  SetRL:SetOfRelationship <- (rel(trl,idRL,idCP,idRQ) sRL) ;
  SetRQ:SetOfRequirement <- (req(trl,idRQ,srq,idND) sRQ) ;    
}
:apply (rd-) -- 2-1-2-2-1-1-3
eof
:apply (rd-) -- 2-1-2-2-1-2
:ctf { eq (opMsg(idCP') \in mp) = true . }
:apply (rd-) -- 2-1-2-2-2-1
eof
:csp {
  eq trl = hostedOn .
  eq trl = dependsOn .
  eq trl = connectsTo .
}
:init [lemma01] by {
  IDCP1:CPID <- idCP' ;
  IDCP2:CPID <- idCP ;
  SetRL:SetOfRelationship <- (rel(trl,idRL,idCP,idRQ) sRL) ;
  SetRQ:SetOfRequirement <- (req(trl,idRQ,srq,idND) sRQ) ;    
}
-- 2-1-2-2-2-2
-- 2-2
-- tosca-lemma01 ensures that
--       onlyOneRLOfCP(SetRL,idCP) and onlyOneRLOfCP(SetRL,idCP') and
--       (idRQ = req(getRLOfCP(SetRL,idCP))) implies
--       (idRQ = req(getRLOfCP(SetRL,idCP'))) = false .
--   where SetRL = (rel(connectsTo,idRL,idCP,idRQ) sRL).
eof
--> Proof of tosca-lemma10.
open TOSCALEMMA .
:goal {
  eq [goal-1]: tosca-lemma10(empCP,stCP,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) = true .
  eq [goal-2]: (tosca-lemma10(sCP,
				stCP,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) implies
                tosca-lemma10((cap(trl,idCP',scp,idND') sCP),
				stCP,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP)) = true .
}
:ctf {
  eq existCP(sCP,idCP) = true .
}
:apply (rd-) -- 1
:ctf {
  eq (scp \in stCP) = true .
}
:ctf {
  eq idCP' = idCP .
}
:apply (rd-) -- 2-1-1
:ctf {
  eq idRQ = req(getRLOfCP(sRL,idCP')) .
}
??
:apply (rd-) -- 2-1-2-2
:apply (rd-) -- 2-2
show proof
close
eof
--> Case 2:
--> (1-2) It is of idCP',
--> (2-1) onlyOneRLOfCP(sRL,idCP') does not hold.
open TOSCALEMMA .
  eq onlyOneRLOfCP(sRL,idCP') = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-lemma10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-lemma10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-lemma10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-lemma10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 3:
--> (1-2) It is of idCP',
--> (2-2) onlyOneRLOfCP(sRL,idCP') holds,
--> (3-1) the capability is not in scp but scp'.
open TOSCALEMMA .
  eq (scp' \in scp) = false .
  eq onlyOneRLOfCP(sRL,idCP') = true .
  eq sCP = (cap(trl,idCP',scp',idND) sCP') .
  red tosca-lemma10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-lemma10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-lemma10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-lemma10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 4:
--> (1-2) It is of idCP',
--> (2-2) onlyOneRLOfCP(sRL,idCP') holds,
--> (3-2) the capability is in scp,
-- tosca-lemma01 ensures that
--       onlyOneRLOfCP(SetRL,idCP) and onlyOneRLOfCP(SetRL,idCP') and
--       (idRQ = req(getRLOfCP(SetRL,idCP))) implies
--       (idRQ = req(getRLOfCP(SetRL,idCP'))) = false .
--   where SetRL = (rel(connectsTo,idRL,idCP,idRQ) sRL).
open TOSCALEMMA .
  eq onlyOneRLOfCP(sRL,idCP') = true .
  eq sCP = (cap(trl',idCP',scp,idND) sCP') .
  red onlyOneRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP) and
      onlyOneRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP') and
       (idRQ = req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP))) .
  red  req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP')) = req(getRLOfCP(sRL,idCP')) .
  eq (idRQ = req(getRLOfCP(sRL,idCP'))) = false .
  red tosca-lemma10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-lemma10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-lemma10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-lemma10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close

--> Proof of tosca-lemma11.
--> Base Case: SetCP is empty.
open TOSCALEMMA .
  eq sCP = empCP .
  red tosca-lemma11(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is of idCP.
open TOSCALEMMA .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-lemma11(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-lemma11(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-lemma11(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-lemma11(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 2:
--> (1-2) It is of idCP',
--> (2-1) onlyOneRLOfCP(sRL,idCP') does not hold.
open TOSCALEMMA .
  eq onlyOneRLOfCP(sRL,idCP') = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-lemma11(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-lemma11(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-lemma11(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-lemma11(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 3:
--> (1-2) It is of idCP',
--> (2-2) onlyOneRLOfCP(sRL,idCP') holds,
--> (3-1) the capability is not in scp but scp'.
open TOSCALEMMA .
  eq (scp' \in scp) = false .
  eq onlyOneRLOfCP(sRL,idCP') = true .
  eq sCP = (cap(trl,idCP',scp',idND) sCP') .
  red tosca-lemma11(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-lemma11(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-lemma11(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-lemma11(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 4:
--> (1-2) It is of idCP',
--> (2-2) onlyOneRLOfCP(sRL,idCP') holds,
--> (3-2) the capability is in scp,
-- tosca-lemma01 ensures that
--       onlyOneRLOfCP(SetRL,idCP) and onlyOneRLOfCP(SetRL,idCP') and
--       (idRQ = req(getRLOfCP(SetRL,idCP))) implies
--       (idRQ = req(getRLOfCP(SetRL,idCP'))) = false .
--   where SetRL = (rel(connectsTo,idRL,idCP,idRQ) sRL).
open TOSCALEMMA .
  eq onlyOneRLOfCP(sRL,idCP') = true .
  eq sCP = (cap(trl',idCP',scp,idND) sCP') .
  red onlyOneRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP) and
      onlyOneRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP') and
       (idRQ = req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP))) .
  red  req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP')) = req(getRLOfCP(sRL,idCP')) .
  eq (idRQ = req(getRLOfCP(sRL,idCP'))) = false .
  red tosca-lemma11(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-lemma11(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-lemma11(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-lemma11(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close

--> Proof of tosca-lemma12.
--> Base Case: SetCP is empty.
open TOSCALEMMA .
  eq sCP = empCP .
  red tosca-lemma12(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is of idCP.
open TOSCALEMMA .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-lemma12(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-lemma12(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-lemma12(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-lemma12(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 2:
--> (1-2) It is of idCP',
--> (2-1) onlyOneRLOfCP(sRL,idCP') does not hold.
open TOSCALEMMA .
  eq onlyOneRLOfCP(sRL,idCP') = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-lemma12(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-lemma12(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-lemma12(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-lemma12(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 3:
--> (1-2) It is of idCP',
--> (2-2) onlyOneRLOfCP(sRL,idCP') holds,
--> (3-1) the capability is not in scp but scp'.
open TOSCALEMMA .
  eq (scp' \in scp) = false .
  eq onlyOneRLOfCP(sRL,idCP') = true .
  eq sCP = (cap(trl,idCP',scp',idND) sCP') .
  red tosca-lemma12(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-lemma12(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-lemma12(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-lemma12(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 4:
--> (1-2) It is of idCP',
--> (2-2) onlyOneRLOfCP(sRL,idCP') holds,
--> (3-2) the capability is in scp,
-- tosca-lemma01 ensures that
--       onlyOneRLOfCP(SetRL,idCP) and onlyOneRLOfCP(SetRL,idCP') and
--       (idRQ = req(getRLOfCP(SetRL,idCP))) implies
--       (idRQ = req(getRLOfCP(SetRL,idCP'))) = false .
--   where SetRL = (rel(connectsTo,idRL,idCP,idRQ) sRL).
open TOSCALEMMA .
  eq onlyOneRLOfCP(sRL,idCP') = true .
  eq sCP = (cap(trl',idCP',scp,idND) sCP') .
  red onlyOneRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP) and
      onlyOneRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP') and
       (idRQ = req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP))) .
  red  req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP')) = req(getRLOfCP(sRL,idCP')) .
  eq (idRQ = req(getRLOfCP(sRL,idCP'))) = false .
  red tosca-lemma12(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-lemma12(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-lemma12(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-lemma12(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close

--> Proof of tosca-lemma13.
open TOSCALEMMA .
:goal {
  eq [goal-1]: tosca-lemma13(empMsg,sCP,idCP,idND,trl,scp,scp',stCP) = true .
  eq [goal-2]: (tosca-lemma13(mp,sCP,idCP,idND,trl,scp,scp',stCP) implies
		tosca-lemma13((msg mp),sCP,idCP,idND,trl,scp,scp',stCP)) = true .
}
:def csp-1 = :csp {
  eq msg = opMsg(idCP') .
  eq msg = avMsg(idCP') .
}
:def ctf-1 = :ctf {
  eq idCP' = idCP .
}
:apply (csp-1 ctf-1)
:apply (rd-) -- 1-1
:apply (rd-) -- 1-2
:apply (rd-) -- 2-1
:apply (rd-) -- 2-2
show proof
close

--> Proof of tosca-lemma14.
open TOSCALEMMA .
:goal {
  eq [goal-1]: tosca-lemma14(empMsg,sCP,idCP,idND,trl,scp,scp',stCP) = true .
  eq [goal-2]: (tosca-lemma14(mp,sCP,idCP,idND,trl,scp,scp',stCP) implies
		tosca-lemma14((msg mp),sCP,idCP,idND,trl,scp,scp',stCP)) = true .
}
:def csp-1 = :csp {
  eq msg = opMsg(idCP') .
  eq msg = avMsg(idCP') .
}
:def ctf-1 = :ctf {
  eq idCP' = idCP .
}
:apply (csp-1 ctf-1)
:apply (rd-) -- 1-1
:apply (rd-) -- 1-2
:apply (rd-) -- 2-1
:apply (rd-) -- 2-2
show proof
close

--> Proof of tosca-lemma15.
--> Base Case: SetCP is empty.
open TOSCALEMMA .
  eq sCP = empCP .
  red tosca-lemma15(sCP,scp,sRQ,srq,sRL,mp,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is closed.
open TOSCALEMMA .
  eq sCP = (cap(trl,idCP,closed,idND) sCP') .
  red tosca-lemma15(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-lemma15(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-lemma15(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-lemma15(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 2:
--> (1-2) It is open.
open TOSCALEMMA .
  eq sCP = (cap(trl,idCP,open,idND) sCP') .
  red tosca-lemma15(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-lemma15(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-lemma15(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-lemma15(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 3:
--> (1-3) It is available.
open TOSCALEMMA .
  eq sCP = (cap(trl,idCP,available,idND) sCP') .
  red tosca-lemma15(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-lemma15(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-lemma15(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-lemma15(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close

--> Proof of tosca-lemma16.
--> Base Case: SetCP is empty.
open TOSCALEMMA .
  eq sCP = empCP .
  red tosca-lemma16(sCP,scp,sRQ,srq,sRL,mp,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is closed.
open TOSCALEMMA .
  eq sCP = (cap(trl,idCP,closed,idND) sCP') .
  red tosca-lemma16(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-lemma16(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-lemma16(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-lemma16(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 2:
--> (1-2) It is open.
open TOSCALEMMA .
  eq sCP = (cap(trl,idCP,open,idND) sCP') .
  red tosca-lemma16(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-lemma16(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-lemma16(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-lemma16(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 3:
--> (1-3) It is available.
open TOSCALEMMA .
  eq sCP = (cap(trl,idCP,available,idND) sCP') .
  red tosca-lemma16(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-lemma16(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-lemma16(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-lemma16(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close

--> Proof of tosca-lemma17.
--> Base Case: SetCP is empty.
open TOSCALEMMA .
  eq sCP = empCP .
  red tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is not in scp but in scp'.
open TOSCALEMMA .
  eq (scp' \in scp) = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 2:
--> (1-2) It is in scp,
--> (2-1) Its type is HostedOn.
open TOSCALEMMA .
  eq sCP = (cap(hostedOn,idCP,scp,idND) sCP') .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 3:
--> (1-2) It is open,
--> (2-2) Its type is DependsOn.
open TOSCALEMMA .
  eq sCP = (cap(dependsOn,idCP,scp,idND) sCP') .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 4:
--> (1-2) It is open,
--> (2-3) Its type is ConnectsTo,
--> (3-1) req(getRLOfCP(sRL,idCP)) is not idRQ.
open TOSCALEMMA .
  eq (req(getRLOfCP(sRL,idCP)) = idRQ) = false .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 5:
--> (1-2) It is open,
--> (2-3) Its type is ConnectsTo,
--> (3-2) req(getRLOfCP(sRL,idCP)) is idRQ.
open TOSCALEMMA .
  eq req(getRLOfCP(sRL,idCP)) = idRQ .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-lemma17(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-lemma17(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close

--> Proof of tosca-lemma18.
--> Base Case: SetCP is empty.
open TOSCALEMMA .
  eq sCP = empCP .
  red tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is not in scp but in scp'.
open TOSCALEMMA .
  eq (scp' \in scp) = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 2:
--> (1-2) It is in scp,
--> (2-1) Its type is HostedOn.
open TOSCALEMMA .
  eq sCP = (cap(hostedOn,idCP,scp,idND) sCP') .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 3:
--> (1-2) It is in scp,
--> (2-2) Its type is DependsOn.
open TOSCALEMMA .
  eq sCP = (cap(dependsOn,idCP,scp,idND) sCP') .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 4:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-1) It is of idCP,
--> (4-1) trl is hostedOn.
open TOSCALEMMA .
  eq trl = hostedOn .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 5:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-1) It is of idCP,
--> (4-2) trl is dependsOn.
open TOSCALEMMA .
  eq trl = dependsOn .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 6:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-1) It is of idCP,
--> (4-3) trl is connectsTo.
open TOSCALEMMA .
  eq trl = connectsTo .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 7:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-2) It is not of idCP but of idCP'.
-- tosca-lemma01 ensures that req(getRLOfCP(sRL,idCP')) is not idRQ when req(getRLOfCP(sRL,idCP)) is idRQ.
open TOSCALEMMA .
  eq (req(getRLOfCP(sRL,idCP')) = idRQ) = false .
  eq sCP = (cap(connectsTo,idCP',scp,idND) sCP') .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-lemma18(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-lemma18(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close

