require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ***********************************************************************************************
-->  trans [R12]:
-->     < SetND, SetCP, 
-->       (req(connectsTo,IDRQ,waiting,IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), 
-->       (avMsg(IDCP) MP) >
-->  => < SetND, SetCP, 
-->       (req(connectsTo,IDRQ,ready,  IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), MP > .
--> ***********************************************************************************************
select ProofContCont .
-- When R12 can be applied to the state S:
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sND, sCP, 
                (req(connectsTo,idRQ,waiting,idND) sRQ), 
                (rel(connectsTo,idRL,idCP,idRQ)    sRL),
                (avMsg(idCP) mp) >) = true .
}
--> ***************************************************************
--> Step 2-8: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The node of the requirement of idRQ does or does not exist.
:def csp2-8idNDa = :csp {
  eq existND(sND,idND) = false .
  eq sND = (node(tnd,idND,snd) sND') .
}
:def csp2-8idNDb = :csp {
  eq snd = initial .
  eq snd = created .
  eq snd = started .
}
:apply (csp2-8idNDa rd- csp2-8idNDb rd-)
show proof
select
