require DomainModel DomainModel.cafe
provide Proof

module ProofBase {
  protecting(STATERules)

  op _!_ : Bool Bool -> Bool {constr assoc}
  op _=>_!!_ : State State Bool -> Bool {constr}

--  var CO : Component
--  var SCO : SetOfComponent
--  var SIM : SetOfImport
  vars S SS : State

  -- The invariant should be defined as the conjunction of all inv-* and all wfs-*.
  -- But this definition causes costly computations.

--  pred inv-ifCOStartedThenIMReady : State
--  eq inv-ifCOStartedThenIMReady(< SCO,SIM >)
--     = ifCOInStatesThenIMInStates(SCO,started,SIM,ready) .

--> *************************
--> Step 0-2: Define cont(S).
--> *************************
  pred cont : State
  eq cont(S)
     = (S =(*,1)=>+ SS) .

--> **********************
--> Step 0-3: Define m(S).
--> **********************
--  op m : State -> Nat
--  eq m(< SCO,SIM >)
--     = #ComponentInStates(initial,SCO) + #ImportInStates(notready,SIM) .

--> ************************
--> Step 0-4: Define inv(S).
--> ************************
  -- wfs-*:
  ceq wfs(S) = false if not wfs-allIMHaveICO(S) .
  ceq wfs(S) = false if not wfs-allIMHaveECO(S) .
  ceq inv(S) = false if not wfs(S) .

  -- inv-*:
--  ceq inv(S) = false if not inv-ifCOStartedThenIMReady(S) .
--  ceq inv(S) = false if not noCOCycle(S) .

--> **************************************
--> Step 0-5: Prepare arbitrary constants.
--> **************************************
  ops idCO idCO' iidCO eidCO : -> COID
  ops idIM idIM' : -> IMID
  ops sCO sCO' : -> SetOfComponent
  ops sIM sIM' : -> SetOfImport
  ops tIM tIM' : -> IMType
  ops cCOs cCOs' nCOs nCOs' tCOs tCOs' : -> COState
  ops cIMs cIMs' nIMs nIMs' tIMs tIMs' : -> IMState
  op sCOs : -> SetOfCOState
  op sIMs : -> SetOfIMState
  op x : -> Component

  ops lg lg' : -> ListOfLog

  -- idCO1 is a COID different from idCO.
  op idCO1 : -> COID
  eq (idCO1 = idCO) = false .

  op cCOs1 : -> COState
  eq (cCOs = cCOs1) = false .

  op tCOs1 : -> COState
  eq (tCOs = tCOs1) = false .

}

-- *************************************************************************
-- (1) init(S) implies cont(S).
-- (2) inv(S) and not final(S) implies cont(SS) or final(SS).
-- (3) inv(S) and not final(S) implies measure(S) > measure(SS).
-- (4) init(S) implies inv(S).
-- (5) inv(S) implies inv(SS).
-- *************************************************************************

-- ****************************
-- (1) init(S) implies cont(S).
-- ****************************
-- in Proof-initcont.cafe

-- **********************************************************
-- (2) inv(S) and not final(S) implies cont(SS) or final(SS).
-- **********************************************************
-- in Proof-contcont.cafe

-- *************************************************************************
-- (3) inv(S) and not final(S) implies measure(S) > measure(SS).
-- *************************************************************************
-- in Proof-measure.cafe

-- ***************************
-- (4) init(S) implies inv(S).
-- (5) inv(S) implies inv(SS).
-- ***************************
-- in Proof-inv.cafe
