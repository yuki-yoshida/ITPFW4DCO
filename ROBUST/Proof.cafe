require DomainModel DomainModel.cafe
require BAG ../lib/BAG.cafe
provide Proof

module! CMPIMPID {
  protecting(LINKS)
  [CID IID < CIID]
  op cid : COID -> CID {constr}
  op iid : IMID -> IID {constr}
}

module ProofBase {
  protecting(STATERules)
  including(BAG(CMPIMPID {sort Elt -> CIID})
      * {sort Bag -> BagOfID,
	 op empty -> empID})

  op _!_ : Bool Bool -> Bool {constr assoc}
  op _=>_!!_ : State State Bool -> Bool {constr}

  var CO : Component
  vars SCO SCO0 : SetOfComponent
  vars IDCO IIDCO EIDCO : COID 
  vars CSCO NSCO TSCO : COState
  var StCO : SetOfCOState

  var IM : Import
  vars SIM SIM0 SIM' : SetOfImport
  var IDIM : IMID
  var TIM : IMType
  vars CSIM NSIM TSIM : IMState
  var StIM : SetOfIMState

  var L : ListOfLog
  vars S SS : State

  var BG : BagOfID

  -- isForcing(IM) means that IM is forcing its importer to be stopped temporally.
  -- isForcing0(IM) means that IM is forcing but keeps stable.
  -- isForcing1(IM) means that IM is forcing and is not yet stable.
  pred isForcing : Import
  pred isForcing0 : Import
  pred isForcing1 : Import

  -- isForced(IM) means that IM may be forced because its exporter is forced.
  -- isForced0(IM) means that IM is forced but keeps stable.
  -- isForced1(IM) means that IM is forced and is not yet stable.
  pred isForced : Import
  pred isForced0 : Import
  pred isForced1 : Import

  -- isForced(CO) means that CO may be forced to be stopped temporally
  --               because its imporint IM is forced or forcing.
  -- isForced0(CO) means that CO is forced but keeps stable.
  -- isForced1(CO) means that CO is forced and is not yet stable.
  pred isForced : Component
  pred isForced0 : Component
  pred isForced1 : Component

  -- eq isForcing0(imp(mandatory,IDIM,IIDCO,IDCO,  wired,  wired,unused)) = true . -- Case (A)
  eq isForcing0(IM) =
    (type(IM)   = mandatory) and
    (state(IM)  = wired) and
    (next(IM)   = wired) and
    (target(IM) = unused) .
  -- eq isForcing1(imp(mandatory,IDIM,IIDCO,IDCO,  wired,unwired,unused)) = true . -- Case (A)
  eq isForcing1(IM) =
    (type(IM)   = mandatory) and
    (state(IM)  = wired) and
    (next(IM)   = unwired) and
    (target(IM) = unused) .
  eq isForcing(IM) = isForcing0(IM) or isForcing1(IM) .

  -- eq isForced0(imp(mandatory,IDIM,IIDCO,IDCO,  wired,  wired, wired)) = true . -- case (B)
  eq isForced0(IM) =
    (type(IM)   = mandatory) and
    (state(IM)  = wired) and
    (next(IM)   = wired) and
    (target(IM) = wired) .
  -- eq isForced1(imp(mandatory,IDIM,IIDCO,IDCO,  wired,unwired, wired)) = true . -- case (B)
  eq isForced1(IM) =
    (type(IM)   = mandatory) and
    (state(IM)  = wired) and
    (next(IM)   = unwired) and
    (target(IM) = wired) .
  eq isForced(IM) = isForced0(IM) or isForced1(IM) .

  -- eq isForced0(cmp(IDCO,started,started,started)) = true . -- case (C)
  eq isForced0(CO) =
    (state(CO)  = started) and
    (next(CO)   = started) and
    (target(CO) = started) .
  -- eq isForced1(cmp(IDCO,started,stopped,started)) = true . -- case (C)
  eq isForced1(CO) =
    (state(CO)  = started) and
    (next(CO)   = stopped) and
    (target(CO) = started) .
  eq isForced(CO) = isForced0(CO) or isForced1(CO) .

  -- The invariant should be defined as the conjunction of all inv-* and all wfs-*.
  -- But this definition causes costly computations.

  pred iidCOeidCODiffer : SetOfImport
  eq iidCOeidCODiffer(empIM) = true .
  eq iidCOeidCODiffer(IM SIM)
    = not (importer(IM) = exporter(IM)) and iidCOeidCODiffer(SIM) .

  pred wfs-iidCOeidCODiffer : State
  eq wfs-iidCOeidCODiffer(< SCO,SIM,L >)
    = iidCOeidCODiffer(SIM) .

  pred allFFIMHasFFECO : SetOfImport SetOfComponent
  eq allFFIMHasFFECO(empIM, SCO) = true .
  eq allFFIMHasFFECO(IM SIM,SCO)
    = (isForced1(IM) implies isForced1(getComponent(SCO,exporter(IM)))) and
      allFFIMHasFFECO(SIM,SCO) .

  pred inv-allFFIMHasFFECO : State
  eq inv-allFFIMHasFFECO(< SCO,SIM,L >)
    = allFFIMHasFFECO(SIM,SCO) .

  pred existFFIM : SetOfImport
  eq existFFIM(empIM) = false .
  eq existFFIM(IM SIM)
    = isForced1(IM) or isForcing1(IM) or existFFIM(SIM) .

  pred allFFCOHasFFIIM : SetOfComponent SetOfImport
  eq allFFCOHasFFIIM(empCO,SIM) = true .
  eq allFFCOHasFFIIM(CO SCO,SIM)
    = (isForced1(CO) implies existFFIM(getIMsOfICO(SIM,CO))) and
      allFFCOHasFFIIM(SCO,SIM) .

  pred inv-allFFCOHasFFIIM : State
  eq inv-allFFCOHasFFIIM(< SCO,SIM,L >)
    = allFFCOHasFFIIM(SCO,SIM) .

--> *************************
--> Step 0-2: Define cont(S).
--> *************************
  pred cont : State
  eq cont(S)
     = (S =(*,1)=>+ SS) .

--> **********************
--> Step 0-3: Define m(S).
--> **********************
  -- Measuring functions
  -- Target Distance
  op tdis : SetOfComponent -> Nat
  op tdis : SetOfImport    -> Nat

  -- Forced Distance 
  -- Forced to become stopped temporally
  op fdis : Component -> Nat
  -- Forced to become unwired temporally
  op fdis : Import -> Nat
  op fdis : BagOfID SetOfComponent SetOfImport -> Nat

  eq tdis(empCO) = 0 .
  eq tdis((CO SCO)) = tdis(CO) + tdis(SCO) .

  eq tdis(cmp(IDCO,started,started,stopped)) = 2 .
  eq tdis(cmp(IDCO,started,stopped,stopped)) = 1 .
  eq tdis(cmp(IDCO,stopped,stopped,stopped)) = 0 .
  eq tdis(cmp(IDCO,stopped,started,stopped)) = 100 . -- do not happen
  eq tdis(cmp(IDCO,stopped,stopped,started)) = 2 .
  eq tdis(cmp(IDCO,stopped,started,started)) = 1 .
  eq tdis(cmp(IDCO,started,started,started)) = 0 .
  eq tdis(cmp(IDCO,started,stopped,started)) = 0 .

  eq tdis(empIM) = 0 .
  eq tdis((IM SIM)) = tdis(IM) + tdis(SIM) .

  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,  wired,unwired)) = 2 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,unwired,unwired)) = 1 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,unwired,unwired,unwired)) = 0 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,unwired,  wired,unwired)) = 100 .

  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,  wired, unused,unwired)) = 100 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,unwired, unused,unwired)) = 100 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO, unused, unused,unwired)) = 100 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO, unused,unwired,unwired)) = 100 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO, unused,  wired,unwired)) = 100 .

  eq tdis(imp(TIM,IDIM,IIDCO,IDCO, unused, unused,  wired)) = 4 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO, unused,unwired,  wired)) = 3 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO, unused,  wired,  wired)) = 100 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,unwired, unused,  wired)) = 100 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,  wired, unused,  wired)) = 100 .

  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,unwired,unwired,  wired)) = 2 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,unwired,  wired,  wired)) = 1 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,  wired,  wired)) = 0 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,unwired,  wired)) = 0 .

  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,  wired,unused)) = 4 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,unwired,unused)) = 3 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,  wired, unused,unused)) = 100 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO, unused,  wired,unused)) = 100 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,unwired,  wired,unused)) = 100 .

  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,unwired,unwired,unused)) = 2 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO,unwired, unused,unused)) = 1 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO, unused, unused,unused)) = 0 .
  eq tdis(imp(TIM,IDIM,IIDCO,IDCO, unused,unwired,unused)) = 100 .

  ceq fdis(CO) = 0 if not isForced(CO) .
  eq fdis(cmp(IDCO,started,started,started)) = 4 .
  eq fdis(cmp(IDCO,started,stopped,started)) = 3 .

  ceq fdis(imp(TIM,IDIM,IIDCO,IDCO,CSIM,NSIM,TSIM))
     = 0 if not (CSIM = wired) or not (TSIM in (wired unused)) .
  eq fdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,  wired,wired)) = 4 .
  eq fdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,unwired,wired)) = 3 .
  eq fdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,  wired,unused)) = 0 .
  eq fdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,unwired,unused)) = 0 .
--  eq fdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,  wired,unused)) = 4 .
--  eq fdis(imp(TIM,IDIM,IIDCO,IDCO,  wired,unwired,unused)) = 3 .

  eq fdis(empID,SCO0,SIM0) = 0 .
  eq fdis((cid(IDCO) BG),SCO0,SIM0)
    = fdis(getComponent(SCO0,IDCO)) + fdis(BG,SCO0,SIM0) .
  eq fdis((iid(IDIM) BG),SCO0,SIM0)
    = fdis(getImport(SIM0,IDIM)) + fdis(BG,SCO0,SIM0) .

  op makeIDBag : SetOfImport SetOfComponent SetOfImport -> BagOfID
  op makeupIDBag : SetOfImport SetOfComponent SetOfImport -> BagOfID
  op makeupIDBag : Component SetOfComponent SetOfImport -> BagOfID

  eq makeIDBag(empIM,SCO0,SIM0) = empID .
  ceq makeIDBag((IM SIM),SCO0,SIM0)
    = makeIDBag(SIM,SCO0,SIM0) 
    if not isForcing(IM) .
  ceq makeIDBag((IM SIM),SCO0,SIM0)
    = (makeupIDBag(getComponent(SCO0,importer(IM)),SCO0,SIM0) makeIDBag(SIM,SCO0,SIM0))
    if isForcing(IM) .

  eq makeupIDBag(empIM,SCO0,SIM0) = empID .
  ceq makeupIDBag((IM SIM),SCO0,SIM0)
    = (iid(id(IM)) makeupIDBag(SIM,SCO0,SIM0))
    if not isForced(IM) .
  ceq makeupIDBag((IM SIM),SCO0,SIM0)
    = (iid(id(IM)) makeupIDBag(getComponent(SCO0,importer(IM)),SCO0,SIM0) makeupIDBag(SIM,SCO0,SIM0))
    if isForced(IM) .

  ceq makeupIDBag(CO,SCO0,SIM0)
    = cid(id(CO))
    if not isForced(CO) .
  ceq makeupIDBag(CO,SCO0,SIM0)
    = (cid(id(CO)) makeupIDBag(getIMsOfECOInTargetStates(SIM0,CO,wired),SCO0,SIM0))
    if isForced(CO) .

  eq m(< SCO,SIM,L >)
    = tdis(SCO) + tdis(SIM) + fdis(makeIDBag(SIM,SCO,SIM), SCO, SIM) .
  eq mlog(SCO, SIM)
    = tdis(SCO) + tdis(SIM) + fdis(makeIDBag(SIM,SCO,SIM), SCO, SIM) .

--> ************************
--> Step 0-4: Define inv(S).
--> ************************
  -- wfs-*:
  ceq wfs(S) = false if not wfs-uniqCO(S) .
  ceq wfs(S) = false if not wfs-uniqIM(S) .
  ceq wfs(S) = false if not wfs-allIMHaveICO(S) .
  ceq wfs(S) = false if not wfs-allIMHaveECO(S) .
  ceq wfs(S) = false if not wfs-validTarget(S) .
  ceq wfs(S) = false if not wfs-validCurrent(S) .
  ceq wfs(S) = false if not wfs-iidCOeidCODiffer(S) .

  -- inv-*:
  ceq inv(S) = false if not wfs(S) .
  ceq inv(S) = false if not noCOCycle(S) .
  ceq inv(S) = false if not inv-allFFCOHasFFIIM(S) .
  ceq inv(S) = false if not inv-allFFIMHasFFECO(S) .

--> **************************************
--> Step 0-5: Prepare arbitrary constants.
--> **************************************
  ops idCO idCO' iidCO eidCO : -> COIDLt
  ops idIM idIM' : -> IMIDLt
  ops sCO sCO' sCO'' sCO0 : -> SetOfComponent
  ops sIM sIM' sIM'' sIM0 : -> SetOfImport
  ops tIM tIM' : -> IMType
  ops cCOs cCOs' nCOs nCOs' tCOs tCOs' : -> COState
  ops cIMs cIMs' nIMs nIMs' tIMs tIMs' : -> IMState
  op sCOs : -> SetOfCOState
  op sIMs : -> SetOfIMState
  ops co co' co0 co1 : -> Component
  ops im im' im0 im1 : -> Import

  ops lg lg' : -> ListOfLog

}

-- *************************************************************************
-- (1) init(S) implies cont(S).
-- (2) inv(S) and not final(S) implies cont(SS) or final(SS).
-- (3) inv(S) and not final(S) implies measure(S) > measure(SS).
-- (4) init(S) implies inv(S).
-- (5) inv(S) implies inv(SS).
-- *************************************************************************

-- ****************************
-- (1) init(S) implies cont(S).
-- ****************************
-- in Proof-initcont.cafe

-- **********************************************************
-- (2) inv(S) and not final(S) implies cont(SS) or final(SS).
-- **********************************************************
-- in Proof-contcont.cafe

-- *************************************************************************
-- (3) inv(S) and not final(S) implies measure(S) > measure(SS).
-- *************************************************************************
-- in Proof-measure.cafe

-- ***************************
-- (4) init(S) implies inv(S).
-- (5) inv(S) implies inv(SS).
-- ***************************
-- in Proof-inv.cafe

eof
**> Check Start <**
open ProofBase . 

ops COC COC1 COC2 COD : -> COIDLt .
ops IMW IMV IMW1 IMW2 : -> IMIDLt .

op components1 : -> SetOfComponent .
eq components1 =
  (cmp(COC,  started, started, started) 
   cmp(COC1, started, started, started)) .

op imports1 : -> SetOfImport .
eq imports1 =
  (imp(optional, IMW1, COC,  COC1,  wired,  wired, unused)) .

red makeIDBag(imports1,components1,imports1) = empID .
red tdis(components1) = 0 .
red tdis(imports1) = 4 .
red fdis(makeIDBag(imports1,components1,imports1),components1,imports1) = 0 .
red m(< components1,imports1,lg >) = 4 .

op components2 : -> SetOfComponent .
eq components2 =
  (cmp(COC,  started, started, started) 
   cmp(COC2, started, started, started)) .

op imports2 : -> SetOfImport .
eq imports2 =
  (imp(mandatory, IMW2, COC,  COC2, unused, unused,  wired)) .

red makeIDBag(imports2,components2,imports2) = empID .
red tdis(components2) = 0 .
red tdis(imports2) = 4 .
red fdis(makeIDBag(imports2,components2,imports2),components2,imports2) = 0 .
red m(< components2,imports2,lg >) = 4 .

op components : -> SetOfComponent .
eq components =
  (cmp(COD,  started, started, started) cmp(COC,  started, started, started) 
   cmp(COC1, started, started, started) cmp(COC2, started, started, started)) .

op imports : -> SetOfImport .
eq imports =
  (imp(mandatory, IMW,  COD,  COC,   wired,  wired,  wired)
   imp(optional,  IMV,  COC1, COC,   wired,  wired,  wired)
   imp(mandatory, IMW1, COC,  COC1,  wired,  wired, unused)
   imp(mandatory, IMW2, COC,  COC2, unused, unused,  wired)) .

red makeIDBag(imports,components,imports) = (cid(COC) iid(IMV) iid(IMW) cid(COD)) .
red tdis(components) = 0 .
red tdis(imports) = 8 .
red fdis(makeIDBag(imports,components,imports),components,imports) = 16 .
red m(< components,imports,lg >) = 24 .

close
