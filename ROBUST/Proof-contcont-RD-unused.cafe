require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ********************************************************************************************
--> trans [RD-unused]:
-->    < SCO, (imp(TIM, IDIM, IDCO, EIDCO,  wired, unused, unused) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IDCO, EIDCO, unused, unused, unused) SIM),
-->      (ilog("RD-unused:Do Unwire", imp(TIM, IDIM, IDCO, EIDCO, unused, unused, unused),
-->         mlog(
-->      SCO, (imp(TIM, IDIM, IDCO, EIDCO,  wired, unused, unused) SIM)
-->        )) ListLG) > .
--> ********************************************************************************************

open ProofContCont .

  -- Lemmas
  var SCO : SetOfComponent
  var SIM : SetOfImport
  var L : ListOfLog
  -- eq robust-lemmaC11(SCO,SIM,L)
  --   = cont(< SCO, SIM, L >) 
  --     when inv(< SCO, SIM, L >) and
  --          equivIMSet(SIM) = false .
  ceq cont(< SCO, SIM, L >) = true
    if inv(< SCO, SIM, L >) and  equivIMSet(SIM) = false .

  -- eq robust-lemmaC12(SCO,SIM,L)
  --   = cont(< SCO, SIM, L >) 
  --     when inv(< (CO, SIM, L >) and
  --          equivCOSet(SCO) = false .
  ceq cont(< SCO, SIM, L >) = true
    if inv(< SCO, SIM, L >) and equivCOSet(SCO) = false .

--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sCO, (imp(tIM, idIM, idCO, eidCO,  wired, unused, unused) sIM), lg >) = true .
}
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
-- Set inv(SS) = true to use lemmas.
:def invctf = :ctf {
  eq inv(< sCO, (imp(tIM,idIM,idCO,eidCO,unused,unused,unused) sIM), 
           (ilog("RD-unused:Do Unwire",imp(tIM,idIM,idCO,eidCO,unused,unused,unused), 
                 (1 + (tdis(sIM) + tdis(sCO)))) lg) >) = true .
}
:apply (invctf rd-)
:def finalcsp = :csp {
  eq (equivIMSet(sIM) and equivCOSet(sCO)) = true .
  eq equivIMSet(sIM) = false .
  eq equivCOSet(sCO) = false .
}
:apply (finalcsp rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-unused done
-->
show proof
close

--> Totally 1 goal should be proved.
