require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> *****************************************************************************************
--> trans [RS-swire2]:
-->    < (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired,  wired, swired) SIM),
-->      ListLG >
--> => < (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired, swired, swired) SIM),
-->       (ilog("RS-swire2:Should Wire", imp(TIM, IDIM, IIDCO, EIDCO, wired, swired, swired),
-->         mlog(
-->      (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired, wired, swired) SIM)
-->        )) ListLG) > .
--> *****************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(eidCO, sstarted, sstarted, sstarted) sCO), 
                (imp(tIM, idIM, iidCO, eidCO, wired, wired, swired) sIM),
                lg >) = true .
}
:apply (rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-swire2 done
-->
show proof
close

--> Totally 1 goal should be proved.
