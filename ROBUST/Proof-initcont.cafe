require PROOF Proof.cafe

--> ****************************
--> (1) init(S) implies cont(S).
--> ****************************
-- Proof of (1) init(S) implies cont(S).
open PROOF .
  -- lemma
  -- eq robust-lemmaC03(CO,SCO,SIM,L)
  --   = cont(< (CO SCO), SIM, L >) 
  --     when inv(< (CO SCO), SIM, L >) and
  --          CO in st(started,started,sstarted) .
  -- Assuming that init implies inv
  ceq init(< (CO SCO), SIM, L >) = false 
    if CO in st(started,started,sstarted) and
       cont(< (CO SCO), SIM, L >) = false .

--> *******************************************
--> Step 1-1: Begin with the most general case. 
--> *******************************************
:goal {eq initcont(< sCO, sIM, lg >) = true .}
-- Define common csp's.
:def empCOcsp = :csp  { 
  eq sCO = empCO .
  eq sCO = (cmp(idCO,cCOs,nCOs,tCOs) sCO') .
}
:def cCOscsp = :csp  { 
  eq cCOs = stopped .
  eq cCOs = started .
  eq cCOs = sstarted .
}
:def nCOscsp = :csp  { 
  eq nCOs = stopped .
  eq nCOs = started .
  eq nCOs = sstarted .
}
:def tCOscsp = :csp  { 
  eq tCOs = stopped .
  eq tCOs = started .
  eq tCOs = sstarted .
}
:def empIMcsp = :csp  { 
  eq sIM = empIM .
  eq sIM = (imp(tIM,idIM,iidCO,eidCO,cIMs,nIMs,tIMs) sIM') .
}
:def cIMscsp = :csp  { 
  eq cIMs = unused .
  eq cIMs = unwired .
  eq cIMs = wired .
  eq cIMs = swired .
}

:def nIMscsp = :csp  { 
  eq nIMs = unused .
  eq nIMs = unwired .
  eq nIMs = wired .
  eq nIMs = swired .
}

:def tIMscsp = :csp  { 
  eq tIMs = unused .
  eq tIMs = unwired .
  eq tIMs = wired .
  eq tIMs = swired .
}
-- init(S) implies not final(S).
-- final(S) = equivCOSet() and equivIMSet().
:def finalcsp = :csp  { 
  eq final(< sCO, sIM, lg >) = true .
  eq equivCOSet(sCO) = false .
  eq equivIMSet(sIM) = false .
}
:apply (finalcsp rd-)
-- Case 1: final(S) = true implies init(S) = false.
-- Case 2: equivCOSet(sCO) = false means that
--          at least one component whose state is not target.
:apply (empCOcsp)
-- Case 2-1: equivCOSet(empCO) = true .
:def empCOinit = :init (ceq true = false
	if equivCOSet(SCO:SetOfComponent) . ) by {
  SCO:SetOfComponent <- sCO;
}
:apply (empCOinit rd-)
-- Case 2-2:
:apply (cCOscsp nCOscsp tCOscsp rd-)
-- When not (cCOs = nCOs), it is discharged by init(S) imples stableCOSet(sCO) . 
-- Case 2-2-2-2-3: it is discharged by robust-lemmaC03 .
-- When (cCOs = tCOs), 
-- Case 2-2-1-1-1: it is discharged by :init eq (cCOs = tCOs) = false .
:def ctCOsinit = :init (ceq true = false
	if CCOS:COState = TCOS:COState . ) by {
  CCOS:COState <- cCOs;
  TCOS:COState <- tCOs;
}
:apply(ctCOsinit rd-)
-- Case 2-2-3-3-3: it is discharged by :init eq (cCOs = tCOs) = false .
:apply(ctCOsinit rd-)
-- Case 3: equivIMSet(sIM) = false means that
--          at least one import whose state is not target.
:apply (empIMcsp)
-- Case 3-1: equivIMSet(empIM) = true .
:def empIMinit = :init (ceq true = false
	if equivIMSet(SIM:SetOfImport) . ) by {
  SIM:SetOfImport <- sIM;
}
:apply (empIMinit rd-)
-- Case 3-2:
:apply (cIMscsp nIMscsp tIMscsp rd-)
-- When not (cIMs = nIMs), it is discharged by init(S) imples stableIMSet(sIM) . 
-- Case 3-2-1-1-1: it is discharged by :init eq (cIMs = tIMs) = false .
:def ctIMsinit = :init (ceq true = false
	if CIMS:IMState = TIMS:IMState . ) by {
  CIMS:IMState <- cIMs;
  TIMS:IMState <- tIMs;
}
:apply (ctIMsinit rd-)
-- Case 3-2-2-2-2: it is discharged by :init eq (cIMs = tIMs) = false .
:apply (ctIMsinit rd-)
-- Case 3-2-3-3-4:wired,wired,swired
:def exECOcsp = :csp  { 
  eq existCO(sCO,eidCO) = false .
  eq sCO = (cmp(eidCO,cCOs',nCOs',tCOs') sCO') .
}
:apply (exECOcsp rd-)
-- Case 3-2-3-3-4-1: wfs-allIMHaveECO is false.
-- Case 3-2-3-3-4-2:
:def cCOs'csp = :csp  { 
  eq cCOs' = stopped .
  eq cCOs' = started .
  eq cCOs' = sstarted .
}
:def nCOs'csp = :csp  { 
  eq nCOs' = stopped .
  eq nCOs' = started .
  eq nCOs' = sstarted .
}
:def tCOs'csp = :csp  { 
  eq tCOs' = stopped .
  eq tCOs' = started .
  eq tCOs' = sstarted .
}
:apply (cCOs'csp nCOs'csp tCOs'csp rd-)
-- Case 3-2-3-3-4-2-2-2-3: it is discharged by robust-lemmaC03 .
-- Case 3-2-4-4-4: it is discharged by :init eq (cIMs = tIMs) = false .
:apply (ctIMsinit rd-)
--> Proof of (1) init(S) implies cont(S) done
-->
show proof
close

--> Totally 1 goal should be proved.
