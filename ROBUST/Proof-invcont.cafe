require PROOF Proof.cafe

--> **********************************************
--> (6) (inv(S) and not final(S)) implies cont(S).
--> **********************************************
-- Proof of (6) (inv(S) and not final(S)) implies cont(S).
-- Assuming 
--   init(S) implies final(S) = false,
--   initinv(S) is proved, and
--   invcont(S) is prove, 
-- then both initcont(S) and contcont(S) holds.

open PROOF .

  -- Lemmas 

  -- eq robust-lemmaC01(CO,SCO,SIM,L)
  --   = cont(< (CO SCO), SIM, L >) 
  --     when inv(< (CO SCO), SIM, L >) and
  --          inState(CO,st(started,stopped,stopped)) .
  ceq inv(< (CO SCO), SIM, L >) = false 
    if inState(CO,st(started,stopped,stopped)) and
       cont(< (CO SCO), SIM, L >) = false .

  -- eq robust-lemmaC02(CO,SCO,SIM,L)
  --   = cont(< (CO SCO), SIM, L >) 
  --     when inv(< (CO SCO), SIM, L >) and
  --          inState(CO,st(started,stopped,sstarted)) .
  ceq inv(< (CO SCO), SIM, L >) = false 
    if inState(CO,st(started,stopped,sstarted)) and
       cont(< (CO SCO), SIM, L >) = false .

  -- eq robust-lemmaC03(CO,SCO,SIM,L)
  --   = cont(< (CO SCO), SIM, L >) 
  --     when inv(< (CO SCO), SIM, L >) and
  --          inState(CO,st(started,started,sstarted)) .
  ceq inv(< (CO SCO), SIM, L >) = false 
    if inState(CO,st(started,started,sstarted)) and
       cont(< (CO SCO), SIM, L >) = false .

  -- eq robust-lemmaC04(CO,SCO,SIM,L)
  --   = cont(< (CO SCO), SIM, L >) 
  --     when inv(< (CO SCO), SIM, L >) and
  --          inState(CO,st(stopped,sstarted,sstarted)) .
  ceq inv(< (CO SCO), SIM, L >) = false 
    if inState(CO,st(stopped,sstarted,sstarted)) and
       cont(< (CO SCO), SIM, L >) = false .

--> *******************************************
--> Step 6-1: Begin with the most general case. 
--> *******************************************
:goal {eq invcont(< sCO, sIM, lg >) = true .}
-- Define common csp's.
:def empIMcsp = :csp  { 
  eq sIM = empIM .
  eq sIM = (imp(tIM,idIM,iidCO,eidCO,cIMs,nIMs,tIMs) sIM') .
}
:def tIMcsp = :csp  { 
  eq tIM = mandatory .
  eq tIM = optional .
}
:def cIMscsp = :csp  { 
  eq cIMs = unused .
  eq cIMs = unwired .
  eq cIMs = wired .
  eq cIMs = swired .
}
:def nIMscsp = :csp  { 
  eq nIMs = unused .
  eq nIMs = unwired .
  eq nIMs = wired .
  eq nIMs = swired .
}
:def tIMscsp = :csp  { 
  eq tIMs = unused .
  eq tIMs = unwired .
  eq tIMs = wired .
  eq tIMs = swired .
}
:def nIMs'csp = :csp  { 
  eq nIMs' = unused .
  eq nIMs' = unwired .
  eq nIMs' = wired .
  eq nIMs' = swired .
}
:def tIMs'csp = :csp  { 
  eq tIMs' = unused .
  eq tIMs' = unwired .
  eq tIMs' = wired .
  eq tIMs' = swired .
}
:def empCOcsp = :csp  { 
  eq sCO = empCO .
  eq sCO = (cmp(idCO,cCOs,nCOs,tCOs) sCO') .
}
:def cCOscsp = :csp  { 
  eq cCOs = stopped .
  eq cCOs = started .
  eq cCOs = sstarted .
}
:def nCOscsp = :csp  { 
  eq nCOs = stopped .
  eq nCOs = started .
  eq nCOs = sstarted .
}
:def tCOscsp = :csp  { 
  eq tCOs = stopped .
  eq tCOs = started .
  eq tCOs = sstarted .
}
:def exICOcsp = :csp  { 
  eq existCO(sCO,iidCO) = false .
  eq sCO = (cmp(iidCO,cCOs,nCOs,tCOs) sCO') .
}
:def exECOcsp = :csp  { 
  eq existCO(sCO,eidCO) = false .
  eq sCO = (cmp(eidCO,cCOs,nCOs,tCOs) sCO') .
}

--> *********************************************
--> Step 6-2: Split the current case into cases 
-->  where predicate final does or does not hold.
--> *********************************************
-- final(S) = equivCOSet() and equivIMSet().
:def finalcsp = :csp  { 
  eq final(< sCO, sIM, lg >) = true .
  eq equivCOSet(sCO) = false .
  eq equivIMSet(sIM) = false .
}
:apply (finalcsp rd-)
--> *************************************************************************************
--> Step 6-3: Split the current case into cases which collectively cover the current case
--> *************************************************************************************
-- Case 2: equivIMSet(sIM) = false means that
--          at least one import whose state is not its target.
-- :init eq equivIMSet(sIM) = false .
:init (ceq true = false
	if equivIMSet(SIM:SetOfImport) . ) by {
  SIM:SetOfImport <- sIM;
}
:apply (empIMcsp rd-)
-- Case 2-2:
:init (ceq true = false
	if CIMS:IMState = TIMS:IMState . ) by {
  CIMS:IMState <- cIMs;
  TIMS:IMState <- tIMs;
}
:apply (tIMcsp cIMscsp nIMscsp tIMscsp rd-)

-- Case 2-2-1-2-4-4: mandatory unwired  swired  swired
:apply (exECOcsp rd-)
:apply (cCOscsp nCOscsp tCOscsp rd-)
-- Case 2-2-1-2-4-4-2-1-3-3: stopped sstarted sstarted is discharged by C04
-- Case 2-2-1-2-4-4-2-2-1-3: started stopped sstated   is discharged by C02
-- Case 2-2-1-2-4-4-2-2-2-3: started started sstarted  is discharged by C03

-- Case 2-2-1-3-2-2: mandatory   wired unwired unwired
:apply (exICOcsp rd-)
:apply (cCOscsp nCOscsp tCOscsp rd-)
-- Case 2-2-1-3-2-2-2-2-1-1: started stopped stopped   is discharged by C01

-- Case 2-2-1-3-2-4: mandatory   wired unwired  swired
:apply (exICOcsp rd-)
:apply (cCOscsp nCOscsp tCOscsp rd-)

-- Case 2-2-1-3-3-4: mandatory   wired   wired  swired
:apply (exECOcsp rd-)
:apply (cCOscsp nCOscsp tCOscsp rd-)

-- Case 2-2-2-2-4-4:  optional unwired  swired  swired
:apply (exECOcsp rd-)
:apply (cCOscsp nCOscsp tCOscsp rd-)

-- Case 2-2-2-3-3-4:  optional   wired   wired  swired
:apply (exECOcsp rd-)
:apply (cCOscsp nCOscsp tCOscsp rd-)

-- Case 3: equivCOSet(sIM) = false means that
--          at least one component whose state is not its target.
-- :init eq equivIMSet(sIM) = false .
:init (ceq true = false
	if equivCOSet(SCO:SetOfComponent) . ) by {
  SCO:SetOfComponent <- sCO;
}
:apply (empCOcsp rd-)
-- Case 3-2:
:init (ceq true = false
	if CCOS:COState = TCOS:COState . ) by {
  CCOS:COState <- cCOs;
  TCOS:COState <- tCOs;
}
:apply (cCOscsp nCOscsp tCOscsp rd-)
show proof
close

--> Totally 1 goal should be proved.
