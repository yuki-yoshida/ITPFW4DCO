require Proof Proof.cafe
provide ProofContCont

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ******************************************
--> Step 2-0: Define a predicate to be proved.
--> ******************************************
module ProofContCont {
  protecting(ProofBase)

  vars S SS : State
  var CC : Bool

  pred ccont : State State
  eq ccont(S,SS)
     = inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS) .

  pred contcont : State
  eq contcont(S)
     = not (S =(*,1)=>+ SS if CC suchThat
            not ((CC implies ccont(S,SS)) == true)
     	   { S => SS !! CC ! inv(S) ! final(S) ! inv(SS) ! cont(SS) ! final(SS) }) .

  -- Lemmas
  var CO : Component
  var SCO : SetOfComponent
  var SIM : SetOfImport
  var L : ListOfLog

  -- -- eq robust-lemmaC01(CO,SCO,SIM,L)
  -- --   = cont(< (CO SCO), SIM, L >) 
  -- --     when inv(< (CO SCO), SIM, L >) and
  -- --          inStates(CO,st(started,stopped,stopped)) .
  -- ceq inv(< (CO SCO), SIM, L >) = false 
  --   if inStates(CO,st(started,stopped,stopped)) and
  --      cont(< (CO SCO), SIM, L >) = false .

  -- -- eq robust-lemmaC02(CO,SCO,SIM,L)
  -- --   = cont(< (CO SCO), SIM, L >) 
  -- --     when inv(< (CO SCO), SIM, L >) and
  -- --          inStates(CO,st(started,stopped,sstarted)) .
  -- ceq inv(< (CO SCO), SIM, L >) = false 
  --   if inStates(CO,st(started,stopped,sstarted)) and
  --      cont(< (CO SCO), SIM, L >) = false .

  -- -- eq robust-lemmaC03(CO,SCO,SIM,L)
  -- --   = cont(< (CO SCO), SIM, L >) 
  -- --     when inv(< (CO SCO), SIM, L >) and
  -- --          inStates(CO,st(started,started,sstarted)) .
  -- ceq inv(< (CO SCO), SIM, L >) = false 
  --   if inStates(CO,st(started,started,sstarted)) and
  --      cont(< (CO SCO), SIM, L >) = false .

  -- -- eq robust-lemmaC04(CO,SCO,SIM,L)
  -- --   = cont(< (CO SCO), SIM, L >) 
  -- --     when inv(< (CO SCO), SIM, L >) and
  -- --          inStates(CO,st(stopped,sstarted,sstarted)) .
  -- ceq inv(< (CO SCO), SIM, L >) = false 
  --   if inStates(CO,st(stopped,sstarted,sstarted)) and
  --      cont(< (CO SCO), SIM, L >) = false .

  -- eq robust-lemmaC11(SCO,SIM,L)
  --   = cont(< SCO, SIM, L >) 
  --     when inv(< SCO, SIM, L >) and
  --          equivIMSet(SIM) = false .
  ceq inv(< SCO, SIM, L >) = false
    if equivIMSet(SIM) = false and
       cont(< SCO, SIM, L >) = false .

  -- eq robust-lemmaC12(SCO,SIM,L)
  --   = cont(< SCO, SIM, L >) 
  --     when inv(< (CO, SIM, L >) and
  --          equivCOSet(SCO) = false .
  ceq inv(< SCO, SIM, L >) = false
    if equivCOSet(SCO) = false and
       cont(< SCO, SIM, L >) = false .
}

--> ************************************************************************
--> trans [RS-stop1]:
-->    < (cmp(IDCO, started, started, stopped) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, started, stopped, stopped) SCO), SIM,
-->      (clog("RS-stop1:Should Stop", cmp(IDCO, started, stopped, stopped),
-->       mlog(
-->      (cmp(IDCO, started, started, stopped) SCO), SIM
-->      )) ListLG) > .
--> ************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(idCO, started, started, stopped) sCO), sIM, lg >) = true .
}
:apply (rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-stop1 done
-->
show proof
close

--> ************************************************************************
--> ctrans [RD-stop]:
-->    < (cmp(IDCO, started, stopped, TSCO) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, stopped, stopped, TSCO) SCO), SIM,
-->      (clog("RD-stop:Do Stop", cmp(IDCO, stopped, stopped, TSCO),
-->       mlog(
-->      (cmp(IDCO, started, stopped, TSCO) SCO), SIM
-->      )) ListLG) >
-->    if getICOsOfIMsInStates(SCO,
-->                            getIMsOfECOInStates(SIM,IDCO,(wired swired)),
-->                            (started sstarted)) = empCO .
--> ************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(idCO, started, stopped, tCOs) sCO), sIM, lg >) = true .
}
--> ******************************************************
--> Step 2-2: Split the current case for a rule into cases
--> where the condition of the rule does or does not hold.
--> ******************************************************
:def ctf2-2RD-stop = :ctf {
  eq getICOsOfIMsInStates(sCO,
                          getIMsOfECOInStates(sIM,idCO,(wired swired)),
                         (started sstarted)) = empCO .
}
:apply (ctf2-2RD-stop rd-)
-- Case 1: getIMsOfECOInStates(sIM,idCO,(wired swired)) = empIM .
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
:def tCOscsp = :csp  { 
  eq tCOs = stopped .
  eq tCOs = started .
  eq tCOs = sstarted .
}
:apply (tCOscsp rd-)
-- Case 1-1: cmp(idCO, stopped, stopped, stopped)
:def finalcsp = :csp {
  eq (equivIMSet(sIM) and equivCOSet(sCO)) = true .
  eq equivIMSet(sIM) = false .
  eq equivCOSet(sCO) = false .
}
:apply (finalcsp rd-)
-- robust-lemmaC11 rejects 1-1-2.
-- robust-lemmaC12 rejects 1-1-3.
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-stop done
-->
show proof
close

--> **************************************************************************
--> trans [RS-stop2]:
-->    < (cmp(IDCO, started, started, sstarted) SCO),
-->      (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM),
-->       ListLG >
--> => < (cmp(IDCO, started, stopped, sstarted) SCO),
-->      (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM),
-->      (clog("RS-stop2:Should Stop", cmp(IDCO, started, stopped, sstarted),
-->       mlog(
-->      (cmp(IDCO, started, started, sstarted) SCO),
-->      (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM)
-->      )) ListLG) > .
--> *************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(idCO, started, started, sstarted) sCO), 
                (imp(mandatory, idIM, idCO, eidCO, wired, unwired, tIMs) sIM),
                lg >) = true .
}
:apply (rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-stop2 done
-->
show proof
close

--> ************************************************************************************
--> trans [RS-sstart1]:
-->    < (cmp(IDCO, stopped,  stopped, sstarted) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, stopped, sstarted, sstarted) SCO), SIM,
-->      (clog("RS-sstart1:Should Stably Start", cmp(IDCO, stopped, sstarted, sstarted),
-->       mlog(
-->      (cmp(IDCO, stopped,  stopped, sstarted) SCO), SIM
-->      )) ListLG) > .
--> ************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(idCO, stopped,  stopped, sstarted) sCO), sIM, lg >) = true .
}
:apply (rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-sstart1 done
-->
show proof
close

--> ************************************************************************************
--> ctrans [RS-sstart2]:
-->    < (cmp(IDCO, started,  started, sstarted) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, started, sstarted, sstarted) SCO), SIM,
-->      (clog("RS-sstart2:Should Stably Start", cmp(IDCO, started, sstarted, sstarted),
-->       mlog(
-->      (cmp(IDCO, started,  started, sstarted) SCO), SIM
-->      )) ListLG) >
-->    if allIMInStates(getIMsOfTypeOfICO(SIM,mandatory,IDCO),(swired unused)) .
--> ************************************************************************************

open ProofContCont .
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(idCO, started,  started, sstarted) sCO), sIM, lg >) = true .
}
--> ******************************************************
--> Step 2-2: Split the current case for a rule into cases
--> where the condition of the rule does or does not hold.
--> ******************************************************
:def ctf2-2RS-sstart2 = :ctf {
  eq allIMInStates(getIMsOfTypeOfICO(sIM,mandatory,idCO),(swired unused)) = true .
}
:apply (ctf2-2RS-sstart2 rd-)
:apply (rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-sstart2 done
-->
show proof
close

--> ****************************************************************************
--> ctrans [RD-start]:
-->    < (cmp(IDCO, stopped, sstarted, sstarted) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, started, sstarted, sstarted) SCO), SIM,
-->      (clog("RD-start:Do Start", cmp(IDCO, started, sstarted, sstarted),
-->       mlog(
-->      (cmp(IDCO, stopped, sstarted, sstarted) SCO), SIM
-->      )) ListLG) >
-->    if allIMInStates(getIMsOfTypeOfICO(SIM,mandatory,IDCO),(swired unused)) .
--> ****************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(idCO, stopped, sstarted, sstarted) sCO), sIM, lg >) = true .
}
--> ******************************************************
--> Step 2-2: Split the current case for a rule into cases
--> where the condition of the rule does or does not hold.
--> ******************************************************
:def ctf2-2RD-start = :ctf {
  eq allIMInStates(getIMsOfTypeOfICO(sIM,mandatory,idCO),(swired unused)) = true .
}
:apply (ctf2-2RD-start rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-start done
-->
show proof
close

--> ********************************************************************************
--> trans [RD-sstart]:
-->    < (cmp(IDCO,  started, sstarted, sstarted) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, sstarted, sstarted, sstarted) SCO), SIM,
-->      (clog("RD-sstart:Do Stably Start", cmp(IDCO, sstarted, sstarted, sstarted),
-->       mlog(
-->      (cmp(IDCO, started, sstarted, sstarted) SCO), SIM
-->      )) ListLG) > .
--> ********************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(idCO, started, sstarted, sstarted) sCO), sIM, lg >) = true .
}
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
:def finalcsp = :csp {
  eq (equivIMSet(sIM) and equivCOSet(sCO)) = true .
  eq equivIMSet(sIM) = false .
  eq equivCOSet(sCO) = false .
}
:apply (finalcsp rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-sstart done
-->
show proof
close

--> *********************************************************************************************
--> trans [RS-unwire1]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, unwired) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, unwired) SIM),
-->      (ilog("RS-unwire1:Should Unwire", imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, unwired),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, unwired) SIM)
-->      )) ListLG) > .
--> *********************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sCO, (imp(tIM, idIM, iidCO, eidCO, wired, wired, unwired) sIM), lg >) = true .
}
:def tIMcsp = :csp  { 
  eq tIM = mandatory .
  eq tIM = optional .
}
:apply (tIMcsp rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-unwire1 done
-->
show proof
close

--> ********************************************************************************************
--> trans [RD-unwire1]:
-->    < SCO,
-->      (imp(optional, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM),
-->      ListLG >
--> => < SCO,
-->      (imp(optional, IDIM, IDCO, EIDCO, unwired, unwired, TSIM) SIM),
-->      (ilog("RD-unwire1:Do Unwire", imp(optional, IDIM, IDCO, EIDCO, unwired, unwired, TSIM),
-->       mlog(
-->      SCO,
-->      (imp(optional, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM)
-->      )) ListLG) > .
--> ********************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sCO, (imp(optional, idIM, idCO, eidCO, wired, unwired, tIMs) sIM), lg >) = true .
}
:def tIMscsp = :csp  { 
  eq tIMs = unused .
  eq tIMs = unwired .
  eq tIMs = wired .
  eq tIMs = swired .
}
:apply (tIMscsp rd-)
-- Case 2: optional unwired unwired unwired
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
:def finalcsp = :csp {
  eq (equivIMSet(sIM) and equivCOSet(sCO)) = true .
  eq equivIMSet(sIM) = false .
  eq equivCOSet(sCO) = false .
}
:apply (finalcsp rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-unwire1 done
-->
show proof
close

--> ********************************************************************************************
--> trans [RD-unwire2]:
-->    < (cmp(IDCO, stopped, NSCO, TSCO) SCO), 
-->      (imp(mandatory, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM),
-->      ListLG >
--> => < (cmp(IDCO, stopped, NSCO, TSCO) SCO),
-->      (imp(mandatory, IDIM, IDCO, EIDCO, unwired, unwired, TSIM) SIM),
-->      (ilog("RD-unwire2:Do Unwire", imp(mandatory, IDIM, IDCO, EIDCO, unwired, unwired, TSIM),
-->       mlog(
-->      (cmp(IDCO, stopped, NSCO, TSCO) SCO), 
-->      (imp(mandatory, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM)
-->      )) ListLG) > .
--> *********************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(idCO, stopped, nCOs, tCOs) sCO), 
                (imp(mandatory, idIM, idCO, eidCO, wired, unwired, tIMs) sIM),
                lg >) = true .
}
:def tIMscsp = :csp  { 
  eq tIMs = unused .
  eq tIMs = unwired .
  eq tIMs = wired .
  eq tIMs = swired .
}
:def nCOscsp = :csp  { 
  eq nCOs = stopped .
  eq nCOs = started .
  eq nCOs = sstarted .
}
:def tCOscsp = :csp  { 
  eq tCOs = stopped .
  eq tCOs = started .
  eq tCOs = sstarted .
}
:apply (tIMscsp rd-)
-- Case 2: mandatory unwired unwired unwired
:apply (nCOscsp tCOscsp rd-)
-- Case 2-1-1: stopped stopped stopped
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
:def finalcsp = :csp {
  eq (equivIMSet(sIM) and equivCOSet(sCO)) = true .
  eq equivIMSet(sIM) = false .
  eq equivCOSet(sCO) = false .
}
:apply (finalcsp rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-unwire2 done
-->
show proof
close

--> *********************************************************************************************
--> trans [RS-unused]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired,  wired, unused) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired, unused, unused) SIM),
-->      (ilog("RS-unused:Should be Unused", imp(TIM, IDIM, IIDCO, EIDCO, wired, unused, unused),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired, wired, unused) SIM)
-->      )) ListLG) > .
--> *********************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sCO, (imp(tIM, idIM, iidCO, eidCO, wired, wired, unused) sIM), lg >) = true .
}
:apply (rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-unused done
-->
show proof
close

--> ********************************************************************************************
--> trans [RD-unused]:
-->    < SCO, (imp(TIM, IDIM, IDCO, EIDCO,  wired, unused, unused) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IDCO, EIDCO, unused, unused, unused) SIM),
-->      (ilog("RD-unused:Do Unwire", imp(TIM, IDIM, IDCO, EIDCO, unused, unused, unused),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IDCO, EIDCO,  wired, unused, unused) SIM)
-->      )) ListLG) > .
--> **************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sCO, (imp(tIM, idIM, idCO, eidCO,  wired, unused, unused) sIM), lg >) = true .
}
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
:def finalcsp = :csp {
  eq (equivIMSet(sIM) and equivCOSet(sCO)) = true .
  eq equivIMSet(sIM) = false .
  eq equivCOSet(sCO) = false .
}
:apply (finalcsp rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-unused done
-->
show proof
close

--> *********************************************************************************************
--> trans [RS-unwire2]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unused,  unused, swired) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unused, unwired, swired) SIM),
-->      (ilog("RS-unwire2:Should Unwire", imp(TIM, IDIM, IIDCO, EIDCO, unused, unwired, swired),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unused,  unused, swired) SIM)
-->      )) ListLG) > .
--> *********************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sCO, (imp(tIM, idIM, iidCO, eidCO, unused, unused, swired) sIM), lg >) = true .
}
:apply (rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-unwire2 done
-->
show proof
close

--> ******************************************************************************************
--> trans [RD-unwire3]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  unused, unwired, swired) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, swired) SIM),
-->      (ilog("RD-unwire3:Do Unwire", imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, swired),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  unused, unwired, swired) SIM)
-->      )) ListLG) > .
--> ******************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sCO, (imp(tIM, idIM, iidCO, eidCO, unused, unwired, swired) sIM), lg >) = true .
}
:apply (rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-unwire3 done
-->
show proof
close

--> ******************************************************************************************
--> trans [RS-swire1]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, swired) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired,  swired, swired) SIM),
-->      (ilog("RS-swire1:Should Wire", imp(TIM, IDIM, IIDCO, EIDCO, unwired, swired, swired),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, swired) SIM)
-->      )) ListLG) > .
--> ******************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sCO, (imp(tIM, idIM, iidCO, eidCO, unwired, unwired, swired) sIM), lg >) = true .
}
:def exICOcsp = :csp  { 
  eq existCO(sCO,iidCO) = false .
  eq sCO = (cmp(iidCO,cCOs,nCOs,tCOs) sCO') .
}
:apply (exICOcsp rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-swire1 done
-->
show proof
close

--> ****************************************************************************************
--> trans [RS-swire2]:
-->    < (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired,  wired, swired) SIM),
-->      ListLG >
--> => < (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired, swired, swired) SIM),
-->      (ilog("RS-swire2:Should Wire", imp(TIM, IDIM, IIDCO, EIDCO, wired, swired, swired),
-->       mlog(
-->      (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired, wired, swired) SIM)
-->      )) ListLG) > .
--> ****************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(eidCO, sstarted, sstarted, sstarted) sCO), 
                (imp(tIM, idIM, iidCO, eidCO, wired, wired, swired) sIM),
                lg >) = true .
}
:apply (rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-swire2 done
-->
show proof
close

--> ********************************************************************************************
--> trans [RS-unwire3]:
-->    < (cmp(EIDCO, started, stopped, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, swired) SIM),
-->      ListLG >
--> => < (cmp(EIDCO, started, stopped, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, swired) SIM),
-->      (ilog("RS-unwire3:Should Unwire", imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, swired),
-->       mlog(
-->      (cmp(EIDCO, started, stopped, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, swired) SIM)
-->      )) ListLG) > .
--> ********************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(eidCO, started, stopped, sstarted) sCO), 
                (imp(tIM, idIM, iidCO, eidCO, wired, wired, swired) sIM),
                lg >) = true .
}
:def tIMcsp = :csp  { 
  eq tIM = mandatory .
  eq tIM = optional .
}
--> ***************************************************************
--> Step 2-4: Consider which rule can be applied to the next state.
--> ***************************************************************
-- The next rule should be RD-unwire1
--> *************************************************************************************
--> Step 2-5: Split the current case into cases which collectively cover the current case
-->  and the next state of one of the split cases matches to LHS of the current rule.
--> *************************************************************************************
:apply (tIMcsp rd-)
-- Case 1: mandatory is discharged by C01.
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-unwire3 done
-->
show proof
close

--> ***********************************************************************************
--> trans [RD-wire1]:
-->    < (cmp(IIDCO, stopped, stopped, TSCO) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, unwired, swired, swired) SIM),
-->      ListLG >
--> => < (cmp(IIDCO, stopped, stopped, TSCO) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO,   wired, swired, swired) SIM),
-->      (ilog("RD-wire1:Do Wire", imp(TIM, IDIM, IIDCO, EIDCO, wired, swired, swired),
-->       mlog(
-->      (cmp(IIDCO, stopped, stopped, TSCO) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, unwired, swired, swired) SIM)
-->      )) ListLG) > .
--> ***********************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(iidCO, stopped, stopped, tCOs) sCO), 
                (imp(tIM, idIM, iidCO, eidCO, unwired, swired, swired) sIM),
                lg >) = true .
}
:apply (rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-wire1 done
-->
show proof
close

--> ***********************************************************************************
--> trans [RD-wire2]:
-->    < (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, unwired, swired, swired) SIM),
-->      ListLG >
--> => < (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO,   wired, swired, swired) SIM),
-->      (ilog("RD-wire2:Do Wire", imp(TIM, IDIM, IIDCO, EIDCO, wired, swired, swired),
-->       mlog(
-->      (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, unwired, swired, swired) SIM)
-->      )) ListLG) > .
--> ***********************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(eidCO, sstarted, sstarted, sstarted) sCO), 
                (imp(tIM, idIM, iidCO, eidCO, unwired, swired, swired) sIM),
                lg >) = true .
}
:apply (rd-)
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-wire2 done
-->
show proof
close

--> *******************************************************************************************
--> trans [RD-swire]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  wired, swired, swired) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, swired, swired, swired) SIM),
-->      (ilog("RD-swire:Do Stably Wire", imp(TIM, IDIM, IIDCO, EIDCO, swired, swired, swired),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  wired, swired, swired) SIM)
-->      )) ListLG) > .
--> *******************************************************************************************

open ProofContCont .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sCO, (imp(tIM, idIM, iidCO, eidCO, wired, swired, swired) sIM), lg >) = true .
}
:def finalcsp = :csp {
  eq (equivIMSet(sIM) and equivCOSet(sCO)) = true .
  eq equivIMSet(sIM) = false .
  eq equivCOSet(sCO) = false .
}
:apply (finalcsp rd-)
-- robust-lemmaC11 rejects 1-1-1-2.
-- robust-lemmaC12 rejects 1-1-1-3.
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-swire done
-->
show proof
close

--> Totally 20 goal should be proved.
