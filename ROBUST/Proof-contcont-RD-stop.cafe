require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ************************************************************************
--> ctrans [RD-stop]:
-->    < (cmp(IDCO, started, stopped, TSCO) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, stopped, stopped, TSCO) SCO), SIM,
-->      (clog("RD-stop:Do Stop", cmp(IDCO, stopped, stopped, TSCO),
-->       mlog(
-->      (cmp(IDCO, started, stopped, TSCO) SCO), SIM
-->      )) ListLG) >
-->    if getICOsOfIMsInStates(SCO,
-->                            getIMsOfECOInStates(SIM,IDCO,(wired swired)),
-->                            (started sstarted)) = empCO .
--> ************************************************************************
open ProofContCont .

  -- Lemmas
  var SCO : SetOfComponent
  var SIM : SetOfImport
  var L : ListOfLog
  -- eq robust-lemmaC11(SCO,SIM,L)
  --   = cont(< SCO, SIM, L >) 
  --     when inv(< SCO, SIM, L >) and
  --          equivIMSet(SIM) = false .
  ceq cont(< SCO, SIM, L >) = true
    if inv(< SCO, SIM, L >) and  equivIMSet(SIM) = false .

  -- eq robust-lemmaC12(SCO,SIM,L)
  --   = cont(< SCO, SIM, L >) 
  --     when inv(< (CO, SIM, L >) and
  --          equivCOSet(SCO) = false .
  ceq cont(< SCO, SIM, L >) = true
    if inv(< SCO, SIM, L >) and equivCOSet(SCO) = false .

--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(idCO, started, stopped, tCOs) sCO), sIM, lg >) = true .
}
--> ******************************************************
--> Step 2-2: Split the current case for a rule into cases
--> where the condition of the rule does or does not hold.
--> ******************************************************
:def ctf2-2RD-stop = :ctf {
  eq getICOsOfIMsInStates(sCO,
                          getIMsOfECOInStates(sIM,idCO,(wired swired)),
                         (started sstarted)) = empCO .
}
:apply (ctf2-2RD-stop rd-)
-- Case 1: getIMsOfECOInStates(sIM,idCO,(wired swired)) = empIM .
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
:def tCOscsp = :csp  { 
  eq tCOs = stopped .
  eq tCOs = started .
  eq tCOs = sstarted .
}
:apply (tCOscsp rd-)
-- Case 1-1: cmp(idCO, stopped, stopped, stopped)
-- Set inv(SS) = true to use lemmas.
:def invctf = :ctf {
  eq inv(< (cmp(idCO,stopped,stopped,stopped) sCO),sIM,
     (clog("RD-stop:Do Stop",cmp(idCO,stopped,stopped,stopped),(1 + (tdis(sIM) + tdis(sCO)))) lg) >) = true .
}
:apply (invctf rd-)
:def finalcsp = :csp {
  eq (equivIMSet(sIM) and equivCOSet(sCO)) = true .
  eq equivIMSet(sIM) = false .
  eq equivCOSet(sCO) = false .
}
:apply (finalcsp rd-)
-- robust-lemmaC11 rejects 1-1-1-2.
-- robust-lemmaC12 rejects 1-1-1-3.
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-stop done
-->
show proof
close

--> Totally 1 goal should be proved.
