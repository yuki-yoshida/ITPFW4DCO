require NatAxiom ../lib/NatAxiom.cafe
require Proof Proof.cafe

--> *************************************************
--> (3) inv(S) and not final(S) implies m(S) > m(SS).
--> *************************************************

module ProofMeasure {
  protecting(ProofBase)

--> *************************************
--> Step 3-0: Use natural number axioms.
--> *************************************
  protecting(NATAXIOM)

--> ******************************************
--> Step 3-1: Define a predicate to be proved.
--> ******************************************
  vars S SS : State
  var CC : Bool

  pred mmes : State State .
  eq mmes(S,SS)
     = inv(S) and not final(S) implies m(S) > m(SS) .

  pred mesmes : State .
  eq mesmes(S)
     = not (S =(*,1)=>+ SS if CC suchThat
            not ((CC implies mmes(S,SS)) == true)
     	   { S => SS !! CC ! inv(S) ! final(S) ! (m(S) > m(SS)) }) .

  vars X Y Z : Nat
  vars CO CO' CO0 : Component
  var IDCO : COID
  vars SCO SCO' SCO0 SCO1 : SetOfComponent
  vars IM IM' IM0 : Import
  vars SIM SIM' SIM0 SIM1 : SetOfImport

--  vars X X1 X2 Y Y1 Y2 Z1 Z2 : Nat

--  ceq ((X1 + Y1) > (X2 + Y2)) = true
--    if (X1 >= X2) and (Y1 > Y2) .
  
  eq ((X + Z) > (Y + Z))
    =  (X > Y) .

  ceq ((X + tdis(SCO,SCO0,SIM0)) > (Y + tdis(SCO,SCO1,SIM1)))
    =  (X > Y) 
   if (tdis(SCO,SCO0,SIM0) >= tdis(SCO,SCO1,SIM1)) .

  ceq ((X + tdis(SIM,SCO0,SIM0)) > (Y + tdis(SIM,SCO1,SIM1)))
    =  (X > Y) 
   if (tdis(SIM,SCO0,SIM0) >= tdis(SIM,SCO1,SIM1)) .

  ceq ((X + fdis(SIM,SCO0,SIM0)) > (Y + fdis(SIM,SCO1,SIM1)))
    =  (X > Y) 
   if (fdis(SIM,SCO0,SIM0) >= fdis(SIM,SCO1,SIM1)) .

  -- pred robust-lemma02 : SetOfImport Component Component SetOfComponent SetOfImport
  -- tdis(SIM) is the same when a non-isFForced Component is changed
  -- because fdis of non-isFForced Components are zero.
  -- eq robust-lemma02(SIM, CO, CO', SCO', SIM')
  --   = (tdis(SIM, (CO SCO'), SIM') = tdis(SIM, (CO' SCO'), SIM'))
  --  when (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .
  ceq (tdis(SIM, (CO SCO'), SIM') = tdis(SIM, (CO' SCO'), SIM')) = true
    if (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .

  -- pred robust-lemma03 : SetOfComponent Component Component SetOfComponent SetOfImport
  -- tdis(SCO) is the same when a non-isFForced Component is changed
  -- because tdis and fdis of non-isFForced Components are zero.
  -- eq robust-lemma03(SCO, CO, CO', SCO', SIM')
  --   = (tdis(SCO, (CO SCO'), SIM') = tdis(SCO, (CO' SCO'), SIM'))
  --  when (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .
  ceq (tdis(SCO, (CO SCO'), SIM') = tdis(SCO, (CO' SCO'), SIM')) = true
    if (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .

  -- pred robust-lemma04 : SetOfImport Component Component SetOfComponent SetOfImport
  -- fdis(SIM) may decrease when an isFForced Component is changed
  -- and fdis of the component decreases.
  -- eq robust-lemma04(SIM, CO, CO', SCO', SIM')
  --    = (fdis(SIM, (CO SCO'), SIM') >= fdis(SIM, (CO' SCO'), SIM'))
  --  when (id(CO) = id(CO')) and (fdis(Co) > fdis(CO'))
  --       and isFForced(CO) and isFForced(CO') .
  ceq (fdis(SIM, (CO SCO'), SIM') >= fdis(SIM, (CO' SCO'), SIM')) = true
   if (id(CO) = id(CO')) and (fdis(CO) > fdis(CO'))
        and isFForced(CO) and isFForced(CO') .

  -- pred robust-lemma05 : SetOfImport Component Component SetOfComponent SetOfImport
  -- tdis(SIM) may decrease when an isFForced Component is changed
  -- and fdis of the component decreases.
  -- eq robust-lemma05(SIM, CO, CO', SCO', SIM')
  --    = (tdis(SIM, (CO SCO'), SIM') >= tdis(SIM, (CO' SCO'), SIM'))
  --  when (id(CO) = id(CO')) and (fdis(CO) > fdis(CO'))
  --       and isFForced(CO) and isFForced(CO') .
  ceq (tdis(SIM, (CO SCO'), SIM') >= tdis(SIM, (CO' SCO'), SIM')) = true
   if (id(CO) = id(CO')) and (fdis(CO) > fdis(CO'))
        and isFForced(CO) and isFForced(CO') .

  -- pred robust-lemma06 : SetOfComponent Component Component SetOfComponent SetOfImport
  -- tdis(SCO) may decrease when an isFForced Component is changed
  -- and fdis of the component decreases.
  -- eq robust-lemma06(SCO, CO, CO', SCO', SIM')
  --    = (tdis(SCO, (CO SCO'), SIM') >= tdis(SCO, (CO' SCO'), SIM'))
  --  when (id(CO) = id(CO')) and (fdis(CO) > fdis(CO'))
  --       and isFForced(CO) and isFForced(CO') .
  ceq (tdis(SCO, (CO SCO'), SIM') >= tdis(SCO, (CO' SCO'), SIM')) = true
   if (id(CO) = id(CO')) and (fdis(CO) > fdis(CO'))
        and isFForced(CO) and isFForced(CO') .

  -- pred robust-lemma30 : Component Component Component Import Import SetOfComponent SetOfImport
  -- eq robust-lemma30(CO,CO',CO0,IM,IM0,SCO,SIM)
  --    = tdis(CO0, (CO  CO0 SCO), (IM IM0 SIM)) >
  --      tdis(CO0, (CO' CO0 SCO), (IM IM0 SIM)) 
  --  when id(CO) = id(CO') and
  -- 	isFForced0(CO) and
  -- 	isFForced1(CO') and
  -- 	isFForced1(IM) and
  -- 	id(CO) = importer(IM) and
  --       isMandatoryClientOf(IM,IM0,(CO CO0 SCO), (IM IM0 SIM)) and
  --       id(CO0) = exporter(IM0) .
  ceq (tdis(CO0, (CO  CO0 SCO), (IM IM0 SIM)) >
       tdis(CO0, (CO' CO0 SCO), (IM IM0 SIM))) = true
     if id(CO) = id(CO') and
	isFForced0(CO) and
	isFForced1(CO') and
	isFForced1(IM) and
	id(CO) = importer(IM) and
        isMandatoryClientOf(IM,IM0,(CO CO0 SCO), (IM IM0 SIM)) and
        id(CO0) = exporter(IM0) .

}

--> ************************************************************************
--> trans [RS-stop2]:
-->    < (cmp(IDCO, started, started, started) SCO),
-->      (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM),
-->       ListLG >
--> => < (cmp(IDCO, started, stopped, started) SCO),
-->      (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM),
-->      (clog("RS-stop2:Should Stop", cmp(IDCO, started, stopped, started),
--> 	  mlog(
-->      (cmp(IDCO, started, started, started) SCO),
-->      (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM)
--> 	 )) ListLG) > .
--> ************************************************************************
module ProofMeasure-RS-stop2 {
  protecting(ProofMeasure)

  -- pred robust-lemma30 : COID COID IMID IMState SetOfComponent SetOfImport
  -- eq robust-lemma30(IDCO,EIDCO,IDIM,TSIM,SCO,SIM)
  --    = tdis((cmp(IDCO, started, started, started) SCO),
  -- 	    (cmp(IDCO, started, started, started) SCO),
  -- 	    (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM))
  --    > tdis((cmp(IDCO, started, stopped, started) SCO),
  -- 	    (cmp(IDCO, started, stopped, started) SCO),
  -- 	    (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM))
  --  when allFFCOHasFFIIM(
  -- 	    (cmp(IDCO, started, started, started) SCO),
  -- 	    (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM))
  --   and allFFIMHasFFECO(
  -- 	    (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM),
  -- 	    (cmp(IDCO, started, started, started) SCO))
  --   and allIMHaveECO(
  -- 	    (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM),
  -- 	    (cmp(IDCO, started, started, started) SCO)) .
  vars IDCO EIDCO : COID
  var IDIM : IMID
  var TSIM : IMState
  var SCO : SetOfComponent
  var SIM : SetOfImport
  eq (tdis((cmp(IDCO, started, started, started) SCO),
	   (cmp(IDCO, started, started, started) SCO),
	   (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM)) >
      tdis((cmp(IDCO, started, stopped, started) SCO),
	   (cmp(IDCO, started, stopped, started) SCO),
	   (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM))) = true .
}

select ProofMeasure-RS-stop2 .
--> *************************************************************************
--> Step 3-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, started, started, started) sCO), 
              (imp(mandatory, idIM, idCO, eidCO, wired, unwired, tIMs) sIM),
              lg >) = true .
}
:apply (rd-)
eof


--> **************************************************************************
--> trans [RS-start1]:
-->    < (cmp(IDCO, stopped, stopped, started) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, stopped, started, started) SCO), SIM,
-->      (clog("RS-start1:Should Start", cmp(IDCO, stopped, started, started),
--> 	  mlog(
-->      (cmp(IDCO, stopped, stopped, started) SCO), SIM
--> 	 )) ListLG) > .
--> **************************************************************************
select ProofMeasure .
--> *************************************************************************
--> Step 3-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, stopped, stopped, started) sCO), sIM, lg >) = true .
}
:apply (rd-)
--> Proof of RS-start1 done.
-->
show proof
select

--> ************************************************************************
--> trans [RS-stop1]:
-->    < (cmp(IDCO, started, started, stopped) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, started, stopped, stopped) SCO), SIM,
-->      (clog("RS-stop1:Should Stop", cmp(IDCO, started, stopped, stopped),
--> 	  mlog(
-->      (cmp(IDCO, started, started, stopped) SCO), SIM
--> 	 )) ListLG) > .
--> ************************************************************************
select ProofMeasure .
--> *************************************************************************
--> Step 3-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, started, started, stopped) sCO), sIM, lg >) = true .
}
:apply (rd-)
--> Proof of RS-stop1 done.
-->
show proof
select
eof
--> Totally 3 goals should be proved.
