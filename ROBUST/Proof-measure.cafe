require NatAxiom ../lib/NatAxiom.cafe
require Proof Proof.cafe

--> *************************************************
--> (3) inv(S) and not final(S) implies m(S) > m(SS).
--> *************************************************

module ProofMeasure {
  protecting(ProofBase)

--> *************************************
--> Step 3-0: Use natural number axioms.
--> *************************************
  protecting(NATAXIOM)

--> ******************************************
--> Step 3-1: Define a predicate to be proved.
--> ******************************************
  vars S SS : State
  var CC : Bool

  pred mmes : State State .
  eq mmes(S,SS)
     = inv(S) and not final(S) implies m(S) > m(SS) .

  pred mesmes : State .
  eq mesmes(S)
     = not (S =(*,1)=>+ SS if CC suchThat
            not ((CC implies mmes(S,SS)) == true)
     	   { S => SS !! CC ! inv(S) ! final(S) ! (m(S) > m(SS)) }) .

  vars CO CO' CO0 : Component
  var IDCO : COID
  vars SCO SCO' SCO0 SCO1 : SetOfComponent
  vars IM IM' IM0 : Import
  vars SIM SIM' SIM0 SIM1 : SetOfImport

  vars BID BID' : BagOfID

  vars X X1 X2 Y Y1 Y2 Z1 Z2 : Nat

  -- Nat Axioms
  ceq ((X1 + Y1) > (X2 + Y2)) = true
    if (X1 >= X2) and (Y1 > Y2) .
  
  -- ceq ((X1 + Y1) >= (X2 + Y2)) = true
  --   if (X1 >= X2) and (Y1 >= Y2) .
  
  ceq ((X + Z1) > (Y + Z2)) =  (X > Y) 
    if Z1 = Z2 .

  -- Lemmas

  -- eq robust-lemmaM10(SIM,CO,CO',SCO0,SIM0)
  --   = (makeIDBag(SIM,(CO  SCO0),SIM0) =
  --      makeIDBag(SIM,(CO' SCO0),SIM0))
  --   when id(CO) = id(CO') and
  --        not isFForced(CO) and
  --        not isFForced(CO') .
  ceq (makeIDBag(SIM,(CO  SCO0),SIM0) =
       makeIDBag(SIM,(CO' SCO0),SIM0)) = true 
    if id(CO) = id(CO') and
       not isFForced(CO) and
       not isFForced(CO') .

  -- eq robust-lemmaM11(BID,CO,CO',SCO,SIM)
  --   = fdis(BID,(CO  SCO),SIM) >= 
  --     fdis(BID,(CO' SCO),SIM) 
  --   when id(CO) = id(CO') and
  --        fdis(CO) >= fdis(CO') .
  ceq (fdis(BID, (CO  SCO),SIM) >= 
       fdis(BID',(CO' SCO),SIM) ) = true
    if BID = BID' and
       id(CO) = id(CO') and
       fdis(CO) >= fdis(CO') .

}

--> **************************************************************************
--> trans [RS-start1]:
-->    < (cmp(IDCO, stopped, stopped, started) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, stopped, started, started) SCO), SIM,
-->      (clog("RS-start1:Should Start", cmp(IDCO, stopped, started, started),
--> 	  mlog(
-->      (cmp(IDCO, stopped, stopped, started) SCO), SIM
--> 	 )) ListLG) > .
--> **************************************************************************
select ProofMeasure .
--> *************************************************************************
--> Step 3-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, stopped, stopped, started) sCO), sIM, lg >) = true .
}
:apply (rd-)
--> Proof of RS-start1 done.
-->
show proof
select
eof

--> ************************************************************************
--> trans [RS-stop1]:
-->    < (cmp(IDCO, started, started, stopped) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, started, stopped, stopped) SCO), SIM,
-->      (clog("RS-stop1:Should Stop", cmp(IDCO, started, stopped, stopped),
--> 	  mlog(
-->      (cmp(IDCO, started, started, stopped) SCO), SIM
--> 	 )) ListLG) > .
--> ************************************************************************
select ProofMeasure .
--> *************************************************************************
--> Step 3-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, started, started, stopped) sCO), sIM, lg >) = true .
}
:init [robust-lemma02] by {
  SIM:SetOfImport <- SIM:SetOfImport;
  CO:Component <- CO:Component;  
  CO':Component <- CO':Component;  
  SCO':SetOfComponent <- SCO':SetOfComponent;
  SIM':SetOfImport <- SIM':SetOfImport;
}
:init [robust-lemma03] by {
  SCO:SetOfComponent <- SCO:SetOfComponent;
  CO:Component <- CO:Component;  
  CO':Component <- CO':Component;  
  SCO':SetOfComponent <- SCO':SetOfComponent;
  SIM':SetOfImport <- SIM':SetOfImport;
}
:apply (rd-)
--> Proof of RS-stop1 done.
-->
show proof
select

--> ************************************************************************
--> trans [RS-stop2]:
-->    < (cmp(IDCO, started, started, started) SCO),
-->      (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM),
-->       ListLG >
--> => < (cmp(IDCO, started, stopped, started) SCO),
-->      (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM),
-->      (clog("RS-stop2:Should Stop", cmp(IDCO, started, stopped, started),
--> 	  mlog(
-->      (cmp(IDCO, started, started, started) SCO),
-->      (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM)
--> 	 )) ListLG) > .
--> ************************************************************************
select ProofMeasure .
--> *************************************************************************
--> Step 3-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, started, started, started) sCO), 
              (imp(mandatory, idIM, idCO, eidCO, wired, unwired, tIMs) sIM),
              lg >) = true .
}
:init [robust-lemma05] by {
  SIM:SetOfImport <- SIM:SetOfImport;
  CO:Component <- CO:Component;  
  CO':Component <- CO':Component;  
  SCO':SetOfComponent <- SCO':SetOfComponent;
  SIM':SetOfImport <- SIM':SetOfImport;
}
-- :init [robust-lemma07] by {
--   CO:Component <- CO:Component;  
--   CO':Component <- CO':Component;  
--   SCO:SetOfComponent <- SCO:SetOfComponent;
--   SIM:SetOfImport <- SIM:SetOfImport;
-- }
:def tIMscsp = :csp {
  eq tIMs = wired .
  eq tIMs = unwired .
  eq tIMs = unused .
}
:apply (tIMscsp rd-)
--> Proof of RS-stop2 done.
-->
show proof
select
--> Totally 3 goals should be proved.
