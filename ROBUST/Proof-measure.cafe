require NatAxiom ../lib/NatAxiom.cafe
require PROOF Proof.cafe

--> *************************************************
--> (2) inv(S) and not final(S) implies m(S) > m(SS).
--> *************************************************

module ProofMeasure {
  protecting(PROOF)
  protecting(NATAXIOM)
}

--> ************************************************************************
--> trans [RS-stop1]:
-->    < (cmp(IDCO, started, started, stopped) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, started, stopped, stopped) SCO), SIM,
-->      (clog("RS-stop1:Should Stop", cmp(IDCO, started, stopped, stopped),
-->       mlog(
-->      (cmp(IDCO, started, started, stopped) SCO), SIM
-->      )) ListLG) > .
--> ************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, started, started, stopped) sCO), sIM, 
              lg >) = true .
}
:apply (rd-)
--> Proof of RS-stop1 done.
-->
show proof
select

--> ************************************************************************
--> ctrans [RD-stop]:
-->    < (cmp(IDCO, started, stopped, TSCO) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, stopped, stopped, TSCO) SCO), SIM,
-->      (clog("RD-stop:Do Stop", cmp(IDCO, stopped, stopped, TSCO),
-->       mlog(
-->      (cmp(IDCO, started, stopped, TSCO) SCO), SIM
-->      )) ListLG) >
-->    if getICOsOfIMsInStates(SCO,
-->                            getIMsOfECOInStates(SIM,IDCO,(wired swired)),
-->                            (started sstarted)) = empCO .
--> ************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, started, stopped, tCOs) sCO), sIM, 
              lg >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2RD-stop = :csp {
  eq getICOsOfIMsInStates(sCO,
                          getIMsOfECOInStates(sIM,idCO,(wired swired)),
                         (started sstarted)) = empCO .
}
:apply (csp2-2RD-stop rd-)
:def tCOscsp = :csp {
  eq tCOs =  stopped .
  eq tCOs =  started .
  eq tCOs = sstarted .
}
:apply (tCOscsp rd-)
:apply (rd-)
--> Proof of RD-stop done.
-->
show proof
select

--> *************************************************************************
-->  ctrans [RS-stop2]:
-->     < (cmp(IDCO, started, started, sstarted) SCO),
-->       (imp(mandatory, IDIM, IDCO, EIDCO, CSIM, unwired, TSIM) SIM),
-->        ListLG >
-->  => < (cmp(IDCO, started, stopped, sstarted) SCO),
-->       (imp(mandatory, IDIM, IDCO, EIDCO, CSIM, unwired, TSIM) SIM),
-->       (clog("RS-stop2:Should Stop", cmp(IDCO, started, stopped, sstarted),
-->	  mlog(
-->       (cmp(IDCO, started, started, sstarted) SCO),
-->       (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM)
-->	 )) ListLG) > 
-->     if CSIM in (wired unused) .
--> *************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, started, started, sstarted) sCO), 
              (imp(mandatory, idIM, idCO, eidCO, cIMs, unwired, tIMs) sIM),
              lg >) = true .
}
:def cIMscsp = :csp {
  eq cIMs = unused .
  eq cIMs = wired .
}
:def tIMscsp = :csp {
  eq tIMs = unused .
  eq tIMs = wired .
  eq tIMs = swired .
  eq tIMs = unwired .
}
:apply (cIMscsp tIMscsp rd-)
--> Proof of RS-stop2 done.
-->
show proof
select

--> ************************************************************************************
--> trans [RS-sstart1]:
-->    < (cmp(IDCO, stopped,  stopped, sstarted) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, stopped, sstarted, sstarted) SCO), SIM,
-->      (clog("RS-sstart1:Should Stably Start", cmp(IDCO, stopped, sstarted, sstarted),
-->       mlog(
-->      (cmp(IDCO, stopped,  stopped, sstarted) SCO), SIM
-->      )) ListLG) > .
--> ************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, stopped, stopped, sstarted) sCO), sIM, 
               lg >) = true .
}
:apply (rd-)
--> Proof of RS-sstart1 done.
-->
show proof
select

--> ****************************************************************************************
--> ctrans [RS-sstart2]:
-->    < (cmp(IDCO, started,  started, sstarted) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, started, sstarted, sstarted) SCO), SIM,
-->      (clog("RS-sstart2:Should Stably Start", cmp(IDCO, started, sstarted, sstarted),
-->       mlog(
-->      (cmp(IDCO, started,  started, sstarted) SCO), SIM
-->      )) ListLG) >
-->    if allIMInStates(getIMsOfTypeOfICO(SIM,mandatory,IDCO),(swired unused)) and
-->       allIMInTargetStates(getIMsOfTypeOfICOInStates(SIM,mandatory,IDCO,unused),unused) .
--> ****************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, started, started, sstarted) sCO), sIM, 
              lg >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2RS-sstart2A = :csp {
  eq allIMInStates(getIMsOfTypeOfICO(sIM,mandatory,idCO),(swired unused)) = true .
}
:def csp2-2RS-sstart2B = :csp {
  eq allIMInTargetStates(getIMsOfTypeOfICOInStates(sIM,mandatory,idCO,unused),unused) = true .
}
-- :def csp2-2RS-sstart2C = :csp {
--   eq allCOInStates(getECOsOfIMs(sCO,getIMsOfICOInStates(sIM,idCO,(wired swired))),
--                    (started sstarted)) = true .
-- }
-- :apply (csp2-2RS-sstart2A csp2-2RS-sstart2B csp2-2RS-sstart2C rd-)
:apply (csp2-2RS-sstart2A csp2-2RS-sstart2B rd-)
--> Proof of RS-sstart2 done.
-->
show proof
select

--> ********************************************************************************************************
--> ctrans [RD-start]:
-->    < (cmp(IDCO, stopped, sstarted, sstarted) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, started, sstarted, sstarted) SCO), SIM,
-->      (clog("RD-start:Do Start", cmp(IDCO, started, sstarted, sstarted),
-->       mlog(
-->      (cmp(IDCO, stopped, sstarted, sstarted) SCO), SIM
-->      )) ListLG) >
-->    if allIMInStates(getIMsOfTypeOfICO(SIM,mandatory,IDCO),(swired unused)) and
-->       allIMInTargetStates(getIMsOfTypeOfICOInStates(SIM,mandatory,IDCO,unused),unused) and
-->       allCOInStates(getECOsOfIMs(SCO,getIMsOfICOInStates(SIM,IDCO,(wired swired))),(started sstarted)) .
--> ********************************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, stopped, sstarted, sstarted) sCO), sIM,
              lg >) = true .
}
--> ************************************************************************
--> Step 2-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp2-2RD-startA = :csp {
  eq allIMInStates(getIMsOfTypeOfICO(sIM,mandatory,idCO),(swired unused)) = true .
}
:def csp2-2RD-startB = :csp {
  eq allIMInTargetStates(getIMsOfTypeOfICOInStates(sIM,mandatory,idCO,unused),unused) = true .
}
:def csp2-2RD-startC = :csp {
  eq allCOInStates(getECOsOfIMs(sCO,getIMsOfICOInStates(sIM,idCO,(wired swired))),
                   (started sstarted)) = true .
}
:apply (csp2-2RD-startA csp2-2RD-startB csp2-2RD-startC rd-)
--> Proof of RD-start done.
-->
show proof
select

--> ********************************************************************************
--> trans [RD-sstart]:
-->    < (cmp(IDCO,  started, sstarted, sstarted) SCO), SIM,
-->      ListLG >
--> => < (cmp(IDCO, sstarted, sstarted, sstarted) SCO), SIM,
-->      (clog("RD-sstart:Do Stably Start", cmp(IDCO, sstarted, sstarted, sstarted),
-->       mlog(
-->      (cmp(IDCO, started, sstarted, sstarted) SCO), SIM
-->      )) ListLG) > .
--> ********************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, started, sstarted, started) sCO), sIM, 
              lg >) = true .
}
:apply (rd-)

--> Proof of RD-sstart done.
-->
show proof
select

--> *********************************************************************************************
--> trans [RS-unwire1]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, unwired) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, unwired) SIM),
-->      (ilog("RS-unwire1:Should Unwire", imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, unwired),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, unwired) SIM)
-->      )) ListLG) > .
--> *********************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< sCO, (imp(tIM, idIM, iidCO, eidCO, wired, wired, unwired) sIM),
              lg >) = true .
}
:apply (rd-)
--> Proof of RS-unwire1 done.
-->
show proof
select

--> ********************************************************************************************
--> trans [RD-unwire1]:
-->    < SCO,
-->      (imp(optional, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM),
-->      ListLG >
--> => < SCO,
-->      (imp(optional, IDIM, IDCO, EIDCO, unwired, unwired, TSIM) SIM),
-->      (ilog("RD-unwire1:Do Unwire", imp(optional, IDIM, IDCO, EIDCO, unwired, unwired, TSIM),
-->       mlog(
-->      SCO,
-->      (imp(optional, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM)
-->      )) ListLG) > .
--> ********************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< sCO,
              (imp(optional, idIM, idCO, eidCO,   wired, unwired, tIMs) sIM),
              lg >) = true .
}
:def tIMscsp = :csp {
  eq tIMs = unused .
  eq tIMs = wired .
  eq tIMs = swired .
  eq tIMs = unwired .
}
:apply (tIMscsp rd-)
--> Proof of RD-unwire1 done.
-->
show proof
select

--> *********************************************************************************************
--> trans [RD-unwire2]:
-->    < (cmp(IDCO, stopped, NSCO, TSCO) SCO), 
-->      (imp(mandatory, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM),
-->      ListLG >
--> => < (cmp(IDCO, stopped, NSCO, TSCO) SCO),
-->      (imp(mandatory, IDIM, IDCO, EIDCO, unwired, unwired, TSIM) SIM),
-->      (ilog("RD-unwire2:Do Unwire", imp(mandatory, IDIM, IDCO, EIDCO, unwired, unwired, TSIM),
-->       mlog(
-->      (cmp(IDCO, stopped, NSCO, TSCO) SCO), 
-->      (imp(mandatory, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM)
-->      )) ListLG) > .
--> *********************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, stopped, nCOs, tCOs) sCO), 
              (imp(mandatory, idIM, idCO, eidCO,   wired, unwired, tIMs) sIM),
              lg >) = true .
}
:def tIMscsp = :csp {
  eq tIMs = unused .
  eq tIMs = wired .
  eq tIMs = swired .
  eq tIMs = unwired .
}
:apply (tIMscsp rd-)
--> Proof of RD-unwire2 done.
-->
show proof
select

--> *********************************************************************************************
--> trans [RS-unused]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired,  wired, unused) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired, unused, unused) SIM),
-->      (ilog("RS-unused:Should be Unused", imp(TIM, IDIM, IIDCO, EIDCO, wired, unused, unused),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired, wired, unused) SIM)
-->      )) ListLG) > .
--> *********************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< sCO, (imp(tIM, idIM, iidCO, eidCO, wired,  wired, unused) sIM),
              lg >) = true .
}
:apply (rd-)
--> Proof of RS-unused done.
-->
show proof
select

--> **************************************************************************************
--> trans [RD-unused]:
-->    < SCO, (imp(TIM, IDIM, IDCO, EIDCO,  wired, unused, unused) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IDCO, EIDCO, unused, unused, unused) SIM),
-->      (ilog("RD-unused:Do Unwire", imp(TIM, IDIM, IDCO, EIDCO, unused, unused, unused),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IDCO, EIDCO,  wired, unused, unused) SIM)
-->      )) ListLG) > .
--> **************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< sCO, (imp(tIM, idIM, idCO, eidCO,  wired, unused, unused) sIM),
              lg >) = true .
}
:apply (rd-)
--> Proof of RD-unused done.
-->
show proof
select

--> *********************************************************************************************
--> trans [RS-unwire2]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unused,  unused, swired) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unused, unwired, swired) SIM),
-->      (ilog("RS-unwire2:Should Unwire", imp(TIM, IDIM, IIDCO, EIDCO, unused, unwired, swired),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unused,  unused, swired) SIM)
-->      )) ListLG) > .
--> *********************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< sCO, (imp(tIM, idIM, iidCO, eidCO, unused,  unused, swired) sIM),
              lg >) = true .
}
:apply (rd-)
--> Proof of RS-unwire2 done.
-->
show proof
select

--> ******************************************************************************************
--> trans [RD-unwire3]:
-->    < SCO, (imp(optional, IDIM, IIDCO, EIDCO,  unused, unwired, swired) SIM),
-->      ListLG >
--> => < SCO, (imp(optional, IDIM, IIDCO, EIDCO, unwired, unwired, swired) SIM),
-->      (ilog("RD-unwire3:Do Unwire", imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, swired),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  unused, unwired, swired) SIM)
-->      )) ListLG) > .
--> ******************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< sCO, (imp(optional, idIM, iidCO, eidCO,  unused, unwired, swired) sIM),
              lg >) = true .
}
:apply (rd-)
--> Proof of RD-unwire3 done.
-->
show proof
select

--> ************************************************************************************************
-->  trans [RD-unwire4]:
-->     < (cmp(IDCO, stopped, NSCO, TSCO) SCO), 
-->       (imp(mandatory, IDIM, IDCO, EIDCO,  unused, unwired, swired) SIM),
-->       ListLG >
-->  => < (cmp(IDCO, stopped, NSCO, TSCO) SCO),
-->       (imp(mandatory, IDIM, IDCO, EIDCO, unwired, unwired, swired) SIM),
-->       (ilog("RD-unwire4:Do Unwire", imp(mandatory, IDIM, IDCO, EIDCO, unwired, unwired, swired),
-->	  mlog(
-->       (cmp(IDCO, stopped, NSCO, TSCO) SCO), 
-->       (imp(mandatory, IDIM, IDCO, EIDCO,   unused, unwired, swired) SIM)
-->	 )) ListLG) > .
--> ************************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(idCO, stopped, nCOs, tCOs) sCO), 
              (imp(mandatory, idIM, idCO, eidCO, unused, unwired, swired) sIM),
              lg >) = true .
}
:apply (rd-)
--> Proof of RD-unwire4 done.
-->
show proof
select

--> ******************************************************************************************
--> trans [RS-swire1]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, swired) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired,  swired, swired) SIM),
-->      (ilog("RS-swire1:Should Wire", imp(TIM, IDIM, IIDCO, EIDCO, unwired, swired, swired),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, swired) SIM)
-->      )) ListLG) > .
--> ******************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< sCO, (imp(tIM, idIM, iidCO, eidCO, unwired, unwired, swired) sIM),
              lg >) = true .
}
:apply (rd-)
--> Proof of RS-swire1 done.
-->
show proof
select

--> ****************************************************************************************
--> trans [RS-swire2]:
-->    < (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired,  wired, swired) SIM),
-->      ListLG >
--> => < (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired, swired, swired) SIM),
-->      (ilog("RS-swire2:Should Wire", imp(TIM, IDIM, IIDCO, EIDCO, wired, swired, swired),
-->       mlog(
-->      (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired, wired, swired) SIM)
-->      )) ListLG) > .
--> ****************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(eidCO, sstarted, sstarted, sstarted) sCO), 
              (imp(tIM, idIM, iidCO, eidCO, wired,  wired, swired) sIM),
              lg >) = true .
}
:apply (rd-)
--> Proof of RS-swire2 done.
-->
show proof
select

--> ********************************************************************************************
--> trans [RS-unwire3]:
-->    < (cmp(EIDCO, started, stopped, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, swired) SIM),
-->      ListLG >
--> => < (cmp(EIDCO, started, stopped, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, swired) SIM),
-->      (ilog("RS-unwire3:Should Unwire", imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, swired),
-->       mlog(
-->      (cmp(EIDCO, started, stopped, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, swired) SIM)
-->      )) ListLG) > .
--> ********************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(eidCO, started, stopped, sstarted) sCO), 
              (imp(tIM, idIM, iidCO, eidCO, wired, wired, swired) sIM),
              lg >) = true .
}
:apply (rd-)
--> Proof of RS-unwire3 done.
-->
show proof
select

--> ***********************************************************************************
--> trans [RD-wire]:
-->    < (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, unwired, swired, swired) SIM),
-->      ListLG >
--> => < (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO,   wired, swired, swired) SIM),
-->      (ilog("RD-wire:Do Wire", imp(TIM, IDIM, IIDCO, EIDCO, wired, swired, swired),
-->       mlog(
-->      (cmp(EIDCO, sstarted, sstarted, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, unwired, swired, swired) SIM)
-->      )) ListLG) > .
--> ***********************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< (cmp(eidCO, sstarted, sstarted, sstarted) sCO), 
              (imp(tIM, idIM, iidCO, eidCO, unwired, swired, swired) sIM),
              lg >) = true .
}
:apply (rd-)
--> Proof of RD-wire done.
-->
show proof
select

--> *******************************************************************************************
--> trans [RD-swire]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  wired, swired, swired) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, swired, swired, swired) SIM),
-->      (ilog("RD-swire:Do Stably Wire", imp(TIM, IDIM, IIDCO, EIDCO, swired, swired, swired),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  wired, swired, swired) SIM)
-->      )) ListLG) > .
--> *******************************************************************************************
select ProofMeasure .
--> *****************************************************************************************
--> Step 2-1: Begin with the most general case which is matched with LHS of the current rule.
--> *****************************************************************************************
:goal {
  eq mesmes(< sCO, (imp(tIM, idIM, iidCO, eidCO, wired, swired, swired) sIM),
              lg >) = true .
}
:apply (rd-)
--> Proof of RD-swire done.
-->
show proof
select

--> Totally 20 goals should be proved.
