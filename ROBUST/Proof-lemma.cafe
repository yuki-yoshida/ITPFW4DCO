require Proof Proof.cafe

module ProofLemma {
  protecting(ProofBase)

  [COSCOSIM] op t : Component SetOfComponent SetOfImport -> COSCOSIM {constr} .
  pred _<wf_ : COSCOSIM COSCOSIM .

  var S : State
  vars CO CO' : Component
  var IM : Import
  vars SCO SCO' : SetOfComponent
  vars SIM SIM' : SetOfImport
  var L : ListOfLog

  -- NoCyclic Lemmas
  pred robust-lemmaN01 : Component SetOfComponent SetOfImport ListOfLog
  eq robust-lemmaN01(CO,SCO,SIM,L)
    = wfs(< (CO SCO), SIM, L >) and inStates(CO,st(started,started,sstarted)) 
      implies someCONoCycle((CO SCO),SIM,st(started,started,sstarted)) .

  pred robust-lemmaN02 : Component SetOfComponent SetOfImport ListOfLog
  eq robust-lemmaN02(CO,SCO,SIM,L)
    = wfs(< (CO SCO), SIM, L >) and inStates(CO,st(started,stopped,stopped)) 
      implies someCONoCycle((CO SCO),SIM,st(started,stopped,stopped)) .
}

--> Proof of robust-lemmaN01
-->  eq robust-lemmaN01(CO,SCO,SIM,L)
-->    = wfs(< (CO SCO), SIM, L >) and inStates(CO,st(started,started,sstarted)) 
-->      implies someCONoCycle((CO SCO),SIM,st(started,started,sstarted)) .
open ProofLemma .
  -- Define DDSC for robust-lemmaN01
  eq DDSC(CO,SCO,SIM) = DDSCU(CO,SCO,SIM) .

  -- Induction Hypothesis
  ceq [robust-lemmaN01-IH :nonexec]:
    (wfs(< (CO SCO), SIM, lg >) and inStates(CO,st(started,started,sstarted))
     implies someCONoCycle((CO' SCO'),SIM,st(started,started,sstarted))) = true
    if t(CO',SCO',SIM) <wf t(CO,SCO,SIM) .

  -- Define <wf for robust-lemmaN02
  ceq ( t(CO',SCO',(IM SIM')) <wf t(CO,SCO,(IM SIM')) ) = true
     if inStates(CO, st(started,started,sstarted)) and
        inStates(CO',st(started,started,sstarted)) and
        importer(IM) = id(CO) and exporter(IM) = id(CO') and
        type(IM) = mandatory and state(IM) = wired and target(IM) = swired and 
        SCO' <wf SCO .

  eq co = cmp(idCO,cCOs,nCOs,tCOs) .
  -- for debug
  -- op lst : -> LocalState .
  -- eq lst = st(started,started,sstarted) .

:goal { eq robust-lemmaN01(co,sCO,sIM,lg) = true . }
:def cCOsctf = :ctf { eq cCOs = started . } :apply(cCOsctf rd-)
:def nCOsctf = :ctf { eq nCOs = started . } :apply(nCOsctf rd-)
:def tCOsctf = :ctf { eq tCOs = sstarted . } :apply(tCOsctf rd-)
-- Case 1-1-1: (started,stared,sstarted) 
:def hasECOcsp = :csp {
  eq allCONotInStates(
        getECOsOfIMs(sCO,
                     getIMsOfICOInTargetStates(
                          getIMsOfTypeOfICOInStates(sIM,mandatory,idCO,wired),
                          idCO,swired)),
        st(started,started,sstarted)) = true .
  eq sIM = (imp(mandatory,idIM,idCO,eidCO,wired,nIMs,swired) sIM') .
}
:apply(hasECOcsp rd-)
-- 1-1-1-2: imp(mandatory,idIM,idCO,eidCO,wired,nIMs,swired)
:csp {
  eq sCO = (cmp(eidCO,started,started,sstarted) sCO') .
}
:init as robust-lemmaN01-IH-in [robust-lemmaN01-IH]
  by {CO:Component <- co;
      SCO:SetOfComponent <- sCO;
      SIM:SetOfImport <- sIM;
      CO':Component <- cmp(eidCO,started,started,sstarted);
      SCO':SetOfComponent <- sCO'; }
:apply (rd-)

--> Proof of robust-lemmaN01 done
-->
show proof
close

--> Proof of robust-lemmaN02
-->  eq robust-lemmaN02(CO,SCO,SIM,L)
-->    = wfs(< (CO SCO), SIM, L >) and inStates(CO,st(started,stopped,stopped)) 
-->      implies someCONoCycle((CO SCO),SIM,st(started,stopped,stopped)) .
open ProofLemma .
  -- Define DDSC for robust-lemmaN02
  eq DDSC(CO,SCO,SIM) = DDSCD(CO,SCO,SIM) .

  -- Induction Hypothesis
  ceq [robust-lemmaN02-IH :nonexec]:
    (wfs(< (CO SCO), SIM, lg >) and inStates(CO,st(started,stopped,stopped))
     implies someCONoCycle((CO' SCO'),SIM,st(started,stopped,stopped))) = true
    if t(CO',SCO',SIM) <wf t(CO,SCO,SIM) .

  -- Define <wf for robust-lemmaN02
  ceq ( t(CO',SCO',(IM SIM')) <wf t(CO,SCO,(IM SIM')) ) = true
     if inStates(CO, st(started,stopped,stopped)) and
        inStates(CO',st(started,stopped,stopped)) and
        exporter(IM) = id(CO) and importer(IM) = id(CO') and type(IM) = mandatory and
        SCO' <wf SCO .

  eq co = cmp(idCO,cCOs,nCOs,tCOs) .
  -- for debug
  -- op lst : -> LocalState .
  -- eq lst = st(started,started,sstarted) .

:goal { eq robust-lemmaN02(co,sCO,sIM,lg) = true . }
:def cCOsctf = :ctf { eq cCOs = started . } :apply(cCOsctf rd-)
:def nCOsctf = :ctf { eq nCOs = stopped . } :apply(nCOsctf rd-)
:def tCOsctf = :ctf { eq tCOs = stopped . } :apply(tCOsctf rd-)
-- Case 1-1-1: (started,stopped,stopped) 
:def hasICOcsp = :csp {
  eq allCONotInStates(
       getICOsOfIMs(sCO,
         getIMsOfTypeOfECOInStates(sIM,mandatory,idCO,wired)),
       st(started,stopped,stopped)) = true .
  eq sIM = (imp(mandatory,idIM,iidCO,idCO,wired,nIMs,tIMs) sIM') .
}
:apply(hasICOcsp rd-)
-- 1-1-1-2: imp(mandatory,idIM,idCO,eidCO,wired,nIMs,tIMs)
:csp {
  eq sCO = (cmp(iidCO,started,stopped,stopped) sCO') .
}
:init as robust-lemmaN02-IH-in [robust-lemmaN02-IH]
  by {CO:Component <- co;
      SCO:SetOfComponent <- sCO;
      SIM:SetOfImport <- sIM;
      CO':Component <- cmp(iidCO,started,stopped,stopped);
      SCO':SetOfComponent <- sCO'; }
:apply (rd-)

--> Proof of robust-lemmaN02 done
-->
show proof
close

--> Totally 2 goals should be proved.
