require Proof Proof.cafe

--> Common lemmas in this domain.

module ROBUSTLEMMA {
  protecting(ProofBase)

  pred (_when _) : Bool Bool { prec: 63 r-assoc }
  eq (B1:Bool when B2:Bool)
     = B2 implies B1 .

  -- Nat Axiom
  vars X Y Z Z1 Z2 : Nat

  ceq (X >= Y) = true
    if (X > Y) .

  eq ((X + Z) >= (Y + Z))
    =  (X >= Y) .

  -- eq ((X + Z) = (Y + Z))
  --   =  (X = Y) .

  ceq ((X + Z1) = (Y + Z2))
    =  (Z1 = Z2)
   if  (X = Y) .

  ceq ((X + Z1) >= (Y + Z2))
    =  (X >= Y) 
    if (Z1 >= Z2) .

  -- ceq ((X + Z1) >= (Y + Z2))
  --   =  (X >= Y) 
  --   if (Z1 > Z2) .

  vars CO CO' : Component
  vars SCO SCO' SCO0 : SetOfComponent
  vars IDCO IIDCO EIDCO : COID 
  vars CSCO NSCO TSCO : COState
  vars CSCO' NSCO' TSCO' : COState
  var StCO : SetOfCOState

  vars IM IM' : Import
  vars SIM SIM' SIM0 : SetOfImport
  var IDIM : IMID
  var TIM : IMType
  vars CSIM NSIM TSIM : IMState
  var StIM : SetOfIMState

  var L : ListOfLog

  pred robust-lemma01 : SetOfImport Component Component SetOfComponent SetOfImport
  eq robust-lemma01(SIM, CO, CO', SCO', SIM')
     = (fdis(SIM, (CO SCO'), SIM') = fdis(SIM, (CO' SCO'), SIM'))
   when (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .

  pred robust-lemma02 : SetOfImport Component Component SetOfComponent SetOfImport
  eq robust-lemma02(SIM, CO, CO', SCO', SIM')
     = (tdis(SIM, (CO SCO'), SIM') = tdis(SIM, (CO' SCO'), SIM'))
   when (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .

  pred robust-lemma03 : SetOfComponent Component Component SetOfComponent SetOfImport
  eq robust-lemma03(SCO, CO, CO', SCO', SIM')
     = (tdis(SCO, (CO SCO'), SIM') = tdis(SCO, (CO' SCO'), SIM'))
   when (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .

  pred robust-lemma04 : SetOfImport Component Component SetOfComponent SetOfImport
  eq robust-lemma04(SIM, CO, CO', SCO', SIM')
     = (fdis(SIM, (CO SCO'), SIM') >= fdis(SIM, (CO' SCO'), SIM'))
   when (id(CO) = id(CO')) and fdis(co) > fdis(co')
        and isFForced(CO) and isFForced(CO') .

  pred robust-lemma05 : SetOfImport Component Component SetOfComponent SetOfImport
  eq robust-lemma05(SIM, CO, CO', SCO', SIM')
     = (tdis(SIM, (CO SCO'), SIM') >= tdis(SIM, (CO' SCO'), SIM'))
   when (id(CO) = id(CO')) and fdis(co) > fdis(co')
        and isFForced(CO) and isFForced(CO') .

  pred robust-lemma06 : SetOfComponent Component Component SetOfComponent SetOfImport
  eq robust-lemma06(SCO, CO, CO', SCO', SIM')
     = (tdis(SCO, (CO SCO'), SIM') >= tdis(SCO, (CO' SCO'), SIM'))
   when (id(CO) = id(CO')) and fdis(co) > fdis(co')
        and isFForced(CO) and isFForced(CO') .
}

--> **************************************************************************
--> Proof of robust-lemma01.
-->  ceq robust-lemma01(SIM, CO, CO', SCO', SIM')
-->     = (fdis(SIM, (CO  SCO'), SIM') = fdis(SIM, (CO' SCO'), SIM'))
-->   if (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .
--> **************************************************************************
module ROBUSTLEMMA01 {
  protecting(ROBUSTLEMMA)
  -- Induction Hypothesis
  ceq [robust-lemma01-IH :nonexec]:
     robust-lemma01(SIM:SetOfImport, co, co', sCO', sIM') = true
     if SIM <wf (im sIM) .

  var IM : Import
  var SCO' : SetOfComponent
  vars SIM SIM' : SetOfImport
  eq (getIMsOfECOInTargetStates(SIM',id(getComponent(SCO',importer(IM))),wired)
      <wf (IM SIM) ) = true .
}

select ROBUSTLEMMA01
:goal { eq robust-lemma01(sIM0, co, co', sCO', sIM') = true .}
:def idcoctf = :ctf {
  eq id(co') = id(co) .
}
:def isFFcoctf = :ctf {
  eq isFForced(co) = true .
}
:def isFFco'ctf = :ctf {
  eq isFForced(co') = true .
}
:apply(idcoctf isFFcoctf isFFco'ctf rd-)
:init as robust-lemma01-IH-in [robust-lemma01-IH]
      by {SIM:SetOfImport <- SIM:SetOfImport;}
:def sIM0 = :csp {
  eq sIM0 = empIM .
  eq sIM0 = (im sIM) .
}
:apply (sIM0 rd-)
:def imisFForcedctf = :ctf {
  eq isFForced(im) = true .
}
:apply (imisFForcedctf rd-)
:def idcoisImporterctf = :ctf {
  eq importer(im) = id(co) .
}
:apply(idcoisImporterctf rd-)
:def importerisFForcedctf = :ctf {
  eq isFForced(getComponent(sCO',importer(im))) = true .
}
:apply(importerisFForcedctf rd-)
--> Proof of robust-lemma01 done.
-->
show proof
select

--> ****************************************************************************
--> Proof of robust-lemma02.
-->  eq robust-lemma02(SIM, CO, CO', SCO', SIM')
-->     = (tdis(SIM, (CO SCO'), SIM') = tdis(SIM, (CO' SCO'), SIM'))
-->   when (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .
--> ****************************************************************************
module ROBUSTLEMMA02 {
  protecting(ROBUSTLEMMA)
  -- Induction Hypothesis
  ceq [robust-lemma02-IH :nonexec]:
     robust-lemma02(SIM:SetOfImport, co, co', sCO', sIM') = true
     if SIM <wf (im sIM) .

  vars CO CO' : Component
  var SCO' : SetOfComponent
  vars SIM SIM' : SetOfImport
  -- pred robust-lemma01 : SetOfImport Component Component SetOfComponent SetOfImport
  -- eq robust-lemma01(SIM, CO, CO', SCO', SIM')
  --   = (fdis(SIM, (CO SCO'), SIM') = fdis(SIM, (CO' SCO'), SIM'))
  --  when (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .
  ceq (fdis(SIM, (CO SCO'), SIM') = fdis(SIM, (CO' SCO'), SIM')) = true
    if (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .
}

select ROBUSTLEMMA02
:goal { eq robust-lemma02(sIM0, co, co', sCO', sIM') = true .}
:def idcoctf = :ctf {
  eq id(co') = id(co) .
}
:def isFFcoctf = :ctf {
  eq isFForced(co) = true .
}
:def isFFco'ctf = :ctf {
  eq isFForced(co') = true .
}
:apply(idcoctf isFFcoctf isFFco'ctf rd-)
:init as robust-lemma02-IH-in [robust-lemma02-IH]
      by {SIM:SetOfImport <- SIM:SetOfImport;}
:def sIM0 = :csp {
  eq sIM0 = empIM .
  eq sIM0 = (im sIM) .
}
:apply (sIM0 rd-)
:def imisForcedctf = :ctf {
  eq isForced(im) = true .
}
:apply (imisForcedctf rd-)
:def idcoisImporterctf = :ctf {
  eq importer(im) = id(co) .
}
:apply(idcoisImporterctf rd-)
:def importerisFForcedctf = :ctf {
  eq isFForced(getComponent(sCO',importer(im))) = true .
}
:apply(importerisFForcedctf rd-)
--> Proof of robust-lemma02 done.
-->
show proof
select

--> ****************************************************************************
--> Proof of robust-lemma03.
-->  eq robust-lemma03(SCO, CO, CO', SCO', SIM')
-->     = (tdis(SCO, (CO SCO'), SIM') = tdis(SCO, (CO' SCO'), SIM'))
-->   when (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .
--> ****************************************************************************
module ROBUSTLEMMA03 {
  protecting(ROBUSTLEMMA)
  -- Induction Hypothesis
  ceq [robust-lemma03-IH :nonexec]:
     robust-lemma03(SCO:SetOfComponent, co, co', sCO', sIM') = true
     if SCO <wf (co0 sCO) .

  vars CO CO' : Component
  var SCO' : SetOfComponent
  vars SIM SIM' : SetOfImport
  -- pred robust-lemma02 : SetOfImport Component Component SetOfComponent SetOfImport
  -- eq robust-lemma02(SIM, CO, CO', SCO', SIM')
  --   = (tdis(SIM, (CO SCO'), SIM') = tdis(SIM, (CO' SCO'), SIM'))
  --  when (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .
  ceq (tdis(SIM, (CO SCO'), SIM') = tdis(SIM, (CO' SCO'), SIM')) = true
    if (id(CO) = id(CO')) and (not isFForced(CO)) and (not isFForced(CO')) .
}

select ROBUSTLEMMA03
:goal { eq robust-lemma03(sCO0, co, co', sCO', sIM') = true .}
:def idcoctf = :ctf {
  eq id(co') = id(co) .
}
:def isFFcoctf = :ctf {
  eq isFForced(co) = true .
}
:def isFFco'ctf = :ctf {
  eq isFForced(co') = true .
}
:apply(idcoctf isFFcoctf isFFco'ctf rd-)
:init as robust-lemma03-IH-in [robust-lemma03-IH]
      by {SCO:SetOfComponent <- SCo:SetOfComponent;}
:def sCO0 = :csp {
  eq sCO0 = empCO .
  eq sCO0 = (co0 sCO) .
}
:apply (sCO0 rd-)
--> Proof of robust-lemma03 done.
-->
show proof
select

--> ******************************************************************
--> Proof of robust-lemma04.
-->  eq robust-lemma04(SIM, CO, CO', SCO', SIM')
-->     = (fdis(SIM, (CO SCO'), SIM') >= fdis(SIM, (CO' SCO'), SIM'))
-->   when (id(CO) = id(CO')) and fdis(co) > fdis(co')
-->        and isFForced(CO) and isFForced(CO') .
--> ******************************************************************
module ROBUSTLEMMA04 {
  protecting(ROBUSTLEMMA)
  -- A sort SISC of tuples of SetOfImport and SetOfComponent
  [SISC] op t : SetOfImport SetOfComponent -> SISC {constr}
  -- A well-founded binary relation in SISC
  pred _<wf_ : SISC SISC .

  -- Induction Hypothesis
  ceq [robust-lemma04-IH :nonexec]:
     robust-lemma04(SIM:SetOfImport, co, co', sCO', sIM') = true
     if t(SIM,     (co  sCO')) <wf t((im sIM),(co sCO')) .

  var IM : Import
  var SCO : SetOfComponent
  vars SIM SIM' : SetOfImport
  ceq t(SIM,SCO) <wf t(SIM',SCO) = true 
    if SIM <wf SIM' .

  ceq t(getIMsOfECOInTargetStates(sIM',id(co),wired),(co sCO')) <wf
      t((IM SIM),                                  (co sCO')) = true 
   if id(co) = importer(IM) .

  eq (getIMsOfECOInTargetStates(sIM',id(getComponent(sCO',importer(IM))),wired)
     <wf (IM SIM) ) = true .
}

select ROBUSTLEMMA04
:goal { eq robust-lemma04(sIM0, co, co', sCO', sIM') = true .}
:def idcoctf = :ctf {
  eq id(co') = id(co) .
}
:def fdiscoctf = :ctf {
  eq (fdis(co) > fdis(co')) = true .
}
:def isFFcoctf = :ctf {
  eq isFForced(co) = true .
}
:def isFFco'ctf = :ctf {
  eq isFForced(co') = true .
}
:apply(idcoctf fdiscoctf isFFcoctf isFFco'ctf rd-)
:init as robust-lemma04-IH-in [robust-lemma04-IH]
      by {SIM:SetOfImport <- SIM:SetOfImport;}
:def sIM0 = :csp {
  eq sIM0 = empIM .
  eq sIM0 = (im sIM) .
}
:apply (sIM0 rd-)
:def imisFForcedctf = :ctf {
  eq isFForced(im) = true .
}
:apply (imisFForcedctf rd-)
:def idcoisImporterctf = :ctf {
  eq importer(im) = id(co) .
}
:apply(idcoisImporterctf rd-)
:def importerisFForcedctf = :ctf {
  eq isFForced(getComponent(sCO',importer(im))) = true .
}
:apply(importerisFForcedctf rd-)
--> Proof of robust-lemma04 done.
-->
show proof
select

--> ******************************************************************
--> Proof of robust-lemma05.
-->  eq robust-lemma05(SIM, CO, CO', SCO', SIM')
-->     = (tdis(SIM, (CO SCO'), SIM') >= tdis(SIM, (CO' SCO'), SIM'))
-->   when (id(CO) = id(CO')) and fdis(co) > fdis(co')
-->        and isFForced(CO) and isFForced(CO') .
--> ******************************************************************
module ROBUSTLEMMA05 {
  protecting(ROBUSTLEMMA)
  -- Induction Hypothesis
  ceq [robust-lemma05-IH :nonexec]:
     robust-lemma05(SIM:SetOfImport, co, co', sCO', sIM') = true
     if SIM <wf (im sIM) .

  vars CO CO' : Component
  var SCO' : SetOfComponent
  vars SIM SIM' : SetOfImport
  -- eq robust-lemma04(SIM, CO, CO', SCO', SIM')
  --    = (fdis(SIM, (CO SCO'), SIM') >= fdis(SIM, (CO' SCO'), SIM'))
  --  when (id(CO) = id(CO')) and fdis(co) > fdis(co')
  --       and isFForced(CO) and isFForced(CO') .
  ceq (fdis(SIM, (CO  SCO'), SIM') >=
       fdis(SIM, (CO' SCO'), SIM')) = true
   if (id(CO) = id(CO')) and fdis(co) > fdis(co')
       and isFForced(CO) and isFForced(CO') .
}

select ROBUSTLEMMA05
:goal { eq robust-lemma05(sIM0, co, co', sCO', sIM') = true .}
:def idcoctf = :ctf {
  eq id(co') = id(co) .
}
:def fdiscoctf = :ctf {
  eq (fdis(co) > fdis(co')) = true .
}
:def isFFcoctf = :ctf {
  eq isFForced(co) = true .
}
:def isFFco'ctf = :ctf {
  eq isFForced(co') = true .
}
:apply(idcoctf fdiscoctf isFFcoctf isFFco'ctf rd-)
:init as robust-lemma05-IH-in [robust-lemma05-IH]
      by {SIM:SetOfImport <- SIM:SetOfImport;}
:def sIM0 = :csp {
  eq sIM0 = empIM .
  eq sIM0 = (im sIM) .
}
:apply (sIM0 rd-)
:def imisForcedctf = :ctf {
  eq isForced(im) = true .
}
:apply (imisForcedctf rd-)
:def idcoisImporterctf = :ctf {
  eq importer(im) = id(co) .
}
:apply(idcoisImporterctf rd-)
:def importerisFForcedctf = :ctf {
  eq isFForced(getComponent(sCO',importer(im))) = true .
}
:apply(importerisFForcedctf rd-)
--> Proof of robust-lemma05 done.
-->
show proof
select

--> ******************************************************************
--> Proof of robust-lemma06.
-->  eq robust-lemma06(SCO, CO, CO', SCO', SIM')
-->     = (tdis(SCO, (CO SCO'), SIM') >= tdis(SCO, (CO' SCO'), SIM'))
-->   when (id(CO) = id(CO')) and fdis(co) > fdis(co')
-->        and isFForced(CO) and isFForced(CO') .
--> ******************************************************************
module ROBUSTLEMMA06 {
  protecting(ROBUSTLEMMA)
  -- Induction Hypothesis
  ceq [robust-lemma06-IH :nonexec]:
     robust-lemma06(SCO:SetOfComponent, co, co', sCO', sIM') = true
     if SCO <wf (co sCO) .

  vars CO CO' : Component
  var SCO' : SetOfComponent
  vars SIM SIM' : SetOfImport
  -- eq robust-lemma05(SIM, CO, CO', SCO', SIM')
  --    = (tdis(SIM, (CO SCO'), SIM') >= tdis(SIM, (CO' SCO'), SIM'))
  --  when (id(CO) = id(CO')) and fdis(co) > fdis(co')
  --       and isFForced(CO) and isFForced(CO') .
  ceq (tdis(SIM, (CO  SCO'), SIM') >=
       tdis(SIM, (CO' SCO'), SIM')) = true
   if (id(CO) = id(CO')) and fdis(co) > fdis(co')
       and isFForced(CO) and isFForced(CO') .
}

select ROBUSTLEMMA06
:goal { eq robust-lemma06(sCO0, co, co', sCO', sIM') = true .}
:def idcoctf = :ctf {
  eq id(co') = id(co) .
}
:def fdiscoctf = :ctf {
  eq (fdis(co) > fdis(co')) = true .
}
:def isFFcoctf = :ctf {
  eq isFForced(co) = true .
}
:def isFFco'ctf = :ctf {
  eq isFForced(co') = true .
}
:apply(idcoctf fdiscoctf isFFcoctf isFFco'ctf rd-)
:init as robust-lemma06-IH-in [robust-lemma06-IH]
      by {SCO:SetOfComponent <- SCO:SetOfComponent;}
:def sCO0 = :csp {
  eq sCO0 = empCO .
  eq sCO0 = (co sCO) .
}
:apply (sCO0 rd-)
--> Proof of robust-lemma06 done.
-->
show proof
select

eof
