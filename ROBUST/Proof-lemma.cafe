require Proof Proof.cafe

module ProofLemma {
  protecting(ProofBase)

  [COSCOSIM] op t : Component SetOfComponent SetOfImport -> COSCOSIM {constr} .
  pred _<wf_ : COSCOSIM COSCOSIM .

  var S : State
  vars CO CO' : Component
  var IM : Import
  vars SCO SCO' : SetOfComponent
  vars SIM SIM' : SetOfImport
  var L : ListOfLog
  var LS : LocalState
  var SLS : SetOfLS
  vars CSCO NSCO TSCO : COState

  op DDSC : Component SetOfComponent SetOfImport -> SetOfComponent
  -- Upward DDSC
  op DDSCU : Component SetOfComponent SetOfImport -> SetOfComponent
  eq DDSCU(CO,SCO,SIM)
    = getECOsOfIMs(SCO,
        getIMsOfICOInTargetStates(
          getIMsOfTypeOfICOInStates(SIM,mandatory,CO,wired),CO,swired)) .
  -- Downward DDSC
  op DDSCD : Component SetOfComponent SetOfImport -> SetOfComponent
  eq DDSCD(CO,SCO,SIM)
    = getICOsOfIMs(SCO,
        getIMsOfTypeOfECOInStates(SIM,mandatory,CO,wired)) .

  pred isCONoCycle : Component SetOfComponent SetOfImport SetOfLS
  eq isCONoCycle(CO,SCO,SIM,SLS)
    = inStates(CO,SLS) and allCONotInStates(DDSC(CO,SCO,SIM),SLS) .
 
  pred someCONoCycle : SetOfComponent SetOfImport SetOfLS
  eq someCONoCycle(empCO,SIM,SLS) = false .
  eq someCONoCycle((CO SCO),SIM,SLS)
    = isCONoCycle(CO,SCO,SIM,SLS) or someCONoCycle(SCO,SIM,SLS) .

  -- NoCyclic Lemmas
  pred robust-lemmaN01 : Component SetOfComponent SetOfImport ListOfLog
  eq robust-lemmaN01(CO,SCO,SIM,L)
    = wfs(< (CO SCO), SIM, L >) and inStates(CO,st(started,started,sstarted)) 
      implies someCONoCycle((CO SCO),SIM,st(started,started,sstarted)) .

  pred robust-lemmaN02 : Component SetOfComponent SetOfImport ListOfLog
  eq robust-lemmaN02(CO,SCO,SIM,L)
    = wfs(< (CO SCO), SIM, L >) and inStates(CO,st(started,stopped,stopped)) 
      implies someCONoCycle((CO SCO),SIM,st(started,stopped,stopped)) .

  -- Lemma for initcont
  pred robust-lemmaIC : Component SetOfComponent SetOfImport ListOfLog
  eq robust-lemmaIC(CO,SCO,SIM,L)
    = init(< (CO SCO), SIM, L >) implies cont(< (CO SCO), SIM, L >)
      when inStates(CO,st(started,started,sstarted)) .
}

--> Proof of robust-lemmaN01
-->  eq robust-lemmaN01(CO,SCO,SIM,L)
-->    = wfs(< (CO SCO), SIM, L >) and inStates(CO,st(started,started,sstarted)) 
-->      implies someCONoCycle((CO SCO),SIM,st(started,started,sstarted)) .
open ProofLemma .
  -- Define DDSC for robust-lemmaN01
  eq DDSC(CO,SCO,SIM) = DDSCU(CO,SCO,SIM) .

  -- Induction Hypothesis
  ceq [robust-lemmaN01-IH :nonexec]:
    (wfs(< (CO SCO), SIM, lg >) and inStates(CO,st(started,started,sstarted))
     implies someCONoCycle((CO' SCO'),SIM,st(started,started,sstarted))) = true
    if t(CO',SCO',SIM) <wf t(CO,SCO,SIM) .

  -- Define <wf for robust-lemmaN02
  ceq ( t(CO',SCO',(IM SIM')) <wf t(CO,SCO,(IM SIM')) ) = true
     if inStates(CO, st(started,started,sstarted)) and
        inStates(CO',st(started,started,sstarted)) and
        importer(IM) = id(CO) and exporter(IM) = id(CO') and
        type(IM) = mandatory and state(IM) = wired and target(IM) = swired and 
        SCO' <wf SCO .

  eq co = cmp(idCO,cCOs,nCOs,tCOs) .
  -- for debug
  -- op lst : -> LocalState .
  -- eq lst = st(started,started,sstarted) .

:goal { eq robust-lemmaN01(co,sCO,sIM,lg) = true . }
:def cCOsctf = :ctf { eq cCOs = started . } :apply(cCOsctf rd-)
:def nCOsctf = :ctf { eq nCOs = started . } :apply(nCOsctf rd-)
:def tCOsctf = :ctf { eq tCOs = sstarted . } :apply(tCOsctf rd-)
-- Case 1-1-1: (started,stared,sstarted) 
:def hasECOcsp = :csp {
  eq allCONotInStates(
        getECOsOfIMs(sCO,
                     getIMsOfICOInTargetStates(
                          getIMsOfTypeOfICOInStates(sIM,mandatory,idCO,wired),
                          idCO,swired)),
        st(started,started,sstarted)) = true .
  eq sIM = (imp(mandatory,idIM,idCO,eidCO,wired,nIMs,swired) sIM') .
}
:apply(hasECOcsp rd-)
-- 1-1-1-2: imp(mandatory,idIM,idCO,eidCO,wired,nIMs,swired)
:csp {
  eq sCO = (cmp(eidCO,started,started,sstarted) sCO') .
}
:init as robust-lemmaN01-IH-in [robust-lemmaN01-IH]
  by {CO:Component <- co;
      SCO:SetOfComponent <- sCO;
      SIM:SetOfImport <- sIM;
      CO':Component <- cmp(eidCO,started,started,sstarted);
      SCO':SetOfComponent <- sCO'; }
:apply (rd-)

--> Proof of robust-lemmaN01 done
-->
show proof
close

--> Proof of robust-lemmaN02
-->  eq robust-lemmaN02(CO,SCO,SIM,L)
-->    = wfs(< (CO SCO), SIM, L >) and inStates(CO,st(started,stopped,stopped)) 
-->      implies someCONoCycle((CO SCO),SIM,st(started,stopped,stopped)) .
open ProofLemma .
  -- Define DDSC for robust-lemmaN02
  eq DDSC(CO,SCO,SIM) = DDSCD(CO,SCO,SIM) .

  -- Induction Hypothesis
  ceq [robust-lemmaN02-IH :nonexec]:
    (wfs(< (CO SCO), SIM, lg >) and inStates(CO,st(started,stopped,stopped))
     implies someCONoCycle((CO' SCO'),SIM,st(started,stopped,stopped))) = true
    if t(CO',SCO',SIM) <wf t(CO,SCO,SIM) .

  -- Define <wf for robust-lemmaN02
  ceq ( t(CO',SCO',(IM SIM')) <wf t(CO,SCO,(IM SIM')) ) = true
     if inStates(CO, st(started,stopped,stopped)) and
        inStates(CO',st(started,stopped,stopped)) and
        exporter(IM) = id(CO) and importer(IM) = id(CO') and type(IM) = mandatory and
        SCO' <wf SCO .

  eq co = cmp(idCO,cCOs,nCOs,tCOs) .
  -- for debug
  -- op lst : -> LocalState .
  -- eq lst = st(started,started,sstarted) .

:goal { eq robust-lemmaN02(co,sCO,sIM,lg) = true . }
:def cCOsctf = :ctf { eq cCOs = started . } :apply(cCOsctf rd-)
:def nCOsctf = :ctf { eq nCOs = stopped . } :apply(nCOsctf rd-)
:def tCOsctf = :ctf { eq tCOs = stopped . } :apply(tCOsctf rd-)
-- Case 1-1-1: (started,stopped,stopped) 
:def hasICOcsp = :csp {
  eq allCONotInStates(
       getICOsOfIMs(sCO,
         getIMsOfTypeOfECOInStates(sIM,mandatory,idCO,wired)),
       st(started,stopped,stopped)) = true .
  eq sIM = (imp(mandatory,idIM,iidCO,idCO,wired,nIMs,tIMs) sIM') .
}
:apply(hasICOcsp rd-)
-- 1-1-1-2: imp(mandatory,idIM,idCO,eidCO,wired,nIMs,tIMs)
:csp {
  eq sCO = (cmp(iidCO,started,stopped,stopped) sCO') .
}
:init as robust-lemmaN02-IH-in [robust-lemmaN02-IH]
  by {CO:Component <- co;
      SCO:SetOfComponent <- sCO;
      SIM:SetOfImport <- sIM;
      CO':Component <- cmp(iidCO,started,stopped,stopped);
      SCO':SetOfComponent <- sCO'; }
:apply (rd-)

--> Proof of robust-lemmaN02 done
-->
show proof
close

--> Proof of robust-lemmaIC
-->  eq robust-lemmaIC(CO,SCO,SIM,L)
-->    = init(< (CO SCO), SIM, L >) implies cont(< (CO SCO), SIM, L >)
-->      when inStates(CO,st(started,started,sstarted)) .
open ProofLemma .

  -- robust-lemmaN01(CO,SCO,SIM,L)
  --   = wfs(< (CO SCO), SIM, L >) and inStates(CO,st(started,started,sstarted)) 
  --     implies someCONoCycle((CO SCO),SIM,st(started,started,sstarted)) .
  -- this lemma assumes that DDSC = DDSCU

  -- someCONoCycle((CO SCO),SIM,st(started,started,sstarted)) means that
  --  there exists a CO' in (CO SCO) 
  --    such that isCONoCycle(CO',(CO SCO),SIM,st(started,started,sstarted)) .

  -- Since robust-lemmaIC can select an arbitrary CO, we can select CO as CO',
  -- that is, we can assume as follows:
  ceq [robust-lemmaN01]:
    wfs(< (CO SCO), SIM, L >) = false
    if inStates(CO,st(started,started,sstarted)) and
       isCONoCycle(CO,(CO SCO),SIM,st(started,started,sstarted)) = false .
  -- This lemma assumes that DDSC = DDSCU
   eq DDSC(CO,SCO,SIM) = DDSCU(CO,SCO,SIM) .

  eq co = cmp(idCO,cCOs,nCOs,tCOs) .

:goal { eq robust-lemmaIC(co,sCO,sIM,lg) = true .}
:def cCOsctf = :ctf { eq cCOs = started . } :apply(cCOsctf rd-)
:def nCOsctf = :ctf { eq nCOs = started . } :apply(nCOsctf rd-)
:def tCOsctf = :ctf { eq tCOs = sstarted . } :apply(tCOsctf rd-)
-- Case 1-1-1: (started,stared,sstarted) RS-sstart2 should be applied.
-- RS-sstarted2 requires allIMInStates(getIMsOfTypeOfICO(sIM,mandatory,idCO),(swired unused)) .
:def cansstartcsp = :csp {
  eq allIMInStates(getIMsOfTypeOfICO(sIM,mandatory,idCO),(swired unused)) = true .
  eq sIM = (imp(mandatory, idIM, idCO, eidCO, unwired, nIMs, tIMs) sIM') .
  eq sIM = (imp(mandatory, idIM, idCO, eidCO,   wired, nIMs, tIMs) sIM') .
}
:apply(cansstartcsp rd-)
-- Case 1-1-1-1: RS-sstart2 is applied.
-- Case 1-1-1-2: wfs-validCurrent is false (mandatry import of started component should be wired).
-- Case 1-1-1-3: the import is wired.
:def nIMscsp = :csp  { 
  eq nIMs = unused .
  eq nIMs = unwired .
  eq nIMs = wired .
  eq nIMs = swired .
}
:apply(nIMscsp rd-)
-- Case 1-1-1-3-1,2,4: stablyIMSet(S) = false beacuse nIMs is not wired.
-- Case 1-1-1-3-3: the import is stable.
:def tIMscsp = :csp  { 
  eq tIMs = unused .
  eq tIMs = unwired .
  eq tIMs = wired .
  eq tIMs = swired .
}
:apply(tIMscsp rd-)
-- Case 1-1-1-3-3-1: RS-unused is applied.
-- Case 1-1-1-3-3-2: wfs-validTarget is false (mandatry import of started component should be wired).
-- Case 1-1-1-3-3-3: target state of import should not be wired.
-- Case 1-1-1-3-3-4: wired,wired,swired
:def exECOcsp = :csp  { 
  eq existCO(sCO,eidCO) = false .
  eq sCO = (cmp(eidCO,cCOs',nCOs',tCOs') sCO') .
}
:apply(exECOcsp rd-)
-- Case 1-1-1-3-3-4-1: wfs-allIMHaveECO is false.
-- Case 1-1-1-3-3-4-2: 
:def cCOs'csp = :csp  { 
  eq cCOs' = stopped .
  eq cCOs' = started .
  eq cCOs' = sstarted .
}
:def nCOs'csp = :csp  { 
  eq nCOs' = stopped .
  eq nCOs' = started .
  eq nCOs' = sstarted .
}
:def tCOs'csp = :csp  { 
  eq tCOs' = stopped .
  eq tCOs' = started .
  eq tCOs' = sstarted .
}
:apply (cCOs'csp nCOs'csp tCOs'csp rd-)
-- Case 1-1-1-3-3-4-2-2-2-3: started,started,started 
-- is discarged by robust-lemmaN01
--> Proof of robust-lemmaIC done
-->
show proof
close

--> Totally 3 goals should be proved.
