require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ********************************************************************************************
--> trans [RS-unwire3]:
-->    < (cmp(EIDCO, started, stopped, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, swired) SIM),
-->      ListLG >
--> => < (cmp(EIDCO, started, stopped, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, swired) SIM),
-->      (ilog("RS-unwire3:Should Unwire", imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, swired),
-->         mlog(
-->      (cmp(EIDCO, started, stopped, sstarted) SCO), 
-->      (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, swired) SIM)
-->        )) ListLG) > .
--> ********************************************************************************************

open ProofContCont .

  -- Lemmas

  var CO : Component
  var SCO : SetOfComponent
  var SIM : SetOfImport
  var L : ListOfLog

  -- eq robust-lemmaC02(CO,SCO,SIM,L)
  --   = cont(< (CO SCO), SIM, L >) 
  --     when inv(< (CO SCO), SIM, L >) and
  --          inStates(CO,st(started,stopped,sstarted)) .
  ceq inv(< (CO SCO), SIM, L >) = false 
    if inStates(CO,st(started,stopped,sstarted)) and
       cont(< (CO SCO), SIM, L >) = false .
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (cmp(eidCO, started, stopped, sstarted) sCO), 
                (imp(tIM, idIM, iidCO, eidCO, wired, wired, swired) sIM),
                lg >) = true .
}
:def tIMcsp = :csp  { 
  eq tIM = mandatory .
  eq tIM = optional .
}
--> ***************************************************************
--> Step 2-4: Consider which rule can be applied to the next state.
--> ***************************************************************
-- The next rule should be RD-unwire1
--> *************************************************************************************
--> Step 2-5: Split the current case into cases which collectively cover the current case
-->  and the next state of one of the split cases matches to LHS of the current rule.
--> *************************************************************************************
:apply (tIMcsp rd-)
-- Case 1: mandatory is discharged by C01.
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RS-unwire3 done
-->
show proof
close

--> Totally 1 goal should be proved.
