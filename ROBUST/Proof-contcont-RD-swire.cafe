require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> *******************************************************************************************
--> trans [RD-swire]:
-->    < SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  wired, swired, swired) SIM),
-->      ListLG >
--> => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, swired, swired, swired) SIM),
-->      (ilog("RD-swire:Do Stably Wire", imp(TIM, IDIM, IIDCO, EIDCO, swired, swired, swired),
-->       mlog(
-->      SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  wired, swired, swired) SIM)
-->	 )) ListLG) > .
--> *******************************************************************************************
open ProofContCont .

  -- Lemmas
  var SCO : SetOfComponent
  var SIM : SetOfImport
  var L : ListOfLog
  -- eq robust-lemmaC11(SCO,SIM,L)
  --   = cont(< SCO, SIM, L >) 
  --     when inv(< SCO, SIM, L >) and
  --          equivIMSet(SIM) = false .
  ceq cont(< SCO, SIM, L >) = true
    if inv(< SCO, SIM, L >) and  equivIMSet(SIM) = false .

  -- eq robust-lemmaC12(SCO,SIM,L)
  --   = cont(< SCO, SIM, L >) 
  --     when inv(< (CO, SIM, L >) and
  --          equivCOSet(SCO) = false .
  ceq cont(< SCO, SIM, L >) = true
    if inv(< SCO, SIM, L >) and equivCOSet(SCO) = false .

--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sCO, (imp(tIM, idIM, iidCO, eidCO, wired, swired, swired) sIM), lg >) = true .
}
-- Set inv(SS) = true to use lemmas.
:def invctf = :ctf {
  eq inv(< sCO, (imp(tIM, idIM, iidCO, eidCO, swired, swired, swired) sIM),
           (ilog("RD-swire:Do Stably Wire", 
                 imp(tIM, idIM, iidCO, eidCO, swired, swired, swired), (1 + (tdis(sIM) + tdis(sCO)))) lg) >
    ) = true .
}
:apply (invctf rd-)
:def finalcsp = :csp {
  eq (equivIMSet(sIM) and equivCOSet(sCO)) = true .
  eq equivIMSet(sIM) = false .
  eq equivCOSet(sCO) = false .
}
:apply (finalcsp rd-)
-- robust-lemmaC11 rejects 1-1-1-2.
-- robust-lemmaC12 rejects 1-1-1-3.
--> Proof of (2) inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS).
-->   for Rule RD-swire done
-->
show proof
close

--> Totally 1 goal should be proved.
