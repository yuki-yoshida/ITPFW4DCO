require Template ../lib/Template.cafe
require LIST ../lib/LIST.cafe
provide DomainModel

-- An abstract model for Robust Reconfiguration Algorithm by F. Boyer et al.

-- There are two kinds of objects:
-- Component(CO): a component of which a cloud system composes.
-- Import(IM): a directed relationship of two components
--  which means one of them (the importer) requires a service provided by other (exporter).

module! COMPONENT {
  -- Sorts
  [Component COID COType COState]
  -- Constructor
  -- cmp(ID, CState, NState, TState) is a Component where the identifier is ID,
  --    the current local state is CState, the possible next local state is NState, and
  --    the target local state is TState
  op cmp : COID COState COState COState -> Component {constr}

  -- Selectors
  op id : Component -> COID
  op type : Component -> COType
  op state : Component -> COState
  op next : Component -> COState
  op target : Component -> COState
  var IDCO : COID
  vars CSCO NSCO TSCO : COState
  eq id(cmp(IDCO,CSCO,NSCO,TSCO)) = IDCO .
  eq state(cmp(IDCO,CSCO,NSCO,TSCO)) = CSCO .
  eq next(cmp(IDCO,CSCO,NSCO,TSCO)) = NSCO .
  eq target(cmp(IDCO,CSCO,NSCO,TSCO)) = TSCO .
}

module! COMPONENTfuns {
  -- Instantiation of Template
  extending(OBJECTBASE3(
	COMPONENT {sort Object -> Component,
		   sort ObjID -> COID,
		   sort ObjType -> COType,
		   sort ObjState -> COState,
		   op state2 -> next,
		   op state3 -> target})
	* {sort ObjIDLt -> COIDLt,
	   sort ObjTypeLt -> COTypeLt,
	   sort ObjStateLt -> COStateLt,
	   sort SetOfObject -> SetOfComponent,
	   sort SetOfObjState -> SetOfCOState,
	   op empObj -> empCO,
	   op empState -> empSCO,
	   op existObj -> existCO,
	   op existObjInStates -> existCOInStates,
	   op existObjInStates2 -> existCOInNextStates,
	   op existObjInStates3 -> existCOInTargetStates,
	   op uniqObj -> uniqCO,
	   op #ObjInStates -> #ComponentInStates,
	   op #ObjInStates2 -> #ComponentInNextStates,
	   op #ObjInStates3 -> #ComponentInTargetStates,
	   op getObject -> getComponent,
	   op allObjInStates -> allCOInStates,
	   op allObjInStates2 -> allCOInNextStates,
	   op allObjInStates3 -> allCOInTargetStates,
	   op allObjNotInStates -> allCONotInStates,
	   op allObjNotInStates2 -> allCONotInNextStates,
	   op allObjNotInStates3 -> allCONotInTargetStates,
	   op someObjInStates -> someCOInStates,
	   op someObjInStates2 -> someCOInNextStates,
	   op someObjInStates3 -> someCOInTargetStates})

  -- Local States
  ops notalive stopped started failed : -> COStateLt {constr}
  eq (notalive > stopped) = true .
  eq (stopped > started) = true .
  eq (started > failed) = true .
}

module! IMPORT {
  protecting(COMPONENT)
  -- Sorts
  [Import IMID IMType IMState]
  -- Constructor
  -- imp(Type, ID, IID, EID, CState, NState, TState) is an Imports where the identifier is ID,
  --    the importer Component is IID, the exporter Component is EID,
  --    the current local state is CState, the next local state is NState, and
  --    the target local state is TState
  op imp : IMType IMID COID COID IMState IMState IMState -> Import {constr}

  -- Selectors
  op id : Import -> IMID
  op type : Import -> IMType
  op state : Import -> IMState
  op next : Import -> IMState
  op target : Import -> IMState
  op importer : Import -> COID
  op exporter : Import -> COID
  var TIM : IMType
  var IDIM : IMID
  vars IIDCO EIDCO : COID
  vars CSIM NSIM TSIM : IMState
  eq type(imp(TIM,IDIM,IIDCO,EIDCO,CSIM,NSIM,TSIM)) = TIM .
  eq id(imp(TIM,IDIM,IIDCO,EIDCO,CSIM,NSIM,TSIM)) = IDIM .
  eq state(imp(TIM,IDIM,IIDCO,EIDCO,CSIM,NSIM,TSIM)) = CSIM .
  eq next(imp(TIM,IDIM,IIDCO,EIDCO,CSIM,NSIM,TSIM)) = NSIM .
  eq target(imp(TIM,IDIM,IIDCO,EIDCO,CSIM,NSIM,TSIM)) = TSIM .
  eq importer(imp(TIM,IDIM,IIDCO,EIDCO,CSIM,NSIM,TSIM)) = IIDCO .
  eq exporter(imp(TIM,IDIM,IIDCO,EIDCO,CSIM,NSIM,TSIM)) = EIDCO .
}

module! IMPORTfuns {
  protecting(COMPONENTfuns)

  -- Instantiation of Template
  extending(OBJECTBASE3(
	IMPORT {sort Object -> Import,
		sort ObjID -> IMID,
		sort ObjType -> IMType,
		sort ObjState -> IMState,
		op state2 -> next,
		op state3 -> target})
	* {sort ObjIDLt -> IMIDLt,
	   sort ObjTypeLt -> IMTypeLt,
	   sort ObjStateLt -> IMStateLt,
	   sort SetOfObject -> SetOfImport,
	   sort SetOfObjState -> SetOfIMState,
	   op empObj -> empIM,
	   op empState -> empSIM,
	   op existObj -> existIM,
	   op existObjInStates -> existIMInStates,
	   op existObjInStates2 -> existIMInNextStates,
	   op existObjInStates3 -> existIMInTargetStates,
	   op uniqObj -> uniqIM,
	   op #ObjInStates -> #ImportInStates,
	   op #ObjInStates2 -> #ImportInNextStates,
	   op #ObjInStates3 -> #ImportInTargetStates,
	   op getObject -> getImport,
	   op allObjInStates -> allIMInStates,
	   op allObjInStates2 -> allIMInNextStates,
	   op allObjInStates3 -> allIMInTargetStates,
	   op allObjOfTypeInStates -> allIMOfTypeInStates,
	   op allObjOfTypeInStates2 -> allIMOfTypeInNextStates,
	   op allObjOfTypeInStates3 -> allIMOfTypeInTargetStates,
	   op allObjNotInStates -> allIMNotInStates,
	   op allObjNotInStates2 -> allIMNotInNextStates,
	   op allObjNotInStates3 -> allIMNotInTargetStates,
	   op someObjInStates -> someIMInStates,
	   op someObjInStates2 -> someIMInNextStates,
	   op someObjInStates3 -> someIMInTargetStates})

  -- Types
  ops mandatory optional : -> IMTypeLt

  -- Local States
  ops unused wired unwired : -> IMStateLt {constr}
  eq (unused > wired) = true .
  eq (unused > unwired) = true .
  eq (wired > unwired) = true .
}

module! LINKS {
  extending(OBJLINKMANY2ONE3(
	IMPORTfuns {sort Object -> Import,
		    sort ObjID -> IMID,
		    sort ObjType -> IMType,
		    sort ObjState -> IMState,
		    sort SetOfObject -> SetOfImport,
		    sort SetOfObjState -> SetOfIMState,
		    op empObj -> empIM,
		    op state2 -> next,
		    op state3 -> target,
		    op getObject(X:SetOfObject,Y:ObjID) 
		       -> getImport(X:SetOfImport,Y:IMID),
		    op existObj(X:SetOfObject,Y:ObjID)
		       -> existIM(X:SetOfImport,Y:IMID),
		    op allObjInStates(X:SetOfObject,Y:SetOfObjState)
		       -> allIMInStates(X:SetOfImport,Y:SetOfIMState),
		    op allObjInStates2(X:SetOfObject,Y:SetOfObjState)
		      -> allIMInNextStates(X:SetOfImport,Y:SetOfIMState),
		    op allObjInStates3(X:SetOfObject,Y:SetOfObjState)
		      -> allIMInTargetStates(X:SetOfImport,Y:SetOfIMState),
		    sort LObject -> Component,
		    sort LObjID -> COID,
		    sort LObjState -> COState,
		    sort SetOfLObject -> SetOfComponent,
		    sort SetOfLObjState -> SetOfCOState,
		    op link -> importer,
		    op empLObj -> empCO,
		    op getObject(X:SetOfLObject,Y:LObjID) 
		      -> getComponent(X:SetOfComponent,Y:COID),
		    op existObj(X:SetOfLObject,Y:LObjID)
		      -> existCO(X:SetOfComponent,Y:COID),
		    op allObjInStates(X:SetOfLObject,Y:SetOfLObjState)
		      -> allCOInStates(X:SetOfComponent,Y:SetOfCOState),
		    op allObjInStates2(X:SetOfLObject,Y:SetOfLObjState)
		      -> allCOInNextStates(X:SetOfComponent,Y:SetOfCOState),
		    op allObjInStates3(X:SetOfLObject,Y:SetOfLObjState)
 		      -> allCOInTargetStates(X:SetOfComponent,Y:SetOfCOState),
		    op existObjInStates -> existCOInStates,
		    op existObjInStates2 -> existCOInNextStates,
		    op existObjInStates3 -> existCOInTargetStates})
	* {op hasLObj -> hasImporter,
	   op getXOfZ -> getICOOfIM,
	   op getZsOfX -> getIMsOfICO,
	   op getZsOfTypeOfX -> getIMsOfTypeOfICO,
	   op getZsOfTypeOfXInStates -> getIMsOfTypeOfICOInStates,
	   op getZsOfTypeOfXInStates2 -> getIMsOfTypeOfICOInNextStates,
	   op getZsOfTypeOfXInStates3 -> getIMsOfTypeOfICOInTargetStates,
	   op getZsOfXInStates -> getIMsOfICOInStates,
	   op getZsOfXInStates2 -> getIMsOfICOInNextStates,
	   op getZsOfXInStates3 -> getIMsOfICOInTargetStates,
	   op getXsOfZs -> getICOsOfIMs,
	   op getXsOfZsInStates -> getICOsOfIMsInStates,
	   op getXsOfZsInStates2 -> getICOsOfIMsInNextStates,
	   op getXsOfZsInStates3 -> getICOsOfIMsInTargetStates,
	   op getZsOfXs -> getIMsOfICOs,
	   op getZsOfXsInStates -> getIMsOfICOsInStates,
	   op getZsOfXsInStates2 -> getIMsOfICOsInNextStates,
	   op getZsOfXsInStates3 -> getIMsOfICOsInTargetStates,
	   op allZHaveX -> allIMHaveICO,
	   op allZOfXInStates -> allIMOfICOInStates,
	   op allZOfXInStates2 -> allIMOfICOInNextStates,
	   op allZOfXInStates3 -> allIMOfICOInTargetStates,
	   op allZOfTypeOfXInStates -> allIMOfTypeOfICOInStates,
	   op allZOfTypeOfXInStates2 -> allIMOfTypeOfICOInNextStates,
	   op allZOfTypeOfXInStates3 -> allIMOfTypeOfICOInTargetStates,
	   op ifOfXThenInStates -> ifOfICOThenInStates,
	   op ifOfXThenInStates2 -> ifOfICOThenInNextStates,
	   op ifOfXThenInStates3 -> ifOfICOThenInTargetStates,
	   op ifXInStatesThenZInStates -> ifICOInStatesThenIMInStates,
	   op ifXInStatesThenZInStates2 -> ifICOInNextStatesThenIMInStates,
	   op ifXInStatesThenZInStates3 -> ifICOInTargetStatesThenIMInStates}
	)

  extending(OBJLINKMANY2ONE3(
	IMPORTfuns {sort Object -> Import,
		    sort ObjID -> IMID,
		    sort ObjType -> IMType,
		    sort ObjState -> IMState,
		    sort SetOfObject -> SetOfImport,
		    sort SetOfObjState -> SetOfIMState,
		    op empObj -> empIM,
		    op state2 -> next,
		    op state3 -> target,
		    op getObject(X:SetOfObject,Y:ObjID) 
		    -> getImport(X:SetOfImport,Y:IMID),
		    op existObj(X:SetOfObject,Y:ObjID)
		    -> existIM(X:SetOfImport,Y:IMID),
		    op allObjInStates(X:SetOfObject,Y:SetOfObjState)
		    -> allIMInStates(X:SetOfImport,Y:SetOfIMState),
		    op allObjInStates2(X:SetOfObject,Y:SetOfObjState)
		    -> allIMInNextStates(X:SetOfImport,Y:SetOfIMState),
		    op allObjInStates3(X:SetOfObject,Y:SetOfObjState)
		    -> allIMInTargetStates(X:SetOfImport,Y:SetOfIMState),
		    sort LObject -> Component,
		    sort LObjID -> COID,
		    sort LObjState -> COState,
		    sort SetOfLObject -> SetOfComponent,
		    sort SetOfLObjState -> SetOfCOState,
		    op link -> exporter,
		    op empLObj -> empCO,
		    op getObject(X:SetOfLObject,Y:LObjID) 
		      -> getComponent(X:SetOfComponent,Y:COID),
		    op existObj(X:SetOfLObject,Y:LObjID)
		      -> existCO(X:SetOfComponent,Y:COID),
		    op allObjInStates(X:SetOfLObject,Y:SetOfLObjState)
		      -> allCOInStates(X:SetOfComponent,Y:SetOfCOState),
		    op allObjInStates2(X:SetOfLObject,Y:SetOfLObjState)
		      -> allCOInNextStates(X:SetOfComponent,Y:SetOfCOState),
		    op allObjInStates3(X:SetOfLObject,Y:SetOfLObjState)
		      -> allCOInTargetStates(X:SetOfComponent,Y:SetOfCOState),
		    op existObjInStates -> existCOInStates,
		    op existObjInStates2 -> existCOInNextStates,
		    op existObjInStates3 -> existCOInTargetStates})
	* {op hasLObj -> hasExporter,
	   op getXOfZ -> getECOOfIM,
	   op getZsOfX -> getIMsOfECO,
	   op getZsOfTypeOfX -> getIMsOfTypeOfECO,
	   op getZsOfTypeOfXInStates -> getIMsOfTypeOfECOInStates,
	   op getZsOfTypeOfXInStates2 -> getIMsOfTypeOfECOInNextStates,
	   op getZsOfTypeOfXInStates3 -> getIMsOfTypeOfECOInTargetStates,
	   op getZsOfXInStates -> getIMsOfECOInStates,
	   op getZsOfXInStates2 -> getIMsOfECOInNextStates,
	   op getZsOfXInStates3 -> getIMsOfECOInTargetStates,
	   op getXsOfZs -> getECOsOfIMs,
	   op getXsOfZsInStates -> getECOsOfIMsInStates,
	   op getXsOfZsInStates2 -> getECOsOfIMsInNextStates,
	   op getXsOfZsInStates3 -> getECOsOfIMsInTargetStates,
	   op getZsOfXs -> getIMsOfECOs,
	   op getZsOfXsInStates -> getIMsOfECOsInStates,
	   op getZsOfXsInStates2 -> getIMsOfECOsInNextStates,
	   op getZsOfXsInStates3 -> getIMsOfECOsInTargetStates,
	   op allZHaveX -> allIMHaveECO,
	   op allZOfXInStates -> allIMOfECOInStates,
	   op allZOfXInStates2 -> allIMOfECOInNextStates,
	   op allZOfXInStates3 -> allIMOfECOInTargetStates,
	   op ifOfXThenInStates -> ifOfECOThenInStates,
	   op ifOfXThenInStates2 -> ifOfECOThenInNextStates,
	   op ifOfXThenInStates3 -> ifOfECOThenInTargetStates,
	   op ifXInStatesThenZInStates -> ifECOInStatesThenIMInStates,
	   op ifXInStatesThenZInStates2 -> ifECOInNextStatesThenIMInStates,
	   op ifXInStatesThenZInStates3 -> ifECOInTargetStatesThenIMInStates}
	)

}

module! LOG {
  protecting(IMPORT)
  protecting(STRING)
  [Log]
  op clog : String Component Nat -> Log {constr}
  op clog : String Component -> Log {constr}
  op ilog : String Import Nat -> Log {constr}
  op ilog : String Import -> Log {constr}
}

module! STATE {
  protecting(LINKS)
  protecting(LIST(LOG {sort Elt -> Log})
      * {sort List -> ListOfLog,
      	 op empty -> empLog})

  [State]
  -- A State consists of
  --  a set of current Components and a set of current Imports,
  --  a set of target Components and a set of target Imports,
  --  and set of logs
  op <_,_,_> :
    SetOfComponent SetOfImport
	ListOfLog
      -> State {constr}

  var SCO : SetOfComponent
  var SIM : SetOfImport
  var L : ListOfLog
  op cmps : State -> SetOfComponent
  op imps : State -> SetOfImport
  eq cmps(< SCO,SIM,L >) = SCO .
  eq imps(< SCO,SIM,L >) = SIM .

  pred wfs : State
  pred init : State
  pred final : State
  pred inv : State
}

module! STATECyclefuns {
  protecting(STATE)

  var CO : Component
  var SetCO : SetOfComponent
  var SetIM : SetOfImport
  var L : ListOfLog

  op getAllCOInState : State -> SetOfComponent
  eq getAllCOInState(< SetCO,SetIM,L >) = SetCO .

  op DDSCO : Component State -> SetOfComponent
  eq DDSCO(CO,< SetCO,SetIM,L >)
    = getECOsOfIMs(SetCO,getIMsOfTypeOfICO(SetIM,mandatory,id(CO))) .
}

module! STATEfuns {
  protecting(STATE)

  vars SCO SCO0 : SetOfComponent
  vars SIM SIM0 : SetOfImport
  var L : ListOfLog

  vars IDCO IIDCO EIDCO : COID 
  vars CSCO NSCO TSCO : COState
  var IDIM : IMID
  var TIM : IMType
  vars CSIM NSIM TSIM : IMState
  var StCO : SetOfCOState
  var StIM : SetOfIMState
  var S : State

  extending(CYCLEPRED(
  	STATECyclefuns {sort Object -> Component,
  	       		sort SetOfObject -> SetOfComponent,
			sort ObjState -> COState,
			sort SetOfObjState -> SetOfCOState,
			op DDSC -> DDSCO,
  	       		op empObj -> empCO,
			op someObjInStates -> someCOInStates,
  	       		op getAllObjInState -> getAllCOInState})
  	* {op noCycleC -> noCOCycle}
  	)

  pred stableCOSet : SetOfComponent
  eq stableCOSet(empCO) = true .
  eq stableCOSet((cmp(IDCO,CSCO,NSCO,TSCO) SCO))
     = (CSCO = NSCO) and stableCOSet(SCO) .

  pred stableIMSet : SetOfImport
  eq stableIMSet(empIM) = true .
  eq stableIMSet((imp(TIM,IDIM,IIDCO,IDCO,CSIM,NSIM,TSIM) SIM))
     = (CSIM = NSIM) and stableIMSet(SIM) .

  pred equivCOSet : SetOfComponent
  eq equivCOSet(empCO) = true .
  eq equivCOSet(cmp(IDCO,CSCO,NSCO,TSCO) SCO)
     = (CSCO = NSCO) and (CSCO = TSCO) and equivCOSet(SCO) .

  pred equivIMSet : SetOfImport
  eq equivIMSet(empIM) = true .
  eq equivIMSet(imp(TIM,IDIM,IIDCO,IDCO,CSIM,NSIM,TSIM) SIM)
     = (CSIM = NSIM) and (CSIM = TSIM) and equivIMSet(SIM) .

  pred validTargetComponent : SetOfComponent SetOfComponent SetOfImport
  eq validTargetComponent(empCO,SCO0,SIM0) = true .
  eq validTargetComponent((cmp(IDCO,CSCO,NSCO,started) SCO),SCO0,SIM0)
     = allIMInTargetStates(getIMsOfTypeOfICO(SIM0,mandatory,IDCO),(wired unused)) and
       allCOInTargetStates(getECOsOfIMs(SCO0,getIMsOfICOInTargetStates(SIM0,IDCO,wired)),started) and
       validTargetComponent(SCO,SCO0,SIM0) .
  ceq validTargetComponent((cmp(IDCO,CSCO,NSCO,TSCO) SCO),SCO0,SIM0)
     = validTargetComponent(SCO,SCO0,SIM0)
     if not (TSCO = started) .

  pred validTargetImport : SetOfImport SetOfComponent
  eq validTargetImport(empIM,SCO0) = true .
  eq validTargetImport((imp(TIM,IDIM,IIDCO,EIDCO,CSIM,NSIM,wired) SIM),SCO0) 
     = allCOInTargetStates(getComponent(SCO0,IIDCO),(started stopped)) and
       allCOInTargetStates(getComponent(SCO0,EIDCO),(started stopped)) and
       validTargetImport(SIM,SCO0) .
  ceq validTargetImport((imp(TIM,IDIM,IIDCO,IDCO,CSIM,NSIM,TSIM) SIM),SCO0)
     = validTargetImport(SIM,SCO0)
     if not (TSIM = wired) .

  pred validTarget : SetOfComponent SetOfImport
  eq validTarget(SCO,SIM)
     = validTargetComponent(SCO,SCO,SIM) and validTargetImport(SIM,SCO) .
  -- and noCycleTraget(SCO,SIM) .

  pred validCurrentComponent : SetOfComponent SetOfComponent SetOfImport
  eq validCurrentComponent(empCO,SCO0,SIM0) = true .
  eq validCurrentComponent((cmp(IDCO,started,NSCO,TSCO) SCO),SCO0,SIM0)
     = allIMInStates(getIMsOfTypeOfICO(SIM0,mandatory,IDCO),(wired unused)) and
       allCOInStates(getECOsOfIMs(SCO0,getIMsOfICOInStates(SIM0,IDCO,wired)),started) and
       validCurrentComponent(SCO,SCO0,SIM0) .
  ceq validCurrentComponent((cmp(IDCO,CSCO,NSCO,TSCO) SCO),SCO0,SIM0)
     = validCurrentComponent(SCO,SCO0,SIM0)
     if not (CSCO = started) .

  pred validCurrentImport : SetOfImport SetOfComponent
  eq validCurrentImport(empIM,SCO0) = true .
  eq validCurrentImport((imp(TIM,IDIM,IIDCO,EIDCO,wired,NSIM,TSIM) SIM),SCO0) 
     = allCOInStates(getComponent(SCO0,IIDCO),(started stopped)) and
       allCOInStates(getComponent(SCO0,EIDCO),(started stopped)) and
       validCurrentImport(SIM,SCO0) .
  ceq validCurrentImport((imp(TIM,IDIM,IIDCO,IDCO,CSIM,NSIM,TSIM) SIM),SCO0)
     = validCurrentImport(SIM,SCO0)
     if not (CSIM = wired) .

  pred validCurrent : SetOfComponent SetOfImport
  eq validCurrent(SCO,SIM)
     = validCurrentComponent(SCO,SCO,SIM) and validCurrentImport(SIM,SCO) .
  -- and noCycleTraget(SCO,SIM) .

  pred allCOInBothStates : SetOfComponent SetOfCOState 
  eq allCOInBothStates(empCO,StCO) = true .
  eq allCOInBothStates((cmp(IDCO,CSCO,NSCO,TSCO) SCO),StCO) 
     = (CSCO in StCO) and (NSCO in StCO) and allCOInBothStates(SCO,StCO) .

  -- op getIMsOfECOInNextStates : SetOfImport COID SetOfIMState -> SetOfImport
  -- eq getIMsOfECOInNextStates(empIM,IDCO,StIM) = empIM .
  -- ceq getIMsOfECOInNextStates((imp(TIM,IDIM,IIDCO,IDCO,CSIM,NSIM,TSIM) SIM),IDCO,StIM) 
  --    = (imp(TIM,IDIM,IIDCO,IDCO,CSIM,NSIM,TSIM) getIMsOfECOInNextStates(SIM,IDCO,StIM))
  --    if NSIM in StIM .
  -- ceq getIMsOfECOInNextStates((imp(TIM,IDIM,IIDCO,EIDCO,CSIM,NSIM,TSIM) SIM),IDCO,StIM) 
  --    = getIMsOfECOInNextStates(SIM,IDCO,StIM)
  --    if not EIDCO = IDCO or not NSIM in StIM .

  -- pred allIMInNextStates : SetOfImport SetOfIMState 
  -- eq allIMInNextStates(empIM,StIM) = true .
  -- eq allIMInNextStates((imp(TIM,IDIM,IIDCO,IDCO,CSIM,NSIM,TSIM) SIM),StIM) 
  --    = (NSIM in StIM) and allIMInNextStates(SIM,StIM) .

  pred allIMInBothStates : SetOfImport SetOfIMState 
  eq allIMInBothStates(empIM,StIM) = true .
  eq allIMInBothStates((imp(TIM,IDIM,IIDCO,IDCO,CSIM,NSIM,TSIM) SIM),StIM) 
     = (CSIM in StIM) and (NSIM in StIM) and allIMInBothStates(SIM,StIM) .

  var CO0 : Component
  var IM0 : Import

  pred canStart : COID SetOfComponent SetOfImport
  pred allIMStablyWired : SetOfImport SetOfComponent SetOfImport
  pred isIMStablyWired : Import SetOfComponent SetOfImport
  pred allCOStabllyStarted : SetOfComponent SetOfComponent SetOfImport
  pred isCOStabllyStarted : Component SetOfComponent SetOfImport

  eq isIMStablyWired(imp(TIM,IDIM,IIDCO,IDCO,CSIM,NSIM,TSIM),SCO,SIM)
     = (CSIM in (wired unused)) and
       (CSIM == TSIM) and
       allCOStabllyStarted(getComponent(SCO,IDCO),SCO,SIM) .

  eq allIMStablyWired(empIM,SCO0,SIM0) = true .
  eq allIMStablyWired((IM0 SIM),SCO0,SIM0)
     = isIMStablyWired(IM0,SCO0,SIM0) and allIMStablyWired(SIM,SCO0,SIM0) .

  eq isCOStabllyStarted(cmp(IDCO,CSCO,NSCO,TSCO),SCO,SIM)
     = (CSCO == started) and
       (TSCO == started) and
       allIMStablyWired(getIMsOfTypeOfICO(SIM,mandatory,IDCO),SCO,SIM) .

  eq allCOStabllyStarted(empCO,SCO0,SIM0) = true .
  eq allCOStabllyStarted((CO0 SCO),SCO0,SIM0)
      = isCOStabllyStarted(CO0,SCO0,SIM0) and allCOStabllyStarted(SCO,SCO0,SIM0) .

  eq canStart(IDCO,SCO,SIM)
     = allIMStablyWired(getIMsOfTypeOfICO(SIM,mandatory,IDCO),SCO,SIM) and
       allCOStabllyStarted(getECOsOfIMs(SCO,getIMsOfICOInStates(SIM,IDCO,wired)),SCO,SIM) .

  pred wfs-uniqCO : State
  eq wfs-uniqCO(< SCO,SIM,L >) = uniqCO(SCO) .

  pred wfs-uniqIM : State
  eq wfs-uniqIM(< SCO,SIM,L >) = uniqIM(SIM) .

  pred wfs-allIMHaveICO : State
  eq wfs-allIMHaveICO(< SCO,SIM,L >) = allIMHaveICO(SIM,SCO) .

  pred wfs-allIMHaveECO : State
  eq wfs-allIMHaveECO(< SCO,SIM,L >) = allIMHaveECO(SIM,SCO) .
  
  pred wfs-validTarget : State
  eq wfs-validTarget(< SCO,SIM,L >) = validTarget(SCO,SIM) .

  pred wfs-validCurrent : State
  eq wfs-validCurrent(< SCO,SIM,L >) = validCurrent(SCO,SIM) .

--> **************************************
--> Step 0-1: Define init(S) and final(S).
--> **************************************
  -- wfs is a conjunction of invariants which are intentionally imposed by the init condition.
  -- Since too long wfs causes a large evalutaion cost, define wfs minimally for each use case.
  eq [:nonexec]: wfs(S)
     = wfs-uniqCO(S) and wfs-uniqIM(S) and 
       wfs-allIMHaveICO(S) and wfs-allIMHaveECO(S) and
       wfs-validTarget(S) and wfs-validCurrent(S) .

  eq init(< SCO,SIM,L >)
     = wfs(< SCO,SIM,L >) and
       stableCOSet(SCO) and stableIMSet(SIM) and
       not final(< SCO,SIM,L >) and
       noCOCycle(< SCO,SIM,L >) .

  eq final(< SCO,SIM,L >)
     = equivCOSet(SCO) and equivIMSet(SIM) .

}

-- Architecture Invariants
-- (1) All started components have their mandatory imports wired.
-- (2) All started components are wired only to started components.
-- (3) There are no wires to/from failed or destructed components.
-- (4) There are no cycles through mandatory imports

-- Rules to keep invariants
-- [RD-start]:A Component can start
--    all its mandatory Imports are wired to started Components and				
--    (all its optional Imports to stopped Components are unwired.)
--    all its optional Imports are wired only to started components.
-- [RD-stop]:A Component can be stopped when there is no started component importing it.
-- [RD-wire1/2]An Import can be wired when its Component is stopped or its export Component is started.
-- [RD-unwire1]:An optional Import can be unwired anytime.
-- A mandatory Import can be unwired when its Component is stopped.
-- A mandatory Import should be wired to started Component when its Component should start.
-- An export Component of a mandatory Import should start when its import component should start.
-- An optional Import to stopped Compoent should be unwired when its Component should start.
-- [RS-unwire3]:An optional Import of a started Component should be unwired when its export Component should stop.
-- [RS-stop3]:A Component should stop when its mandatory Import is wired to a Component which should stop.
-- [RS-stop2]:A Component should stop when its mandatory Import should be unwired.

module! STATERules {
  protecting(STATEfuns)

  op m : State -> Nat
  op mlog : SetOfComponent SetOfImport -> Nat

  -- Variables
  vars IDCO IIDCO EIDCO : COID 
  vars CSCO NSCO TSCO TSCO' : COState
  var IDIM : IMID
  var TIM : IMType
  vars CSIM NSIM TSIM : IMState

  var SCO : SetOfComponent -- current Components
  var SIM : SetOfImport    -- current Imports

  var ListLG : ListOfLog

  -- A Component should be started if it is targeted.
  trans [RS-start1]:
     < (cmp(IDCO, stopped, stopped, started) SCO), SIM,
       ListLG >
  => < (cmp(IDCO, stopped, started, started) SCO), SIM,
       (clog("RS-start1:Should Start", cmp(IDCO, stopped, started, started),
	  mlog(
       (cmp(IDCO, stopped, stopped, started) SCO), SIM
	 )) ListLG) > .

  -- A Component should be stopped if it is targeted.
  trans [RS-stop1]:
     < (cmp(IDCO, started, started, stopped) SCO), SIM,
       ListLG >
  => < (cmp(IDCO, started, stopped, stopped) SCO), SIM,
       (clog("RS-stop1:Should Stop", cmp(IDCO, started, stopped, stopped),
	  mlog(
       (cmp(IDCO, started, started, stopped) SCO), SIM
	 )) ListLG) > .

  -- A Component should stop when its mandatory Import should be unwired.
  trans [RS-stop2]:
     < (cmp(IDCO, started, started, started) SCO),
       (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM),
        ListLG >
  => < (cmp(IDCO, started, stopped, started) SCO),
       (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM),
       (clog("RS-stop2:Should Stop", cmp(IDCO, started, stopped, started),
	  mlog(
       (cmp(IDCO, started, started, started) SCO),
       (imp(mandatory, IDIM, IDCO, EIDCO, wired, unwired, TSIM) SIM)
	 )) ListLG) > .

  ctrans [RD-start]:
     < (cmp(IDCO, stopped, started, TSCO) SCO), SIM,
       ListLG >
  => < (cmp(IDCO, started, started, TSCO) SCO), SIM,
       (clog("RD-start:Do Start", cmp(IDCO, started, started, TSCO),
	  mlog(
       (cmp(IDCO, stopped, started, TSCO) SCO), SIM
	 )) ListLG) >
     if canStart(IDCO,SCO,SIM) .
--     if allIMInBothStates(getIMsOfTypeOfICO(SIM,mandatory,IDCO),(wired unused)) and
--        allCOInBothStates(getECOsOfIMs(SCO,getIMsOfICOInStates(SIM,IDCO,wired)),started) .

  -- An Import should be wired if it is targeted.
  trans [RS-wire]:
     < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, wired) SIM),
       ListLG >
  => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired,   wired, wired) SIM),
       (ilog("RS-wire:Should Wire", imp(TIM, IDIM, IIDCO, EIDCO, unwired, wired, wired),
	  mlog(
       SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, wired) SIM)
	 )) ListLG) > .

  -- An Import should be unwired if it will be unwired.
  trans [RS-unwire1]:
     < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, unwired) SIM),
       ListLG >
  => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, unwired) SIM),
       (ilog("RS-unwire1:Should Unwire", imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, unwired),
	  mlog(
       SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, unwired) SIM)
	 )) ListLG) > .

  -- An Import of a started Component should be unwired when its export Component should stop.
  trans [RS-unwire2]:
     < (cmp(IIDCO, started, NSCO, TSCO) cmp(EIDCO, started, stopped, TSCO') SCO), 
       (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, wired) SIM),
       ListLG >
  => < (cmp(IIDCO, started, NSCO, TSCO) cmp(EIDCO, started, stopped, TSCO') SCO), 
       (imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, wired) SIM),
       (ilog("RS-unwire2:Should Unwire", imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, wired),
	  mlog(
       (cmp(IIDCO, started, NSCO, TSCO) cmp(EIDCO, started, stopped, TSCO') SCO), 
       (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, wired) SIM)
	 )) ListLG) > .

  -- An Import should be unwired if it will be not used.
  trans [RS-unwire3]:
     < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, unused) SIM),
       ListLG >
  => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, unused) SIM),
       (ilog("RS-unwire3:Should Unwire", imp(TIM, IDIM, IIDCO, EIDCO, wired, unwired, unused),
	  mlog(
       SCO, (imp(TIM, IDIM, IIDCO, EIDCO, wired,   wired, unused) SIM)
	 )) ListLG) > .

  -- An Unused Import should be firstly unwired if it will be wired.
  trans [RS-unwire4]:
     < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unused,  unused, wired) SIM),
       ListLG >
  => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unused, unwired, wired) SIM),
       (ilog("RS-unwire4:Should Unwire", imp(TIM, IDIM, IIDCO, EIDCO, unused, unwired, wired),
	  mlog(
       SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unused,  unused, wired) SIM)
	 )) ListLG) > .

  -- An unwired Import should be unused if it will be not used.
  trans [RS-unused]:
     < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, unused) SIM),
       ListLG >
  => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired,  unused, unused) SIM),
       (ilog("RS-unused:Should be Unused", imp(TIM, IDIM, IIDCO, EIDCO, unwired, unused, unused),
	  mlog(
       SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, unused) SIM)
	 )) ListLG) > .

  -- An Import can be wired when its Component is stopped or its export Component is started.
  trans [RD-wire1]:
     < (cmp(IIDCO, stopped, stopped, TSCO) SCO), 
       (imp(TIM, IDIM, IIDCO, EIDCO, unwired, wired, wired) SIM),
       ListLG >
  => < (cmp(IIDCO, stopped, stopped, TSCO) SCO), 
       (imp(TIM, IDIM, IIDCO, EIDCO,   wired, wired, wired) SIM),
       (ilog("RD-wire1:Do Wire", imp(TIM, IDIM, IIDCO, EIDCO, wired, wired, wired),
	  mlog(
       (cmp(IIDCO, stopped, stopped, TSCO) SCO), 
       (imp(TIM, IDIM, IIDCO, EIDCO, unwired, wired, wired) SIM)
	 )) ListLG) > .

  trans [RD-wire2]:
     < (cmp(EIDCO, started, started, TSCO) SCO), 
       (imp(TIM, IDIM, IIDCO, EIDCO, unwired, wired, wired) SIM),
       ListLG >
  => < (cmp(EIDCO, started, started, TSCO) SCO), 
       (imp(TIM, IDIM, IIDCO, EIDCO,   wired, wired, wired) SIM),
       (ilog("RD-wire2:Do Wire", imp(TIM, IDIM, IIDCO, EIDCO, wired, wired, wired),
	  mlog(
       (cmp(EIDCO, started, started, TSCO) SCO), 
       (imp(TIM, IDIM, IIDCO, EIDCO, unwired, wired, wired) SIM)
	 )) ListLG) > .

  -- An Optional Imports can be unwired anytime.
  -- N.B. "Anytime" means the component is not failed.
  ctrans [RD-unwire1]:
     < (cmp(IDCO, CSCO, CSCO, TSCO) SCO),
       (imp(optional, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM),
       ListLG >
  => < (cmp(IDCO, CSCO, CSCO, TSCO) SCO),
       (imp(optional, IDIM, IDCO, EIDCO, unwired, unwired, TSIM) SIM),
       (ilog("RD-unwire1:Do Unwire", imp(optional, IDIM, IDCO, EIDCO, unwired, unwired, TSIM),
	  mlog(
       (cmp(IDCO, CSCO, CSCO, TSCO) SCO),
       (imp(optional, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM)
	 )) ListLG) >
     if not (CSCO = failed) .

  -- A Mandatory Imports can be unwired only if the component is stopped.
  trans [RD-unwire2]:
     < (cmp(IDCO, stopped, NSCO, TSCO) SCO), 
       (imp(mandatory, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM),
       ListLG >
  => < (cmp(IDCO, stopped, NSCO, TSCO) SCO),
       (imp(mandatory, IDIM, IDCO, EIDCO, unwired, unwired, TSIM) SIM),
       (ilog("RD-unwire2:Do Unwire", imp(mandatory, IDIM, IDCO, EIDCO, unwired, unwired, TSIM),
	  mlog(
       (cmp(IDCO, stopped, NSCO, TSCO) SCO), 
       (imp(mandatory, IDIM, IDCO, EIDCO,   wired, unwired, TSIM) SIM)
	 )) ListLG) > .

  trans [RD-unwire3]:
     < SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  unused, unwired, TSIM) SIM),
       ListLG >
  => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, TSIM) SIM),
       (ilog("RD-unwire3:Should UnWire", imp(TIM, IDIM, IIDCO, EIDCO, unwired, unwired, TSIM),
	  mlog(
       SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  unused, unwired, TSIM) SIM)
	 )) ListLG) > .

  trans [RD-remove]:
     < SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unused, unused) SIM),
       ListLG >
  => < SCO, (imp(TIM, IDIM, IIDCO, EIDCO,  unused, unused, unused) SIM),
       (ilog("RD-remove:Do Remove", imp(TIM, IDIM, IIDCO, EIDCO, unused, unused, unused),
	  mlog(
       SCO, (imp(TIM, IDIM, IIDCO, EIDCO, unwired, unused, unused) SIM)
	 )) ListLG) > .

  -- A Component can be stopped when there is no started component importing it.
  -- N.B. This rule requires to check not cause loops.
  ctrans [RD-stop]:
     < (cmp(IDCO, started, stopped, TSCO) SCO), SIM,
       ListLG >
  => < (cmp(IDCO, stopped, stopped, TSCO) SCO), SIM,
       (clog("RD-stop:Do Stop", cmp(IDCO, stopped, stopped,TSCO),
	  mlog(
       (cmp(IDCO, started, stopped, TSCO) SCO), SIM
	 )) ListLG) >
     if allCOInStates(getICOsOfIMs(SCO,getIMsOfECOInStates(SIM,IDCO,wired)),stopped) .

}
