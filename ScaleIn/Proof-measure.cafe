require NatAxiom ../lib/NatAxiom.cafe
require Proof Proof.cafe

--> *************************************************
--> (3) inv(S) and not final(S) implies m(S) > m(SS).
--> *************************************************

module ProofMeasure {
  protecting(ProofBase)

--> *************************************
--> Step 3-0: Use natural number axioms.
--> *************************************
  protecting(NATAXIOM)

--> ******************************************
--> Step 3-1: Define a predicate to be proved.
--> ******************************************
  vars S SS : State
  var CC : Bool

  pred mmes : State State .
  eq mmes(S,SS)
     = inv(S,n) and not final(S,n) implies mes(S) > mes(SS) .

  pred mesmes : State .
  eq mesmes(S)
     = not (S =(*,1)=>+ SS if CC suchThat
            not ((CC implies mmes(S,SS)) == true)
     	   { S => SS !! CC ! inv(S,n) ! final(S,n) ! (mes(S) > mes(SS)) }) .
}

--> ********************************************
-->  trans [R01]:
-->     < (sv(IDSV,started) SetSV), (reqMsg & MQ) >
-->  => < (sv(IDSV,serving) SetSV), MQ > .
--> ********************************************
select ProofMeasure .
--> *************************************************************************
--> Step 3-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq mesmes(< (sv(idSV,started) sSV), (reqMsg & mq) >) = true .
}
:apply (rd-)
show proof

--> ****************************************************
-->  trans [R02]:
-->     < (sv(IDSV,started) SetSV), (stpMsg & MQ) >
-->  => < (sv(IDSV,stopped) SetSV), MQ > .
--> ****************************************************
--> *************************************************************************
--> Step 3-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq mesmes(< (sv(idSV,started) sSV), (stpMsg & mq) >) = true .
}
:apply (rd-)
show proof

--> ****************************************************
-->  trans [R03]:
-->     < (sv(IDSV,serving) SetSV), MQ >
-->  => < (sv(IDSV,started) SetSV), MQ > .
--> ****************************************************
--> *************************************************************************
--> Step 3-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq mesmes(< (sv(idSV,serving) sSV), mq >) = true .
}
:apply (rd-)
show proof

select
