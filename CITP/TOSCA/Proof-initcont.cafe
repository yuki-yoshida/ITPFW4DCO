require Proof Proof.cafe

--> ****************************
--> (1) init(S) implies cont(S).
--> ****************************

--> ******************************************
--> Step 1-0: Define a predicate to be proved.
--> ******************************************
module! ProofInitCont {
  pr(PROOFfuns)
  pred initcont : State .
  eq initcont(S:State) = init(S) implies cont(S) .
}

--> Proof of (1) init(S) implies cont(S).
select ProofInitCont .

--> *******************************************
--> Step 1-1: Begin with the most general case. 
--> *******************************************
:goal {eq initcont(< sND, sCP, sRQ, sRL, mp >) = true .}

--> *******************************************************************
--> Step 1-2: Think which rule is firstly applied to an initial state. 
--> *******************************************************************
-- The first rule is R01.

--> ********************************************************************
--> Step 1-3: Split the general case into cases which collectively cover
-->  the general case and one of which matches to LHS of the first rule.
--> ********************************************************************
-- LHS of R01 requires at least one initial node.
:csp { 
  eq sND = empND .
  eq sND = (node(tnd,idND,snd) sND') .
}
-- Case 1: When there is no node:
:apply (rd) -- 1
-- Case 2: When there is a node:
-- The state of the node is initial, created, or started.
:csp { 
  eq snd = initial .
  eq snd = created .
  eq snd = started .
}
-- Case 2-1: When the node is initial:
-- Note that node(tnd,idND,initial) is arbitrary selected.
-- Thus, we can assume that all of DDSR01(node(tnd,idND,initial),S) are not initial,
-- which the Cyclic Dependency Lemma assures.
--> ****************************************************
--> Step 1-4: Split the first rule case into cases where
-->  the condition of the rule does or does not hold.
--> ****************************************************
-- The condition of R01 is allRQOfTypeOfNDInStates(SetRQ,hostedOn,IDND,ready) .
:csp { 
  eq allRQOfTypeOfNDInStates(sRQ,hostedOn,idND,ready)  = true .
  eq sRQ = (req(hostedOn,idRQ,unbound,idND) sRQ') .
  eq sRQ = (req(hostedOn,idRQ,waiting,idND) sRQ') .
}
-- Case 2-1-1: When all of the hostedOn requirements of the node are ready.
:apply (rd) -- 2-1-1
-- Case 2-1-2: When there is an unbound hostedOn requirement of the node:
--> ***********************************************************
--> Step 1-5: When there is a dangling link, split the case
-->  into cases where the linked object does or does not exist.
--> ***********************************************************
-- The relationship of the requirement does or does not exist.
:csp {
  eq onlyOneRLOfRQ(sRL,idRQ) = false .
  eq sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL') .
}
-- Case 2-1-2-1: When the relationship of the requirement does not exist:
:apply (rd) -- 2-1-2-1
-- Case 2-1-2-2: When the relationship of the requirement exists:
--> ***********************************************************
--> Step 1-5: When there is a dangling link, split the case
-->  into cases where the linked object does or does not exist.
--> ***********************************************************
-- The capability of the relationship does or does not exist.
:csp {
  eq existCP(sCP,idCP) = false .
  eq sCP = (cap(hostedOn,idCP,scp,idND1) sCP') .
}
-- Case 2-1-2-2-1: When the capability of the relationship does not exist:
:apply (rd) -- 2-1-2-2-1
-- Case 2-1-2-2-2: When the capability of the relationship exists:
-- The node of the capability is or is not the same of the node of the requiement.
:ctf {
  eq idND1 = idND .
}
-- Case 2-1-2-2-2-1: When the node of the capability is the same of the node of the requiement:
:apply (rd) -- 2-1-2-2-2-1
-- Case 2-1-2-2-2-2: When the node of the capability is not the same of the node of the requiement:
--> ***********************************************************
--> Step 1-5: When there is a dangling link, split the case
-->  into cases where the linked object does or does not exist.
--> ***********************************************************
-- The node of the capability does or does not exist.
:csp {
  eq existND(sND',idND1) = false .
  eq sND' = (node(tnd',idND1,snd') sND'') .
}
-- Case 2-1-2-2-2-2-1: When the node of the capability does not exist:
:apply (rd) -- 2-1-2-2-2-2-1
-- Case 2-1-2-2-2-2-2: When the node of the capability exists:
-- The state of the node is initial, created, or started.
:csp {
  eq snd' = initial .
  eq snd' = created .
  eq snd' = started .
}
-- Case 2-1-2-2-2-2-2-1: When the node is initial:
-- The Cyclic Dependency Lemma rejects this case.
:init [CycleR01] by {
  T:NDType <- tnd;
  I:NDID <- idND;    
  S:State <- < (node(tnd,idND,initial) sND) , sCP , sRQ , sRL , mp >;
}
:apply (rd) -- 2-1-2-2-2-2-2-1
-- Case 2-1-2-2-2-2-2-2: When the node is created.
:apply (rd) -- 2-1-2-2-2-2-2-2
-- Case 2-1-2-2-2-2-2-3: When the node is started.
:apply (rd) -- 2-1-2-2-2-2-2-3
-- Case 2-1-3: When there is a waiting hostedOn requirement of the node.
:apply (rd) -- 2-1-3
-- Case 2-2: When the node is created.
:apply (rd) -- 2-2
-- Case 2-3: When the node is started.
:apply (rd) -- 2-3
show proof
select
