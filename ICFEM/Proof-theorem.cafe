require Proof Proof.cafe

--> Common theorems in this domain.

module! TOSCATHEOREM {
  pr(PROOFfuns)
  -- For any well-formed state, when a requiremnt idRQ corresponds to a capability idCP,
  -- then another capability idCP' does not correspond to idRQ
  -- because relationships between capabilities and requirements are one-to-one.
  pred lemma : SetOfNode SetOfCapability SetOfRequirement SetOfRelationship PoolOfMsg
  eq lemma(SetND:SetOfNode, SetCP:SetOfCapability,
              SetRQ:SetOfRequirement,SetRL:SetOfRelationship,MP:PoolOfMsg)
     = wfs-allCPHaveRL(< SetND,SetCP,SetRQ,SetRL,MP >) and 
       wfs-allRLHaveRQ(< SetND,SetCP,SetRQ,SetRL,MP >) and
       wfs-allRQHaveRL(< SetND,SetCP,SetRQ,SetRL,MP >) and
       existCP(SetRL,idCP) and existCP(SetRL,idCP') and
       (idRQ = req(getRLOfCP(SetRL,idCP))) implies
       (idRQ = req(getRLOfCP(SetRL,idCP'))) = false .

  pred tosca-theorem01 : PoolOfMsg SetOfCapability CPID NDID RLType StateCP StateCP SetOfStateCP
  eq tosca-theorem01(MP:PoolOfMsg,SetCP:SetOfCapability,IDCP:CPID,IDND:NDID,
		     TRL:RLType,SCP1:StateCP,SCP2:StateCP,STCP:SetOfStateCP)
     = (SCP2 \in STCP) and
       ifAvailableMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP1,IDND) SetCP),STCP) implies
       ifAvailableMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP2,IDND) SetCP),STCP) .

  pred tosca-theorem02 : PoolOfMsg SetOfCapability CPID NDID RLType StateCP StateCP SetOfStateCP
  eq tosca-theorem02(MP:PoolOfMsg,SetCP:SetOfCapability,IDCP:CPID,IDND:NDID,
		     TRL:RLType,SCP1:StateCP,SCP2:StateCP,STCP:SetOfStateCP)
     = not (SCP1 \in STCP) and
       ifAvailableMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP1,IDND) SetCP),STCP) implies
       ifAvailableMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP2,IDND) SetCP),STCP) .

  pred tosca-theorem03 : SetOfCapability StateCP SetOfRequirement StateRQ SetOfRelationship PoolOfMsg CPID
  eq tosca-theorem03(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ:StateRQ,
                     SetRL:SetOfRelationship,MP:PoolOfMsg,IDCP:CPID)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,SCP,SetRQ,SRQ,SetRL,MP) 
       implies ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,SCP,SetRQ,SRQ,SetRL,(opMsg(IDCP) MP)) .

  pred tosca-theorem04 : SetOfCapability StateCP SetOfRequirement StateRQ SetOfRelationship PoolOfMsg CPID
  eq tosca-theorem04(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ:StateRQ,
                     SetRL:SetOfRelationship,MP:PoolOfMsg,IDCP:CPID)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,SCP,SetRQ,SRQ,SetRL,MP) 
       implies ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,SCP,SetRQ,SRQ,SetRL,(avMsg(IDCP) MP)) .

  pred tosca-theorem05 : SetOfCapability StateCP SetOfRequirement StateRQ StateRQ 
       		       	 SetOfStateRQ SetOfRelationship PoolOfMsg RQID NDID RLID CPID
  eq tosca-theorem05(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ1:StateRQ,SRQ2:StateRQ,
                     STRQ:SetOfStateRQ,SetRL:SetOfRelationship,MP:PoolOfMsg,
		     IDRQ:RQID,IDND:NDID,IDRL:RLID,IDCP:CPID)
     = (SRQ2 \in STRQ) and
       ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,SCP,(req(connectsTo,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),(opMsg(IDCP) MP)) implies
       ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,SCP,(req(connectsTo,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),MP) .

  pred tosca-theorem06 : SetOfCapability StateCP SetOfRequirement StateRQ StateRQ 
       		       	 SetOfStateRQ SetOfRelationship PoolOfMsg RQID NDID RLID CPID
  eq tosca-theorem06(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ1:StateRQ,SRQ2:StateRQ,
                     STRQ:SetOfStateRQ,SetRL:SetOfRelationship,MP:PoolOfMsg,
		     IDRQ:RQID,IDND:NDID,IDRL:RLID,IDCP:CPID)
     = (trl = connectsTo) = false and allCPHaveRL(SetCP,(rel(trl,IDRL,IDCP,IDRQ) SetRL)) and
       ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,SCP,(req(trl,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL),MP) implies
       ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,SCP,(req(trl,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL),MP) .

  pred tosca-theorem07 : SetOfCapability StateCP SetOfRequirement StateRQ StateRQ
       		       	 SetOfStateRQ SetOfRelationship PoolOfMsg RQID NDID RLID CPID
  eq tosca-theorem07(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ1:StateRQ,SRQ2:StateRQ,
                     STRQ:SetOfStateRQ,SetRL:SetOfRelationship,MP:PoolOfMsg,
		     IDRQ:RQID,IDND:NDID,IDRL:RLID,IDCP:CPID)
     = not existCP(SetCP,IDCP) and allCPHaveRL(SetCP,SetRL) and
       ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,SCP,(req(connectsTo,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),(avMsg(IDCP) MP)) implies
       ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(
		SetCP,SCP,(req(connectsTo,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),MP) .

  pred tosca-theorem08 : SetOfCapability StateCP SetOfRequirement StateRQ StateRQ
       		       	 SetOfStateRQ SetOfRelationship RQID NDID RLID CPID
  eq tosca-theorem08(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ1:StateRQ,SRQ2:StateRQ,
                     STRQ:SetOfStateRQ,SetRL:SetOfRelationship,
		     IDRQ:RQID,IDND:NDID,IDRL:RLID,IDCP:CPID)
     = not existCP(SetCP,IDCP) and 
       ifCPInStatesThenRQInStates(
		SetCP,SCP,(req(trl,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) implies
       ifCPInStatesThenRQInStates(
		SetCP,SCP,(req(trl,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) .

  pred tosca-theorem09 : SetOfCapability StateCP SetOfRequirement StateRQ StateRQ
       		       	 SetOfStateRQ SetOfRelationship RQID NDID RLID CPID
  eq tosca-theorem09(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ1:StateRQ,SRQ2:StateRQ,
                     STRQ:SetOfStateRQ,SetRL:SetOfRelationship,
		     IDRQ:RQID,IDND:NDID,IDRL:RLID,IDCP:CPID)
     = not (SRQ1 \in STRQ) and
       ifCPInStatesThenRQInStates(
		SetCP,SCP,(req(trl,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) implies
       ifCPInStatesThenRQInStates(
		SetCP,SCP,(req(trl,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) .

  pred tosca-theorem10 : SetOfCapability StateCP SetOfRequirement StateRQ StateRQ
       		       	 SetOfStateRQ SetOfRelationship RQID NDID RLID CPID
  eq tosca-theorem10(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ1:StateRQ,SRQ2:StateRQ,
                     STRQ:SetOfStateRQ,SetRL:SetOfRelationship,
		     IDRQ:RQID,IDND:NDID,IDRL:RLID,IDCP:CPID)
     = (SRQ2 \in STRQ) and
       ifCPInStatesThenRQInStates(
		SetCP,SCP,(req(trl,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) implies
       ifCPInStatesThenRQInStates(
		SetCP,SCP,(req(trl,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL)) .

  pred tosca-theorem11 : PoolOfMsg SetOfCapability CPID NDID RLType StateCP StateCP SetOfStateCP
  eq tosca-theorem11(MP:PoolOfMsg,SetCP:SetOfCapability,IDCP:CPID,IDND:NDID,
		     TRL:RLType,SCP1:StateCP,SCP2:StateCP,STCP:SetOfStateCP)
     = (SCP2 \in STCP) and
       ifOpenMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP1,IDND) SetCP),STCP) implies
       ifOpenMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP2,IDND) SetCP),STCP) .

  pred tosca-theorem12 : PoolOfMsg SetOfCapability CPID NDID RLType StateCP StateCP SetOfStateCP
  eq tosca-theorem12(MP:PoolOfMsg,SetCP:SetOfCapability,IDCP:CPID,IDND:NDID,
		     TRL:RLType,SCP1:StateCP,SCP2:StateCP,STCP:SetOfStateCP)
     = not (SCP1 \in STCP) and
       ifOpenMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP1,IDND) SetCP),STCP) implies
       ifOpenMsgThenCPInStates(MP,(cap(TRL,IDCP,SCP2,IDND) SetCP),STCP) .

  pred tosca-theorem13 : SetOfCapability StateCP SetOfRequirement StateRQ SetOfRelationship PoolOfMsg CPID
  eq tosca-theorem13(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ:StateRQ,
                     SetRL:SetOfRelationship,MP:PoolOfMsg,IDCP:CPID)
     = ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(SetCP,SCP,SetRQ,SRQ,SetRL,MP) 
       implies ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(SetCP,SCP,SetRQ,SRQ,SetRL,(opMsg(IDCP) MP)) .

  pred tosca-theorem14 : SetOfCapability StateCP SetOfRequirement StateRQ SetOfRelationship PoolOfMsg CPID
  eq tosca-theorem14(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ:StateRQ,
                     SetRL:SetOfRelationship,MP:PoolOfMsg,IDCP:CPID)
     = ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(SetCP,SCP,SetRQ,SRQ,SetRL,MP) 
       implies ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(SetCP,SCP,SetRQ,SRQ,SetRL,(avMsg(IDCP) MP)) .

  pred tosca-theorem15 : SetOfCapability StateCP SetOfRequirement StateRQ StateRQ 
       		       	 SetOfStateRQ SetOfRelationship PoolOfMsg RQID NDID RLID CPID
  eq tosca-theorem15(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ1:StateRQ,SRQ2:StateRQ,
                     STRQ:SetOfStateRQ,SetRL:SetOfRelationship,MP:PoolOfMsg,
		     IDRQ:RQID,IDND:NDID,IDRL:RLID,IDCP:CPID)
     = (SRQ2 \in STRQ) and
       ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(
		SetCP,SCP,(req(connectsTo,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),(opMsg(IDCP) MP)) implies
       ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(
		SetCP,SCP,(req(connectsTo,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(connectsTo,IDRL,IDCP,IDRQ) SetRL),MP) .

  pred tosca-theorem16 : SetOfCapability StateCP SetOfRequirement StateRQ StateRQ 
       		       	 SetOfStateRQ SetOfRelationship PoolOfMsg RQID NDID RLID CPID
  eq tosca-theorem16(SetCP:SetOfCapability,SCP:StateCP,SetRQ:SetOfRequirement,SRQ1:StateRQ,SRQ2:StateRQ,
                     STRQ:SetOfStateRQ,SetRL:SetOfRelationship,MP:PoolOfMsg,
		     IDRQ:RQID,IDND:NDID,IDRL:RLID,IDCP:CPID)
     = (trl = connectsTo) = false and allCPHaveRL(SetCP,(rel(trl,IDRL,IDCP,IDRQ) SetRL)) and
       ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(
		SetCP,SCP,(req(trl,IDRQ,SRQ1,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL),MP) implies
       ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(
		SetCP,SCP,(req(trl,IDRQ,SRQ2,IDND) SetRQ),STRQ,
		(rel(trl,IDRL,IDCP,IDRQ) SetRL),MP) .
}
--> Proof of lemma.
--> Case 1:
--> (1-1) existCP(sRL,idCP) does not hold.
open TOSCATHEOREM .
  eq existCP(sRL,idCP) = false .
  red lemma(sND,sCP,sRQ,sRL,mp) .
close
--> Case 2:
--> (1-2) existCP(sRL,idCP) holds, which means sRL = (rel(trl,idRL,idCP,idRQ) sRL'),
--> (2-1) existCP(sRL',idCP') does not hold.
open TOSCATHEOREM .
  eq existCP(sRL',idCP') = false .
  eq sRL = (rel(trl,idRL,idCP,idRQ) sRL') .
  red lemma(sND,sCP,sRQ,sRL,mp) .
close
--> Case 3:
--> (1-2) existCP(sRL,idCP) holds, which means sRL = (rel(trl,idRL,idCP,idRQ) sRL'),
--> (2-2) existCP(sRL',idCP') holds, which means sRL' = (rel(trl',idRL',idCP',IDRQ) sRL''),
--> (3-1) IDRQ is idRQ.
open TOSCATHEOREM .
  eq sRL' = (rel(trl',idRL',idCP',idRQ) sRL'') .
  eq sRL = (rel(trl,idRL,idCP,idRQ) sRL') .
  red lemma(sND,sCP,sRQ,sRL,mp) .
close
--> Case 4:
--> (1-2) existCP(sRL,idCP) holds, which means sRL = (rel(trl,idRL,idCP,idRQ) sRL'),
--> (2-2) existCP(sRL',idCP') holds, which means sRL' = (rel(trl',idRL',idCP',IDRQ) sRL''),
--> (3-1) IDRQ is not idRQ but idRQ'.
open TOSCATHEOREM .
  eq sRL' = (rel(trl',idRL',idCP',idRQ') sRL'') .
  eq sRL = (rel(trl,idRL,idCP,idRQ) sRL') .
  red lemma(sND,sCP,sRQ,sRL,mp) .
close

--> Proof of tosca-theorem01.
--> Base Case: MP is empty.
open TOSCATHEOREM .
  red tosca-theorem01(empMsg,sCP,idCP,idND,trl,scp,scp',stCP) .
close
--> Induction Case: MP has a message
--> Case 1:
--> (1-1) It is an open message.
open TOSCATHEOREM .
  eq mp = (opMsg(idCP) mp') .
  red tosca-theorem01(mp',sCP,idCP,idND,trl,scp,scp',stCP) 
      implies tosca-theorem01(mp,sCP,idCP,idND,trl,scp,scp',stCP) .
  red tosca-theorem01(mp',sCP,idCP',idND,trl,scp,scp',stCP) 
      implies tosca-theorem01(mp,sCP,idCP',idND,trl,scp,scp',stCP) .
close
--> Case 2:
--> (1-2) It is an available message.
open TOSCATHEOREM .
  eq mp = (avMsg(idCP) mp') .
  red tosca-theorem01(mp',sCP,idCP,idND,trl,scp,scp',stCP) 
      implies tosca-theorem01(mp,sCP,idCP,idND,trl,scp,scp',stCP) .
  red tosca-theorem01(mp',sCP,idCP',idND,trl,scp,scp',stCP) 
      implies tosca-theorem01(mp,sCP,idCP',idND,trl,scp,scp',stCP) .
close

--> Proof of tosca-theorem02.
--> Base Case: MP is empty.
open TOSCATHEOREM .
  red tosca-theorem02(empMsg,sCP,idCP,idND,trl,scp,scp',stCP) .
close
--> Induction Case: MP has a message
--> Case 1:
--> (1-1) It is an open message.
open TOSCATHEOREM .
  eq mp = (opMsg(idCP) mp') .
  red tosca-theorem02(mp',sCP,idCP,idND,trl,scp,scp',stCP) 
      implies tosca-theorem02(mp,sCP,idCP,idND,trl,scp,scp',stCP) .
  red tosca-theorem02(mp',sCP,idCP',idND,trl,scp,scp',stCP) 
      implies tosca-theorem02(mp,sCP,idCP',idND,trl,scp,scp',stCP) .
close
--> Case 2:
--> (1-2) It is an available message.
open TOSCATHEOREM .
  eq mp = (avMsg(idCP) mp') .
  red tosca-theorem02(mp',sCP,idCP,idND,trl,scp,scp',stCP) 
      implies tosca-theorem02(mp,sCP,idCP,idND,trl,scp,scp',stCP) .
  red tosca-theorem02(mp',sCP,idCP',idND,trl,scp,scp',stCP) 
      implies tosca-theorem02(mp,sCP,idCP',idND,trl,scp,scp',stCP) .
close

--> Proof of tosca-theorem03.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem03(sCP,scp,sRQ,srq,sRL,mp,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is closed.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,closed,idND) sCP') .
  red tosca-theorem03(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem03(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem03(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem03(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 2:
--> (1-2) It is open.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,open,idND) sCP') .
  red tosca-theorem03(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem03(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem03(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem03(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 3:
--> (1-3) It is available.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,available,idND) sCP') .
  red tosca-theorem03(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem03(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem03(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem03(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close

--> Proof of tosca-theorem04.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem04(sCP,scp,sRQ,srq,sRL,mp,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is closed.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,closed,idND) sCP') .
  red tosca-theorem04(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem04(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem04(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem04(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 2:
--> (1-2) It is open.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,open,idND) sCP') .
  red tosca-theorem04(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem04(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem04(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem04(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 3:
--> (1-3) It is available.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,available,idND) sCP') .
  red tosca-theorem04(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem04(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem04(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem04(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close

--> Proof of tosca-theorem05.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is not in scp but in scp'.
open TOSCATHEOREM .
  eq (scp' \in scp) = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 2:
--> (1-2) It is in scp,
--> (2-1) Its type is HostedOn.
open TOSCATHEOREM .
  eq sCP = (cap(hostedOn,idCP,scp,idND) sCP') .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 3:
--> (1-2) It is open,
--> (2-2) Its type is DependsOn.
open TOSCATHEOREM .
  eq sCP = (cap(dependsOn,idCP,scp,idND) sCP') .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 4:
--> (1-2) It is open,
--> (2-3) Its type is ConnectsTo,
--> (3-1) req(getRLOfCP(sRL,idCP)) is not idRQ.
open TOSCATHEOREM .
  eq (req(getRLOfCP(sRL,idCP)) = idRQ) = false .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 5:
--> (1-2) It is open,
--> (2-3) Its type is ConnectsTo,
--> (3-2) req(getRLOfCP(sRL,idCP)) is idRQ.
open TOSCATHEOREM .
  eq req(getRLOfCP(sRL,idCP)) = idRQ .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem05(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem05(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close

--> Proof of tosca-theorem06.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is not in scp but in scp'.
open TOSCATHEOREM .
  eq (scp' \in scp) = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 2:
--> (1-2) It is in scp,
--> (2-1) Its type is HostedOn.
open TOSCATHEOREM .
  eq sCP = (cap(hostedOn,idCP,scp,idND) sCP') .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 3:
--> (1-2) It is in scp,
--> (2-2) Its type is DependsOn.
open TOSCATHEOREM .
  eq sCP = (cap(dependsOn,idCP,scp,idND) sCP') .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 4:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-1) It is of idCP,
--> (4-1) trl is hostedOn.
open TOSCATHEOREM .
  eq trl = hostedOn .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 5:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-1) It is of idCP,
--> (4-2) trl is dependsOn.
open TOSCATHEOREM .
  eq trl = dependsOn .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 6:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-1) It is of idCP,
--> (4-3) trl is connectsTo.
open TOSCATHEOREM .
  eq trl = connectsTo .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 7:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-2) It is not of idCP but of idCP'.
-- lemma ensures that req(getRLOfCP(sRL,idCP')) is not idRQ when req(getRLOfCP(sRL,idCP)) is idRQ.
open TOSCATHEOREM .
  eq (req(getRLOfCP(sRL,idCP')) = idRQ) = false .
  eq sCP = (cap(connectsTo,idCP',scp,idND) sCP') .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem06(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem06(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close

--> Proof of tosca-theorem07.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is of idCP.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 2:
--> (1-2) It is of idCP',
--> (2-1) existCP(sRL,idCP') does not hold.
open TOSCATHEOREM .
  eq existCP(sRL,idCP') = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 3:
--> (1-2) It is of idCP',
--> (2-2) existCP(sRL,idCP') holds,
--> (3-1) the capability is not in scp but scp'.
open TOSCATHEOREM .
  eq (scp' \in scp) = false .
  eq existCP(sRL,idCP') = true .
  eq sCP = (cap(trl,idCP',scp',idND) sCP') .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 4:
--> (1-2) It is of idCP',
--> (2-2) existCP(sRL,idCP') holds,
--> (3-2) the capability is in scp,
--> (4-1) its type is HostedOn.
open TOSCATHEOREM .
  eq existCP(sRL,idCP') = true .
  eq sCP = (cap(hostedOn,idCP',scp,idND) sCP') .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 5:
--> (1-1) It is of idCP',
--> (2-2) existCP(sRL,idCP') holds,
--> (3-2) the capability is in scp,
--> (4-2) its type is DependsOn.
open TOSCATHEOREM .
  eq existCP(sRL,idCP') = true .
  eq sCP = (cap(dependsOn,idCP',scp,idND) sCP') .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 6:
--> (1-2) It is of idCP',
--> (2-2) existCP(sRL,idCP') holds,
--> (3-2) the capability is in scp,
--> (4-3) its type is ConnectsTo.
-- lemma ensures that
--       existCP(SetRL,idCP) and existCP(SetRL,idCP') and
--       (idRQ = req(getRLOfCP(SetRL,idCP))) implies
--       (idRQ = req(getRLOfCP(SetRL,idCP'))) = false .
--   where SetRL = (rel(connectsTo,idRL,idCP,idRQ) sRL).
open TOSCATHEOREM .
  eq existCP(sRL,idCP') = true .
  red existCP((rel(connectsTo,idRL,idCP,idRQ) sRL),idCP) and
      existCP((rel(connectsTo,idRL,idCP,idRQ) sRL),idCP') and
       (idRQ = req(getRLOfCP((rel(connectsTo,idRL,idCP,idRQ) sRL),idCP))) .
  red  req(getRLOfCP((rel(connectsTo,idRL,idCP,idRQ) sRL),idCP')) = req(getRLOfCP(sRL,idCP')) .
  eq  (idRQ = req(getRLOfCP(sRL,idCP'))) = false .
  eq sCP = (cap(connectsTo,idCP',scp,idND) sCP') .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem07(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem07(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close

--> Proof of tosca-theorem08.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem08(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is of idCP.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem08(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem08(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem08(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem08(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 2:
--> (1-2) It is of idCP',
--> (2-1) existCP(sRL,idCP') does not hold.
open TOSCATHEOREM .
  eq existCP(sRL,idCP') = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem08(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem08(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem08(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem08(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 3:
--> (1-2) It is of idCP',
--> (2-2) existCP(sRL,idCP') holds,
--> (3-1) the capability is not in scp but scp'.
open TOSCATHEOREM .
  eq (scp' \in scp) = false .
  eq existCP(sRL,idCP') = true .
  eq sCP = (cap(trl,idCP',scp',idND) sCP') .
  red tosca-theorem08(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem08(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem08(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem08(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 4:
--> (1-2) It is of idCP',
--> (2-2) existCP(sRL,idCP') holds,
--> (3-2) the capability is in scp,
-- lemma ensures that
--       existCP(SetRL,idCP) and existCP(SetRL,idCP') and
--       (idRQ = req(getRLOfCP(SetRL,idCP))) implies
--       (idRQ = req(getRLOfCP(SetRL,idCP'))) = false .
--   where SetRL = (rel(connectsTo,idRL,idCP,idRQ) sRL).
open TOSCATHEOREM .
  eq existCP(sRL,idCP') = true .
  eq sCP = (cap(trl',idCP',scp,idND) sCP') .
  red existCP((rel(trl,idRL,idCP,idRQ) sRL),idCP) and
      existCP((rel(trl,idRL,idCP,idRQ) sRL),idCP') and
       (idRQ = req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP))) .
  red  req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP')) = req(getRLOfCP(sRL,idCP')) .
  eq (idRQ = req(getRLOfCP(sRL,idCP'))) = false .
  red tosca-theorem08(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem08(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem08(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem08(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close

--> Proof of tosca-theorem09.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem09(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is of idCP.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem09(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem09(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem09(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem09(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 2:
--> (1-2) It is of idCP',
--> (2-1) existCP(sRL,idCP') does not hold.
open TOSCATHEOREM .
  eq existCP(sRL,idCP') = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem09(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem09(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem09(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem09(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 3:
--> (1-2) It is of idCP',
--> (2-2) existCP(sRL,idCP') holds,
--> (3-1) the capability is not in scp but scp'.
open TOSCATHEOREM .
  eq (scp' \in scp) = false .
  eq existCP(sRL,idCP') = true .
  eq sCP = (cap(trl,idCP',scp',idND) sCP') .
  red tosca-theorem09(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem09(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem09(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem09(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 4:
--> (1-2) It is of idCP',
--> (2-2) existCP(sRL,idCP') holds,
--> (3-2) the capability is in scp,
-- lemma ensures that
--       existCP(SetRL,idCP) and existCP(SetRL,idCP') and
--       (idRQ = req(getRLOfCP(SetRL,idCP))) implies
--       (idRQ = req(getRLOfCP(SetRL,idCP'))) = false .
--   where SetRL = (rel(connectsTo,idRL,idCP,idRQ) sRL).
open TOSCATHEOREM .
  eq existCP(sRL,idCP') = true .
  eq sCP = (cap(trl',idCP',scp,idND) sCP') .
  red existCP((rel(trl,idRL,idCP,idRQ) sRL),idCP) and
      existCP((rel(trl,idRL,idCP,idRQ) sRL),idCP') and
       (idRQ = req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP))) .
  red  req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP')) = req(getRLOfCP(sRL,idCP')) .
  eq (idRQ = req(getRLOfCP(sRL,idCP'))) = false .
  red tosca-theorem09(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem09(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem09(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem09(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close

--> Proof of tosca-theorem10.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is of idCP.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 2:
--> (1-2) It is of idCP',
--> (2-1) existCP(sRL,idCP') does not hold.
open TOSCATHEOREM .
  eq existCP(sRL,idCP') = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 3:
--> (1-2) It is of idCP',
--> (2-2) existCP(sRL,idCP') holds,
--> (3-1) the capability is not in scp but scp'.
open TOSCATHEOREM .
  eq (scp' \in scp) = false .
  eq existCP(sRL,idCP') = true .
  eq sCP = (cap(trl,idCP',scp',idND) sCP') .
  red tosca-theorem10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close
--> Case 4:
--> (1-2) It is of idCP',
--> (2-2) existCP(sRL,idCP') holds,
--> (3-2) the capability is in scp,
-- lemma ensures that
--       existCP(SetRL,idCP) and existCP(SetRL,idCP') and
--       (idRQ = req(getRLOfCP(SetRL,idCP))) implies
--       (idRQ = req(getRLOfCP(SetRL,idCP'))) = false .
--   where SetRL = (rel(connectsTo,idRL,idCP,idRQ) sRL).
open TOSCATHEOREM .
  eq existCP(sRL,idCP') = true .
  eq sCP = (cap(trl',idCP',scp,idND) sCP') .
  red existCP((rel(trl,idRL,idCP,idRQ) sRL),idCP) and
      existCP((rel(trl,idRL,idCP,idRQ) sRL),idCP') and
       (idRQ = req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP))) .
  red  req(getRLOfCP((rel(trl,idRL,idCP,idRQ) sRL),idCP')) = req(getRLOfCP(sRL,idCP')) .
  eq (idRQ = req(getRLOfCP(sRL,idCP'))) = false .
  red tosca-theorem10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) 
      implies tosca-theorem10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND,idRL,idCP) .
  red tosca-theorem10(sCP',scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) 
      implies tosca-theorem10(sCP,scp,sRQ,srq,srq',stRQ,sRL,idRQ,idND',idRL,idCP) .
close

--> Proof of tosca-theorem11.
--> Base Case: MP is empty.
open TOSCATHEOREM .
  red tosca-theorem11(empMsg,sCP,idCP,idND,trl,scp,scp',stCP) .
close
--> Induction Case: MP has a message
--> Case 1:
--> (1-1) It is an open message.
open TOSCATHEOREM .
  eq mp = (opMsg(idCP) mp') .
  red tosca-theorem11(mp',sCP,idCP,idND,trl,scp,scp',stCP) 
      implies tosca-theorem11(mp,sCP,idCP,idND,trl,scp,scp',stCP) .
  red tosca-theorem11(mp',sCP,idCP',idND,trl,scp,scp',stCP) 
      implies tosca-theorem11(mp,sCP,idCP',idND,trl,scp,scp',stCP) .
close
--> Case 2:
--> (1-2) It is an available message.
open TOSCATHEOREM .
  eq mp = (avMsg(idCP) mp') .
  red tosca-theorem11(mp',sCP,idCP,idND,trl,scp,scp',stCP) 
      implies tosca-theorem11(mp,sCP,idCP,idND,trl,scp,scp',stCP) .
  red tosca-theorem11(mp',sCP,idCP',idND,trl,scp,scp',stCP) 
      implies tosca-theorem11(mp,sCP,idCP',idND,trl,scp,scp',stCP) .
close

--> Proof of tosca-theorem12.
--> Base Case: MP is empty.
open TOSCATHEOREM .
  red tosca-theorem12(empMsg,sCP,idCP,idND,trl,scp,scp',stCP) .
close
--> Induction Case: MP has a message
--> Case 1:
--> (1-1) It is an open message.
open TOSCATHEOREM .
  eq mp = (opMsg(idCP) mp') .
  red tosca-theorem12(mp',sCP,idCP,idND,trl,scp,scp',stCP) 
      implies tosca-theorem12(mp,sCP,idCP,idND,trl,scp,scp',stCP) .
  red tosca-theorem12(mp',sCP,idCP',idND,trl,scp,scp',stCP) 
      implies tosca-theorem12(mp,sCP,idCP',idND,trl,scp,scp',stCP) .
close
--> Case 2:
--> (1-2) It is an available message.
open TOSCATHEOREM .
  eq mp = (avMsg(idCP) mp') .
  red tosca-theorem12(mp',sCP,idCP,idND,trl,scp,scp',stCP) 
      implies tosca-theorem12(mp,sCP,idCP,idND,trl,scp,scp',stCP) .
  red tosca-theorem12(mp',sCP,idCP',idND,trl,scp,scp',stCP) 
      implies tosca-theorem12(mp,sCP,idCP',idND,trl,scp,scp',stCP) .
close

--> Proof of tosca-theorem13.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem13(sCP,scp,sRQ,srq,sRL,mp,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is closed.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,closed,idND) sCP') .
  red tosca-theorem13(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem13(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem13(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem13(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 2:
--> (1-2) It is open.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,open,idND) sCP') .
  red tosca-theorem13(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem13(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem13(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem13(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 3:
--> (1-3) It is available.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,available,idND) sCP') .
  red tosca-theorem13(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem13(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem13(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem13(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close

--> Proof of tosca-theorem14.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem14(sCP,scp,sRQ,srq,sRL,mp,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is closed.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,closed,idND) sCP') .
  red tosca-theorem14(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem14(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem14(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem14(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 2:
--> (1-2) It is open.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,open,idND) sCP') .
  red tosca-theorem14(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem14(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem14(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem14(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close
--> Case 3:
--> (1-3) It is available.
open TOSCATHEOREM .
  eq sCP = (cap(trl,idCP,available,idND) sCP') .
  red tosca-theorem14(sCP',scp,sRQ,srq,sRL,mp,idCP) implies tosca-theorem14(sCP,scp,sRQ,srq,sRL,mp,idCP) .
  red tosca-theorem14(sCP',scp,sRQ,srq,sRL,mp,idCP') implies tosca-theorem14(sCP,scp,sRQ,srq,sRL,mp,idCP') .
close

--> Proof of tosca-theorem15.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is not in scp but in scp'.
open TOSCATHEOREM .
  eq (scp' \in scp) = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 2:
--> (1-2) It is in scp,
--> (2-1) Its type is HostedOn.
open TOSCATHEOREM .
  eq sCP = (cap(hostedOn,idCP,scp,idND) sCP') .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 3:
--> (1-2) It is open,
--> (2-2) Its type is DependsOn.
open TOSCATHEOREM .
  eq sCP = (cap(dependsOn,idCP,scp,idND) sCP') .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 4:
--> (1-2) It is open,
--> (2-3) Its type is ConnectsTo,
--> (3-1) req(getRLOfCP(sRL,idCP)) is not idRQ.
open TOSCATHEOREM .
  eq (req(getRLOfCP(sRL,idCP)) = idRQ) = false .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 5:
--> (1-2) It is open,
--> (2-3) Its type is ConnectsTo,
--> (3-2) req(getRLOfCP(sRL,idCP)) is idRQ.
open TOSCATHEOREM .
  eq req(getRLOfCP(sRL,idCP)) = idRQ .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem15(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem15(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close

--> Proof of tosca-theorem16.
--> Base Case: SetCP is empty.
open TOSCATHEOREM .
  eq sCP = empCP .
  red tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
close
--> Induction Case: SetCP has a capability.
--> Case 1:
--> (1-1) It is not in scp but in scp'.
open TOSCATHEOREM .
  eq (scp' \in scp) = false .
  eq sCP = (cap(trl,idCP,scp',idND) sCP') .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 2:
--> (1-2) It is in scp,
--> (2-1) Its type is HostedOn.
open TOSCATHEOREM .
  eq sCP = (cap(hostedOn,idCP,scp,idND) sCP') .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 3:
--> (1-2) It is in scp,
--> (2-2) Its type is DependsOn.
open TOSCATHEOREM .
  eq sCP = (cap(dependsOn,idCP,scp,idND) sCP') .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP') .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP') .
close
--> Case 4:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-1) It is of idCP,
--> (4-1) trl is hostedOn.
open TOSCATHEOREM .
  eq trl = hostedOn .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 5:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-1) It is of idCP,
--> (4-2) trl is dependsOn.
open TOSCATHEOREM .
  eq trl = dependsOn .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 6:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-1) It is of idCP,
--> (4-3) trl is connectsTo.
open TOSCATHEOREM .
  eq trl = connectsTo .
  eq sCP = (cap(connectsTo,idCP,scp,idND) sCP') .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close
--> Case 7:
--> (1-2) It is in scp,
--> (2-3) Its type is ConnectsTo,
--> (3-2) It is not of idCP but of idCP'.
-- lemma ensures that req(getRLOfCP(sRL,idCP')) is not idRQ when req(getRLOfCP(sRL,idCP)) is idRQ.
open TOSCATHEOREM .
  eq (req(getRLOfCP(sRL,idCP')) = idRQ) = false .
  eq sCP = (cap(connectsTo,idCP',scp,idND) sCP') .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND,idRL,idCP) .
  red tosca-theorem16(sCP',scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) 
      implies tosca-theorem16(sCP,scp,sRQ,srq,srq',stRQ,sRL,mp,idRQ,idND',idRL,idCP) .
close

