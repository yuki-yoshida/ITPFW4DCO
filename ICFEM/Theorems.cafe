require Template Template.cafe

provide Theorems

module! BOOLTHEOREMS {
  pred bool-theorem1 : Bool Bool .
  eq bool-theorem1(X:Bool,Y:Bool)
     = (X implies Y) iff ((X and Y) = X) .
}

open BOOLTHEOREMS .
  red bool-theorem1(true,true) .
  red bool-theorem1(true,false) .
  red bool-theorem1(false,true) .
  red bool-theorem1(false,false) .
close

module! SETTHEOREMS {
  pr(TMPALLOBJPRED1)
  op _ \in _ : Object SetOfObject -> Bool

  -- Axioms
  -- SET Theorems are valid only when instantiating with the following properties.
  vars O O1 : Object
  vars S S' : SetOfObject
  var A : Arg
  eq (empObj = (O S)) = false .
  eq ((O S) = (O S')) = (S = S') .
  eq O \in empObj = false .
  eq O \in (O S) = true .
  ceq O \in (O1 S) = O \in S if not(O == O1) .

  pred set-theorem0 : SetOfObject Object SetOfObject
  -- When O is included in S, there exist some S' such that S = (O S').
  eq set-theorem0(S, O, S')
     = (O \in S) implies (S = (O S')) .

  pred set-theorem1 : SetOfObject Object SetOfObject Arg
  -- When allObjP(S,A) does not hold, there exist some O and S' such that S = (O S') and p(O,A) does not hold.
  eq set-theorem1(S, O, S', A)
     = not allObjP(S,A) implies (S = (O S')) and not p(O,A) .

  pred set-theorem2 : SetOfObject Object SetOfObject Arg
  -- When onlyOneObjP(S,A) holds, there exist some O and S' such that S = (O S') and p(O,A) holds.
  eq set-theorem2(S, O, S', A)
     = onlyOneObjP(S,A) implies (S = (O S')) and p(O,A) and allObjNotP(S',A).

  pred set-theorem3 : SetOfObject Arg
  -- someObjP(S,A) if and only if not allObjNotP(S,A).
  eq set-theorem3(S, A)
     = someObjP(S,A) iff not allObjNotP(S,A) .

  pred set-theorem4 : SetOfObject Object Arg
  -- When p(O,A) holds and O is included in S, then someObjP(S,A) holds.
  eq set-theorem4(S, O, A)
     = p(O,A) and (O \in S) implies someObjP(S,A) .

  pred set-theorem5 : SetOfObject Arg
  -- When onlyOneObjP(S,A) holds, someObjP(S,A) also holds.
  eq set-theorem5(S, A)
     = onlyOneObjP(S,A) implies someObjP(S,A) .
}

--> *****************************************************************************
--> Prove that when O is included in S, there exist some S' such that S = (O S').
--> *****************************************************************************
--> case 1: Basic case, S is empty
open SETTHEOREMS .
  op s : -> SetOfObject .
  op o : -> Object .
  red set-theorem0(empObj,o,s) .
close

--> case 2: Induction case, S is not empty
-- set-theorem0(s,o,s') implies set-theorem0((o' s),o,S') .
open SETTHEOREMS .
  ops s s' : -> SetOfObject .
  ops o o' : -> Object .
--> case 2-1: When o' is o, then S' = s
  red set-theorem0((o s),o,s) .
--> case 2-2: When o' is not o, then S' = (o' s')
  red set-theorem0(s,o,s') implies set-theorem0((o' s),o,(o' s')) .
close

--> *******************************************************************************************************************
--> Prove that when allObjP(S,A) does not hold there exist some O and S' such that S = (O S') and p(O,A) does not hold.
--> *******************************************************************************************************************
--> case 1: Basic case, S is empty
open SETTHEOREMS .
  op s : -> SetOfObject .
  op o : -> Object .
  op a : -> Arg .
  red set-theorem1(empObj,o,s,a) .
close

--> case 2: Induction case, S is not empty
-- Assuming that there exist e' and s' for s such that set-theorem1(s,e',s') holds,
-- prove that there also exist some O' and S' for S = (e s) such that set-theorem1(S,O',S') holds;
-- i.e. set-theorem1(s,e',s') implies set-theorem1((e s),O',S') .

--> case 2-1: When p(e) does not hold.
open SETTHEOREMS .
  ops s s' : -> SetOfObject .
  ops o o' : -> Object .
  op a : -> Arg .
  eq p(o,a) = false .
  --> O' = o and S' = s, we don't need the induction hypothesis.
  red set-theorem1(s,o',s',a) implies set-theorem1((o s),o,s,a) .
close

--> case 2-2: When p(e) holds.
--> There are two cases where allObjP(s) does or does not hold.

--> case 2-2-1: When allObjP(s) holds.
open SETTHEOREMS .
  ops s s' : -> SetOfObject .
  ops o o' : -> Object .
  op a : -> Arg .
  eq p(o,a) = true .
  eq allObjP(s,a) = true .
  --> O' and S' can be any value.
  red set-theorem1(s,o',s',a) implies set-theorem1((o s),O:Object,S:SetOfObject,a) .
close

--> case 2-2-2: When allObjP(s) does not hold.
open SETTHEOREMS .
  ops s s' : -> SetOfObject .
  ops o o' : -> Object .
  op a : -> Arg .
  eq p(o,a) = true .
  eq allObjP(s,a) = false .
  --> O' = o' and S' = (o s')
  red set-theorem1(s,o',s',a) implies set-theorem1((o s),o',(o s'),a).
close

--> *****************************************************************************************************************************
--> Prove that when onlyOneObjP(S,A) holds, there exist some O and S' such that S = (O S') and p(O,A) holds.
--> *****************************************************************************************************************************
--> case 1: Basic case, S is empty
open SETTHEOREMS .
  op s : -> SetOfObject .
  op o : -> Object .
  op a : -> Arg .
  red set-theorem2(empObj,o,s,a) .
close

--> case 2: Induction case, S is not empty
-- Assuming that there exist e' and s' for s such that set-theorem2(s,e',s') holds,
-- there also exist some O' and S' for S = (e s) such that set-theorem2(S,O',S') holds;
-- i.e. set-theorem2(s,e',s') implies set-theorem2((e s),O',S') .

--> case 2-1: When p(e) holds.
open SETTHEOREMS .
  ops o o' : -> Object .
  ops s s' : -> SetOfObject .
  op a : -> Arg .
  eq p(o,a) = true .
  --> O' = o and S' = s, we don't need the induction hypothesis.
  red set-theorem2(s,o',s',a) implies set-theorem2((o s),o,s,a) .
close

--> case 2-2: When p(e) does not hold.
open SETTHEOREMS .
  ops o o' : -> Object .
  ops s s' : -> SetOfObject .
  op a : -> Arg .
  eq p(o,a) = false .
  --> O' = o' and S' = (o s').
  red set-theorem2(s,o',s',a) implies set-theorem2((o s),o',(o s'),a) .
close

--> **************************************************
--> Prove that someObjP(S,A) iff not allObjNotP(S,A) .
--> **************************************************
open SETTHEOREMS .
  --> Basic Case.
  op a : -> Arg .
  red set-theorem3(empObj,a) .
  op o : -> Object .
  op s : -> SetOfObject .
  --> Induction Case.
  red set-theorem3(s,a) implies set-theorem3(o s,a) .
close

--> ******************************************************************************
--> Prove that when p(O,A) holds and O is included in S, then someObjP(S,A) holds.
--> ******************************************************************************
open SETTHEOREMS .
  op s' : -> SetOfObject .
  op o : -> Object .
  op a : -> Arg .
  red set-theorem4((o s'),o,a) .
close

--> *****************************************************************
--> Prove that when onlyOneObjP(S,A) holds, someObjP(S,A) also holds.
--> *****************************************************************
open SETTHEOREMS .
  op s : -> SetOfObject .
  ops o1 o2 : -> Object .
  op a : -> Arg .
  eq p(o1,a) = true .
  eq p(o2,a) = false .
  red set-theorem5(empObj,a) .
  red set-theorem5(s,a) implies set-theorem5((o1 s),a) .
  red set-theorem5(s,a) implies set-theorem5((o2 s),a) .
close

module! THEOREMbase {
  pr(TMPOBJBASEMOD)
  pr(TMPOBJLINKPRED)

  pred (_then _) : Bool Bool .
  eq (true  then B:Bool) = B . 
  eq (false then B:Bool) = true .

  pred changeObjState : Object Object
  eq changeObjState(O1:Object,O2:Object)
     = (id(O1) = id(O2)) and (link(O1) = link(O2)) .

  pred changeLObjState : LObject LObject
  eq changeLObjState(O1:Object,O2:Object)
     = (id(O1) = id(O2)) .

  [ObjID LObjID
   SetOfObjState SetOfLObjState
   SetOfObject SetOfLObject
   State Bool < Val < ValSq]
  op _,_ : ValSq ValSq -> ValSq {assoc} .
  op v_ : ValSq -> Bool .

  [IndInfo]
  op ii_ : ValSq -> IndInfo {constr} .
  op ss_ : State -> IndInfo {constr} .

  -- Constants for Proofs.
  ops x x' x1 x2 : -> LObject .
  ops y y' y1 y2 : -> Object .
  ops z z' z1 z2 z3 : -> Object .
  ops o o' o1 o2 : -> Object .
  op idX : -> LObjID
  op idY : -> ObjID
  op idZ : -> ObjID
  op idO : -> ObjID
  ops setX setX' : -> SetOfLObject
  ops setY setY' : -> SetOfObject
  ops setZ setZ' : -> SetOfObject
  ops setO setO' : -> SetOfObject
  op sx : -> LObjState
  op sy : -> ObjState
  op sz : -> ObjState
  op so : -> ObjState
  op setSX : -> SetOfLObjState
  op setSY : -> SetOfObjState
  op setSZ : -> SetOfObjState
  op setSO : -> SetOfObjState
}

module! BASE-THEOREMS {
  pr(THEOREMbase)

  var IDO : ObjID 
  vars O O' : Object
  var S_O : SetOfObject
  vars SO SO1 SO2 : ObjState
  var St_O : SetOfObjState

  pred base-theorem01 : SetOfObject ObjID Object
  eq base-theorem01(S_O,IDO,O)
     = existObj(S_O,IDO) implies existObj((O S_O),IDO) .

  pred base-theorem02 : Object ObjID SetOfObject
  eq base-theorem02(O,IDO,S_O)
     = (id(O) = IDO) implies existObj((O S_O),IDO) .
}

open BASE-THEOREMS .
  red base-theorem01(setO,idO,o) .
  red base-theorem02(o,idO,setO) .
close

module! M2O-THEOREMS {
  pr(THEOREMbase)
  pr(TMPOBJLINKMANY2ONE)

  var IDX : LObjID 
  var IDZ : ObjID 
  vars X X' : LObject
  vars Z Z' : Object
  var S_X : SetOfLObject
  var S_Z : SetOfObject
  vars SX SX1 SX2 : LObjState
  vars SZ SZ1 SZ2 : ObjState
  var St_X : SetOfLObjState
  var St_Z : SetOfObjState

  -- Axiom
  -- M2O Theorems are valid only when instantiating with the following properties.
  eq existObj(empLObj,IDX) = false .
  eq existObj((X S_X),IDX)
     = id(X) = IDX or existObj(S_X,IDX) .

  pred m2o-theorem01 : LObjID SetOfObject SetOfObjState
  eq m2o-theorem01(IDX,S_Z,St_Z)
     = allObjInStates(S_Z,St_Z) implies allZOfXInStates(S_Z,IDX,St_Z) .

  pred m2o-theorem02 : SetOfObject Object SetOfObjState
  eq m2o-theorem02(S_Z,Z,St_Z)
     = (Z \in S_Z) and allZOfXInStates(S_Z,link(Z),St_Z) 
       implies (state(Z) \in St_Z) .

  pred m2o-theorem03 : SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq m2o-theorem03(S_X,St_X,S_Z,St_Z)
     = allObjInStates(S_Z,St_Z) implies ifXInStatesThenZInStates(S_X,St_X,S_Z,St_Z) .

  pred m2o-theorem04 : Object Object SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq m2o-theorem04(Z,Z',S_X,St_X,S_Z,St_Z)
     = not existObj(S_X,link(Z)) and changeObjState(Z,Z') implies
        (ifXInStatesThenZInStates(S_X,St_X,(Z S_Z),St_Z)
         implies ifXInStatesThenZInStates(S_X,St_X,(Z' S_Z),St_Z)) .

  pred m2o-theorem05 : SetOfLObject SetOfLObjState Object SetOfObject SetOfObjState
  eq m2o-theorem05(S_X,St_X,Z,S_Z,St_Z)
     = ifXInStatesThenZInStates(S_X,St_X,(Z S_Z),St_Z)
       implies ifXInStatesThenZInStates(S_X,St_X,S_Z,St_Z) .

  pred m2o-theorem06 : SetOfObject LObjID ObjState SetOfObjState .
  eq m2o-theorem06(S_Z,IDX,SZ,St_Z)
   = (getZsOfXInStates(S_Z,IDX,SZ) = empObj)
     implies allZOfXInStates(S_Z,IDX,St_Z) .

  pred m2o-theorem07 : LObject LObject SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq m2o-theorem07(X,X',S_X,St_X,S_Z,St_Z)
     = not (state(X') \in St_X) and changeLObjState(X,X') implies
        (ifXInStatesThenZInStates((X S_X),St_X,S_Z,St_Z)
         implies ifXInStatesThenZInStates((X' S_X),St_X,S_Z,St_Z)) .

  pred m2o-theorem08 : Object Object SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq m2o-theorem08(Z,Z',S_X,St_X,S_Z,St_Z)
     = (state(Z') \in St_Z) and changeObjState(Z,Z') implies
        (ifXInStatesThenZInStates(S_X,St_X,(Z S_Z),St_Z)
         implies ifXInStatesThenZInStates(S_X,St_X,(Z' S_Z),St_Z)) .

  pred m2o-theorem09 : LObject LObject SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq m2o-theorem09(X,X',S_X,St_X,S_Z,St_Z)
     = allZOfXInStates(S_Z,id(X'),St_Z) and changeLObjState(X,X') implies
        (ifXInStatesThenZInStates((X S_X),St_X,S_Z,St_Z)
         implies ifXInStatesThenZInStates((X' S_X),St_X,S_Z,St_Z)) .

  pred m2o-theorem10 : Object Object SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq m2o-theorem10(Z,Z',S_X,St_X,S_Z,St_Z)
     = not (state(Z) \in St_Z) and changeObjState(Z,Z') implies
        (ifXInStatesThenZInStates(S_X,St_X,(Z S_Z),St_Z)
         implies ifXInStatesThenZInStates(S_X,St_X,(Z' S_Z),St_Z)) .
}

--> *****************************************************************************************
--> Prove m2o-theorem01 = allObjInStates(S_Z,St_Z) implies allZOfXInStates(S_Z,IDX,St_Z).
--> *****************************************************************************************
open M2O-THEOREMS .
  --> Base Case     : S_Z is empty.
  red m2o-theorem01(idX,empObj,setSZ) .
  --> Induction Case: S_Z is not empty.
  red m2o-theorem01(idX,setZ,setSZ) implies m2o-theorem01(idX,(z setZ),setSZ) .
close

--> ****************************************************************************
--> Prove m2o-theorem02 = (Z \in S_Z) and allZOfXInStates(S_Z,link(Z),St_Z)
-->                   implies (state(Z) \in St_Z) .
--> ****************************************************************************
--> Base Case     : S_Z is empty.
open M2O-THEOREMS .
  red m2o-theorem02(empObj,z,setSZ) .
close
--> Induction Case: S_Z is not empty, i.e., it has z'.
--> Induction Case(1): z' is z.
open M2O-THEOREMS .
  red m2o-theorem02(setZ,z,setSZ) implies m2o-theorem02((z setZ),z,setSZ) .
close
--> Induction Case(2): z' is not z and they have a same link.
open M2O-THEOREMS .
  eq (z' = z) = false .
  eq (link(z') = link(z)) = true .
  red m2o-theorem02(setZ,z,setSZ) implies m2o-theorem02((z' setZ),z,setSZ) .
close
--> Induction Case(3): z' is not z and they have different links.
open M2O-THEOREMS .
  eq (z' = z) = false .
  eq (link(z') = link(z)) = false .
  red m2o-theorem02(setZ,z,setSZ) implies m2o-theorem02((z' setZ),z,setSZ) .
close

--> *******************************************************************************************************
--> Prove m2o-theorem03 = allObjInStates(S_Z,St_Z) implies ifXInStatesThenZInStates(S_X,SX,S_Z,St_Z) .
-->    This proof requires M2O-Theorem01.
--> *******************************************************************************************************
--> Base Case     : S_X is empty.
open M2O-THEOREMS .
  red m2o-theorem03(empLObj,sx,setZ,setSZ) .
close
--> Induction Case: S_X is not empty.
--> Induction Case(1):
--> (1-1) S_Z is empty.
open M2O-THEOREMS .
  red m2o-theorem03(setX,setSX,empObj,setSZ) implies m2o-theorem03((x setX),setSX,empObj,setSZ) .
close
--> Induction Case(2): 
--> (1-2) S_Z is not empty.
--> (2-1): X is in St_X .
open M2O-THEOREMS .
  eq (setZ = empObj) = false .
  eq (state(x1) \in setSX) = true .
  -- m2o-theorem01(IDX,S_Z,SZ) = allObjInStates(S_Z,St_Z) implies allZOfXInStates(S_Z,IDX,St_Z) .
  eq (allObjInStates(setZ,setSZ) and allZOfXInStates(setZ,id(x1),setSZ))
     = allObjInStates(setZ,setSZ) .
  red m2o-theorem03(setX,setSX,setZ,setSZ) implies m2o-theorem03((x1 setX),setSX,setZ,setSZ) .
close
--> Induction Case(2): 
--> (1-2) S_Z is not empty.
--> (2-2): X is not in St_X .
open M2O-THEOREMS .
  eq (setZ = empObj) = false .
  eq (state(x2) \in setSX) = false .
  red m2o-theorem03(setX,setSX,setZ,setSZ) implies m2o-theorem03((x2 setX),setSX,setZ,setSZ) .
close

--> ************************************************************************************
--> Prove m2o-theorem04 = not existObj(S_X,link(Z)) and changeObjState(Z,Z') implies
-->                     (ifXInStatesThenZInStates(S_X,St_X,(Z S_Z),St_Z)
-->                      implies ifXInStatesThenZInStates(S_X,St_X,(Z' S_Z),St_Z)) .
--> ************************************************************************************
--> Case 1: S_Z is empty.
open M2O-THEOREMS .
  red m2o-theorem04(z,z',empLObj,setSX,empObj,setSZ) .
close
--> Case 2: S_Z is not empty.
--> Base Case     : S_X is empty.
open M2O-THEOREMS .
  eq (setZ = empObj) = false .
  red m2o-theorem04(z,z',empLObj,setSX,setZ,setSZ) .
close
--> Induction Case: S_X is not empty.
--> Induction Case(1): Adding x linked by z.
open M2O-THEOREMS .
  eq (setZ = empObj) = false .
  eq id(x) = link(z) .
  red m2o-theorem04(z,z',setX,setSX,setZ,setSZ) implies m2o-theorem04(z,z',(x setX),setSX,setZ,setSZ) .
close
--> Induction Case(2): Adding x not linked by z but linked by z'
open M2O-THEOREMS .
  eq (setZ = empObj) = false .
  eq (id(x) = link(z)) = false .
  eq id(x) = link(z') .
  red m2o-theorem04(z,z',setX,setSX,setZ,setSZ) implies m2o-theorem04(z,z',(x setX),setSX,setZ,setSZ) .
close
--> Induction Case(3): Adding x not linked by z or z'
open M2O-THEOREMS .
  eq (setZ = empObj) = false .
  eq (id(x) = link(z)) = false .
  eq (id(x) = link(z')) = false .
  red m2o-theorem04(z,z',setX,setSX,setZ,setSZ) implies m2o-theorem04(z,z',(x setX),setSX,setZ,setSZ) .
close
--> *****************************************************************************
--> Prove m2o-theorem05 = ifXInStatesThenZInStates(S_X,St_X,(Z S_Z),St_Z)
-->                     implies ifXInStatesThenZInStates(S_X,St_X,S_Z,St_Z) .
--> *****************************************************************************
--> Base Case     : S_X is empty.
open M2O-THEOREMS .
  red m2o-theorem05(empLObj,setSX,z,setZ,setSZ) .
close
--> Induction Case: S_X is not empty.
--> Induction Case(1): 
--> (1-1) S_Z is empty.
open M2O-THEOREMS .
  red m2o-theorem05(setX,setSX,z,empObj,setSZ) implies m2o-theorem05((x1 setX),setSX,z,empObj,setSZ) .
close
--> Induction Case(2): 
--> (1-2) S_Z is not empty.
--> (2-1): X is in St_X .
open M2O-THEOREMS .
  eq (setZ = empObj) = false .
  eq (state(x1) \in setSX) = true .
  red m2o-theorem05(setX,setSX,z,setZ,setSZ) implies m2o-theorem05((x1 setX),setSX,z,setZ,setSZ) .
close
--> Induction Case(3): 
--> (1-2): X is not in St_X .
open M2O-THEOREMS .
  eq (setZ = empObj) = false .
  eq (state(x2) \in setSX) = false .
  red m2o-theorem05(setX,setSX,z,setZ,setSZ) implies m2o-theorem05((x2 setX),setSX,z,setZ,setSZ) .
close

--> *****************************************************************************************
--> Prove m2o-theorem06(S_Z,IDX,SZ,St_Z)
-->       = (getZOfXInStates(S_Z,IDX,SZ) = empObj) implies allZOfXInStates(S_Z,IDX,St_Z) .
-->   where St_Z is all states except SZ
--> *****************************************************************************************
--> Base Case     : S_Z is empty.
open M2O-THEOREMS .
  red m2o-theorem06(empObj,idX,sz,setSZ) .
close
--> Induction Case: S_Z is not empty.
-->  Case 1: Z does not link idX.
open M2O-THEOREMS .
  eq (link(z') = idX) = false .
  red m2o-theorem06(setZ,idX,sz,setSZ) implies m2o-theorem06((z' setZ),idX,sz,setSZ) .
close
-->  Case 2: Z links idX and in sz.
open M2O-THEOREMS .
  eq link(z') = idX .
  eq state(z') = sz .
  red m2o-theorem06(setZ,idX,sz,setSZ) implies m2o-theorem06((z' setZ),idX,sz,setSZ) .
close
-->  Case 3: Z links idX and in setSZ.
open M2O-THEOREMS .
  eq link(z') = idX .
  eq (state(z') \in setSZ) = true .
  -- Note that (state(z') \in sz) does not hold because setSZ and sz are exclusive.
  eq (state(z') \in sz) = false .
  red m2o-theorem06(setZ,idX,sz,setSZ) implies m2o-theorem06((z' setZ),idX,sz,setSZ) .
close

--> *************************************************************************
--> Prove m2o-theorem07(X,X',S_X,St_X,S_Z,St_Z)
-->       = not (state(X') \in St_X) and changeLObjState(X,X') implies
-->          (ifXInStatesThenZInStates((X S_X),St_X,S_Z,St_Z)
-->           implies ifXInStatesThenZInStates((X' S_X),St_X,S_Z,St_Z)) .
--> *************************************************************************
--> Case 1: S_Z is empty.
open M2O-THEOREMS .
  red m2o-theorem07(x,x',setX,setSX,empObj,setSZ).
close
--> Case 2: S_Z is not empty.
open M2O-THEOREMS .
  eq (setZ = empObj) = false .
  red m2o-theorem07(x,x',setX,setSX,setZ,setSZ).
close

--> *************************************************************************
--> Prove m2o-theorem08
-->       = (state(Z') \in St_Z) and changeObjState(Z,Z') implies
-->          (ifXInStatesThenZInStates(S_X,St_X,(Z S_Z),St_Z)
-->           implies ifXInStatesThenZInStates(S_X,St_X,(Z' S_Z),St_Z)) .
--> *************************************************************************
--> Base Case     : S_X is empty.
open M2O-THEOREMS .
  red m2o-theorem08(z,z',empLObj,setSX,setZ,setSZ) .
close
--> Induction Case: S_X is not empty.
open M2O-THEOREMS .
  red m2o-theorem08(z,z',setX,setSX,setZ,setSZ)
      implies m2o-theorem08(z,z',(x setX),setSX,setZ,setSZ) .
close

--> *******************************************************************************
--> Prove m2o-theorem09
-->       = allZOfXInStates(S_Z,id(X'),St_Z) and changeLObjState(X,X') implies
-->          (ifXInStatesThenZInStates((X S_X),St_X,S_Z,St_Z)
-->           implies ifXInStatesThenZInStates((X' S_X),St_X,S_Z,St_Z)) .
--> *******************************************************************************
--> Case 1: S_Z is empty.
open M2O-THEOREMS .
  red m2o-theorem09(x,x',setX,setSX,empObj,setSZ) .
close
--> Case 2: S_Z is not empty.
open M2O-THEOREMS .
  eq (setZ = empObj) = false .
  red m2o-theorem09(x,x',setX,setSX,setZ,setSZ) .
close

--> *************************************************************************
--> Prove m2o-theorem10
-->       = not (state(Z) \in St_Z) and changeObjState(Z,Z') implies
-->          (ifXInStatesThenZInStates(S_X,St_X,(Z S_Z),St_Z)
-->           implies ifXInStatesThenZInStates(S_X,St_X,(Z' S_Z),St_Z)) .
--> *************************************************************************
--> Base Case     : S_X is empty.
open M2O-THEOREMS .
  red m2o-theorem10(z,z',empLObj,setSX,setZ,setSZ) .
close
--> Induction Case: S_X is not empty.
--> Case 1: link(Z) = id(X) .
open M2O-THEOREMS .
  eq link(Z) = id(X) .
  red m2o-theorem10(z,z',setX,setSX,setZ,setSZ)
      implies m2o-theorem10(z,z',(x setX),setSX,setZ,setSZ) .
close
--> Case 2: (link(Z) = id(X)) = false .
open M2O-THEOREMS .
  eq (link(Z) = id(X)) = false .
  red m2o-theorem10(z,z',setX,setSX,setZ,setSZ)
      implies m2o-theorem10(z,z',(x setX),setSX,setZ,setSZ) .
close

module! O2O-THEOREMS {
  pr(THEOREMbase)
  pr(TMPOBJLINKONE2ONE)

  var IDX : LObjID 
  var IDY : ObjID 
  var X : LObject
  vars Y Y' : Object
  var S_X : SetOfLObject
  var S_Y : SetOfObject
  vars SX SX1 SX2 : LObjState
  vars SY SY1 SY2 : ObjState
  var St_X : SetOfLObjState
  var St_Y : SetOfObjState

  -- Axiom
  -- O2O Theorems are valid only when instantiating with the following properties.
  eq existObj(empLObj,IDX) = false .
  eq existObj((X S_X),IDX)
     = id(X) = IDX or existObj(S_X,IDX) .

  pred o2o-theorem01 : LObjID SetOfObject SetOfObjState
  eq o2o-theorem01(IDX,S_Y,St_Y)
     = not (S_Y = empObj) and uniqX(S_Y) and allObjInStates(S_Y,St_Y) implies YOfXInStates(S_Y,IDX,St_Y) .

  pred o2o-theorem02 : Object Object SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq o2o-theorem02(Y,Y',S_X,St_X,S_Y,St_Y)
     = changeObjState(Y,Y') and (state(Y') \in St_Y) implies
        (ifXInStatesThenYInStates(S_X,St_X,(Y S_Y),St_Y)
         implies ifXInStatesThenYInStates(S_X,St_X,(Y' S_Y),St_Y)) .

  pred o2o-theorem03 : SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq o2o-theorem03(S_X,St_X,S_Y,St_Y)
     = uniqX(S_Y) and allObjInStates(S_Y,St_Y) implies ifXInStatesThenYInStates(S_X,St_X,S_Y,St_Y) .

  pred o2o-theorem04 : Object Object SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq o2o-theorem04(Y,Y',S_X,St_X,S_Y,St_Y)
     = not existObj(S_X,link(Y)) and changeObjState(Y,Y') implies
        (ifXInStatesThenYInStates(S_X,St_X,(Y S_Y),St_Y)
         implies ifXInStatesThenYInStates(S_X,St_X,(Y' S_Y),St_Y)) .

  pred o2o-theorem05 : Object Object SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq o2o-theorem05(Y,Y',S_X,St_X,S_Y,St_Y)
     = changeObjState(Y,Y') and not (state(Y) \in St_Y) implies
        (ifXInStatesThenYInStates(S_X,St_X,(Y S_Y),St_Y)
         implies ifXInStatesThenYInStates(S_X,St_X,(Y' S_Y),St_Y)) .
}

--> ****************************************************************************************
--> Prove o2o-theorem01 = not (S_Y = empObj) and uniqX(S_Y) and allObjInStates(S_Y,St_Y)
-->                          implies YOfXInStates(S_Y,IDX,St_Y).
--> ****************************************************************************************
--> Base Case     : S_Y is empty.
open O2O-THEOREMS .
  red o2o-theorem01(idX,empObj,setSY) .
close
--> Induction Case: S_Y is not empty.
--> Induction Case(1): Adding y linking to idX.
open O2O-THEOREMS .
  eq (setY = empObj) = false .
  eq link(y1) = idX .
  eq (state(y1) \in setSY) = true .
  red o2o-theorem01(idX,setY,setSY) implies o2o-theorem01(idX,(y1 setY),setSY) .
close
--> Induction Case(2): Adding y not linking to idX.
open O2O-THEOREMS .
  eq (setY = empObj) = false .
  eq (link(y2) = idX) = false .
  red o2o-theorem01(idX,setY,setSY) implies o2o-theorem01(idX,(y2 setY),setSY) .
close

--> *******************************************************************
--> Prove o2o-theorem02(Y,Y',S_X,St_X,S_Y,St_Y)
-->     = changeObjState(Y,Y') and (state(Y') \in St_Y) implies
-->        (ifXInStatesThenYInStates(S_X,St_X,(Y S_Y),St_Y)
-->         implies ifXInStatesThenYInStates(S_X,St_X,(Y' S_Y),St_Y)) .
--> *******************************************************************
--> Base Case     : S_X is empty.
open O2O-THEOREMS .
  red o2o-theorem02(y,y',empLObj,setSX,setY,setSY) .
close
--> Induction Case: S_X is not empty.
--> Case 1: link(y) = link(y') = id(x).
open O2O-THEOREMS .
  eq link(y) = id(x) .
  eq link(y') = id(x) .
  red o2o-theorem02(y,y',setX,setSX,setY,setSY) implies o2o-theorem02(y,y',(x setX),setSX,setY,setSY) .
close
--> Case 2: link(y) = id(x) but link(y') /= id(x).
open O2O-THEOREMS .
  eq link(y) = id(x) .
  eq (link(y') = id(x)) = false .
  red o2o-theorem02(y,y',setX,setSX,setY,setSY) implies o2o-theorem02(y,y',(x setX),setSX,setY,setSY) .
close
--> Case 3: link(y') = id(x) but link(y) /= id(x).
open O2O-THEOREMS .
  eq (link(y) = id(x)) = false .
  eq link(y') = id(x) .
  red o2o-theorem02(y,y',setX,setSX,setY,setSY) implies o2o-theorem02(y,y',(x setX),setSX,setY,setSY) .
close
--> Case 4: link(y) /= id(x) and link(y') /= id(x).
open O2O-THEOREMS .
  eq (link(y) = id(x)) = false .
  eq (link(y') = id(x)) = false .
  red o2o-theorem02(y,y',setX,setSX,setY,setSY) implies o2o-theorem02(y,y',(x setX),setSX,setY,setSY) .
close

--> ******************************************************************************
--> Prove o2o-theorem03 = uniqX(S_Y) and allObjInStates(S_Y,St_Y)
-->                         implies ifXInStatesThenYInStates(S_X,SX,S_Y,St_Y) .
--> ******************************************************************************
--> Case 1: S_Y is empty.
open O2O-THEOREMS .
  red o2o-theorem03(setX,setSX,empObj,setSY) .
close
--> Case 2: S_Y is not empty.
--> Nested Base Case     : S_X is empty.
open O2O-THEOREMS .
  eq (setY = empObj) = false .
  red o2o-theorem03(empLObj,sx,setY,setSY) .
close
--> Nested Induction Case(1): S_X is not empty.
--> (1-1) X is in St_X .
--> (2-1) S_Y is empty.
open O2O-THEOREMS .
  eq (setY = empObj) = false .
  eq (state(x1) \in setSX) = true .
  red o2o-theorem03(setX,setSX,empObj,setSY) implies o2o-theorem03((x1 setX),setSX,empObj,setSY) .
close
--> Nested Induction Case(2): S_X is not empty.
--> (1-1) X is in St_X .
--> (2-2) S_Y is not empty.
open O2O-THEOREMS .
  eq (setY = empObj) = false .
  eq (state(x1) \in setSX) = true .
  -- o2o-theorem01 = not (S_Y = empObj) and uniqX(S_Y) and allObjInStates(S_Y,St_Y)
  --                          implies YOfXInStates(S_Y,IDX,St_Y).
  eq (uniqX(setY) and allObjInStates(setY,setSY) and YOfXInStates(setY,IDX,setSY))
     = (uniqX(setY) and allObjInStates(setY,setSY)) .
  red o2o-theorem03(setX,setSX,setY,setSY) implies o2o-theorem03((x1 setX),setSX,setY,setSY) .
close
--> Nested Induction Case(3): S_X is not empty.
--> (1-2) X is not in St_X .
open O2O-THEOREMS .
  eq (setY = empObj) = false .
  eq (state(x2) \in setSX) = false .
  red o2o-theorem03(setX,setSX,setY,setSY) implies o2o-theorem03((x2 setX),setSX,setY,setSY) .
close

--> ************************************************************************************
--> Prove o2o-theorem04 = not existObj(S_X,link(Y)) and changeObjState(Y,Y') implies
-->                     (ifXInStatesThenYInStates(S_X,St_X,(Y S_Y),St_Y)
-->                      implies ifXInStatesThenYInStates(S_X,St_X,(Y' S_Y),St_Y)) .
--> ************************************************************************************
--> Base Case     : S_X is empty.
open O2O-THEOREMS .
  red o2o-theorem04(y,y',empLObj,setSX,setY,setSY) .
close
--> Induction Case: S_X is not empty.
--> Case 1: link(y) = link(y') = id(x).
open O2O-THEOREMS .
  eq link(y) = id(x) .
  eq link(y') = id(x) .
  red o2o-theorem04(y,y',setX,setSX,setY,setSY) implies o2o-theorem04(y,y',(x setX),setSX,setY,setSY) .
close
--> Case 2: link(y) = id(x) but link(y') /= id(x).
open O2O-THEOREMS .
  eq link(y) = id(x) .
  eq (link(y') = id(x)) = false .
  red o2o-theorem04(y,y',setX,setSX,setY,setSY) implies o2o-theorem04(y,y',(x setX),setSX,setY,setSY) .
close
--> Case 3: link(y') = id(x) but link(y) /= id(x).
open O2O-THEOREMS .
  eq (link(y) = id(x)) = false .
  eq link(y') = id(x) .
  red o2o-theorem04(y,y',setX,setSX,setY,setSY) implies o2o-theorem04(y,y',(x setX),setSX,setY,setSY) .
close
--> Case 4: link(y) /= id(x) and link(y') /= id(x).
open O2O-THEOREMS .
  eq (link(y) = id(x)) = false .
  eq (link(y') = id(x)) = false .
  red o2o-theorem04(y,y',setX,setSX,setY,setSY) implies o2o-theorem04(y,y',(x setX),setSX,setY,setSY) .
close

--> *******************************************************************
--> Prove o2o-theorem05(Y,Y',S_X,St_X,S_Y,St_Y)
-->     = changeObjState(Y,Y') and not (state(Y) \in St_Y) implies
-->        (ifXInStatesThenYInStates(S_X,St_X,(Y S_Y),St_Y)
-->         implies ifXInStatesThenYInStates(S_X,St_X,(Y' S_Y),St_Y)) .
--> *******************************************************************
--> Base Case     : S_X is empty.
open O2O-THEOREMS .
  red o2o-theorem05(y,y',empLObj,setSX,setY,setSY) .
close
--> Induction Case: S_X is not empty.
--> Case 1: link(y) = link(y') = id(x).
open O2O-THEOREMS .
  eq link(y) = id(x) .
  eq link(y') = id(x) .
  red o2o-theorem05(y,y',setX,setSX,setY,setSY) implies o2o-theorem05(y,y',(x setX),setSX,setY,setSY) .
close
--> Case 2: link(y) = id(x) but link(y') /= id(x).
open O2O-THEOREMS .
  eq link(y) = id(x) .
  eq (link(y') = id(x)) = false .
  red o2o-theorem05(y,y',setX,setSX,setY,setSY) implies o2o-theorem05(y,y',(x setX),setSX,setY,setSY) .
close
--> Case 3: link(y') = id(x) but link(y) /= id(x).
open O2O-THEOREMS .
  eq (link(y) = id(x)) = false .
  eq link(y') = id(x) .
  red o2o-theorem05(y,y',setX,setSX,setY,setSY) implies o2o-theorem05(y,y',(x setX),setSX,setY,setSY) .
close
--> Case 4: link(y) /= id(x) and link(y') /= id(x).
open O2O-THEOREMS .
  eq (link(y) = id(x)) = false .
  eq (link(y') = id(x)) = false .
  red o2o-theorem05(y,y',setX,setSX,setY,setSY) implies o2o-theorem05(y,y',(x setX),setSX,setY,setSY) .
close

module! CYCLE-THEOREMS {
  pr(TMPCYCLE)

  -- Since noCycleStructure(S) only uses DDS(O,S), it should be an invariant 
  -- if it holds in initial states and DDS(O,S) is same in any reachable states.
  -- Then, cyc-theorem01 ensures noCycleInState(S) is also an invariant.

  pred cyc-theorem01 : State
  eq cyc-theorem01(S:State)
     = noCycleStructure(S) implies noCycleInState(S) .

  pred lemma : SetOfObject SetOfObject State
  eq lemma(SetO:SetOfObject,V:SetOfObject,S:State)
     = noCycleStructure(SetO,V,S) implies noCycle(SetO,V,S) .

  ops s s' : -> State
  op o : -> Object
  ops setO v : -> SetOfObject

  -- Axioms
  eq (o \in empObj) = false .
  eq (o empObj) = o .
}

--> ******************************************************
--> Prove cyc-theorem01(S)
-->      = noCycleStructure(S) implies noCycleInState(S) .
--> ******************************************************
open CYCLE-THEOREMS .
  red lemma(getAllObjInState(s),empObj,s) implies cyc-theorem01(s) .
close
--> ******************************************************
--> Prove lemma(SetO,V,S)
-->     = noCycleStructure(SetO,V,S) implies noCycle(SetO,V,S) .
--> ******************************************************
--> Base Case: There is no node.
open CYCLE-THEOREMS .
  red lemma(empObj,v,s) .
close
--> Induction Case: There is at leas one node.
--> Case 1: The state of the node is not sx.
open CYCLE-THEOREMS .
  eq (state(o) = sx) = false .
  red lemma(setO,v,s) implies lemma((o setO),v,s) .
close
--> Case 2: The state of the node is sx,
-->         o is in v.
open CYCLE-THEOREMS .
  eq (o \in v) = true .
  eq state(o) = sx .
  red lemma(setO,v,s) implies lemma((o setO),v,s) .
close
--> Case 3: The state of the node is sx,
-->         o is not in v.
open CYCLE-THEOREMS .
  eq (o \in v) = false .
  eq state(o) = sx .
  red lemma(setO,v,s) and lemma(DDS(o,s),(o v),s)
      implies lemma((o setO),v,s) .
close
