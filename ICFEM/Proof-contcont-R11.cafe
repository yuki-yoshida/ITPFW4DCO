require ProofContCont Proof-contcont.cafe

-- As to rule R01, we have checked all possible cases, however,
-- here we will omit irrevant cases in which wfs(S) does not hold and thus contcont(S) holds.

--> ***********************************************************************
--> ctrans [R11]:
-->    < SetND, SetCP, 
-->      (req(connectsTo,IDRQ,unbound,IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), 
-->      (opMsg(IDCP) MP) >
--> => < SetND, SetCP, 
-->      (req(connectsTo,IDRQ,waiting,IDND) SetRQ), (rel(connectsTo,IDRL,IDCP,IDRQ) SetRL), MP >
-->    if state(getNode(SetND,IDND)) = created .
--> ***********************************************************************
--> Rule R11 makes a connectsTo requirement be waiting, so next applied rules may be Rule R12.
--> Case 1: The condition of R11 does not hold in S, otherwise
--> Case 2-38:
-->  #     C1        N1
-->  2     closed    *       -> not reachable
-->  3/4   open      initial -> not reachable
-->  5-37  open      created -> Cyclic Dependency Theorem ensures that contcont holds.
-->  38    open      started -> R10 is applicable
-->  39/40 available *       -> R12 is applicable

--> Case 1:
--> (1-1) The condition of R11 does not hold.
--> In this case, there is no applicable rule.
open ProofContCont .
  eq (state(getNode(sND,idND)) = created) = false .
  red contcont(< sND, sCP,
  	      	 (req(connectsTo,idRQ,unbound,idND) sRQ), 
		 (rel(connectsTo,idRL,idCP,idRQ) sRL), 
      		 (opMsg(idCP) mp) >,
               SS:State,CC:Bool) .
close
--> Case 2:
--> (1-2) The condition of R11 holds, which means that
-->       the node of the requirement is created.
--> (2-1) The corresponding capability is closed.
--> This case will be rejected inv-ifOpenMsgThenCPActivated(S).
open ProofContCont .
  eq inv(S:State) = inv-ifOpenMsgThenCPActivated(S) .
  eq sCP = (cap(connectsTo,idCP,closed,idND1) sCP') .
  eq sND = (node(tnd,idND,created) sND') .
  red contcont(< sND, sCP,
  	      	 (req(connectsTo,idRQ,unbound,idND) sRQ), 
		 (rel(connectsTo,idRL,idCP,idRQ) sRL), 
      		 (opMsg(idCP) mp) >,
               SS:State,CC:Bool) .
close
--> Case 3:
--> (1-2) The condition of R11 holds, which means that
-->       the node of the requirement is created.
--> (2-2) The corresponding capability is open.
--> (3-1) The node of the capability is initial,
--> (4-1) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND1,ready) holds.
--> This case will be rejected by inv-ifNDInitialThenCPClosed(S).
open ProofContCont .
  eq inv(S:State) = inv-ifNDInitialThenCPClosed(S) .
  eq allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND1,ready) = true .
  eq sND' = (node(tnd',idND1,initial) sND'') .
  eq sCP = (cap(connectsTo,idCP,open,idND1) sCP') .
  eq sND = (node(tnd,idND,created) sND') .
  red contcont(< sND, sCP,
  	      	 (req(connectsTo,idRQ,unbound,idND) sRQ), 
		 (rel(connectsTo,idRL,idCP,idRQ) sRL), 
      		 (opMsg(idCP) mp) >,
               SS:State,CC:Bool) .
close
--> Case 4:
--> (1-2) The condition of R11 holds, which means that
-->       the node of the requirement is created.
--> (2-2) The corresponding capability is open.
--> (3-1) The node of the capability is initial,
--> (4-2) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND1,ready) does not hold.
--> This case will be rejected by inv-ifNDInitialThenCPClosed(S).
open ProofContCont .
  eq inv(S:State) = inv-ifNDInitialThenCPClosed(S) .
  eq allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND1,ready) = false .
  eq sND' = (node(tnd',idND1,initial) sND'') .
  eq sCP = (cap(connectsTo,idCP,open,idND1) sCP') .
  eq sND = (node(tnd,idND,created) sND') .
  red contcont(< sND, sCP,
  	      	 (req(connectsTo,idRQ,unbound,idND) sRQ), 
		 (rel(connectsTo,idRL,idCP,idRQ) sRL), 
      		 (opMsg(idCP) mp) >,
               SS:State,CC:Bool) .
close
--> Case 5-37:
--> (1-2) The condition of R11 holds, which means that
-->       the node of the requirement is created and SCP is open or available.
--> (2-2) The corresponding capability is open.
--> (3-2) The node N1 of the capability is created.
-->       Cyclic Dependency Theorem allows us to assume that DDSR02(N1,S) does not include created nodes.
--> In this case, the proofs are same as Case 11-43 of contcont(S) for R02.

--> Case 38:
--> (1-2) The condition of R11 holds, which means that
-->       the node of the requirement is created and SCP is open or available.
--> (2-2) The corresponding capability is open.
--> (3-2) The node of the capability is started.
--> In this case, Rule R10 can be applied to SS.
open ProofContCont .
  eq sND' = (node(tnd',idND1,started) sND'') .
  eq sCP = (cap(connectsTo,idCP,open,idND1) sCP') .
  eq sND = (node(tnd,idND,created) sND') .
  red contcont(< sND, sCP,
  	      	 (req(connectsTo,idRQ,unbound,idND) sRQ), 
		 (rel(connectsTo,idRL,idCP,idRQ) sRL), 
      		 (opMsg(idCP) mp) >,
               SS:State,CC:Bool) .
close
--> Case 39:
--> (1-2) The condition of R11 holds, which means that
-->       the node of the requirement is created and SCP is open or available.
--> (2-3) The corresponding capability is available.
--> (5-1) avMsg(idCP) is not in MP.
--> This case will be rejected by inv-ifConnectsToCPAvailableThenRQReadyOrAvailableMsg(S).
open ProofContCont .
  eq inv(S:State) = inv-ifConnectsToCPAvailableThenRQReadyOrAvailableMsg(S) .
  eq (avMsg(idCP) \in mp) = false .
  eq sCP = (cap(connectsTo,idCP,available,idND1) sCP') .
  eq sND = (node(tnd,idND,created) sND') .
  red contcont(< sND, sCP,
  	      	 (req(connectsTo,idRQ,unbound,idND) sRQ), 
		 (rel(connectsTo,idRL,idCP,idRQ) sRL), 
      		 (opMsg(idCP) mp) >,
               SS:State,CC:Bool) .
close
--> Case 40:
--> (1-2) The condition of R11 holds, which means that
-->       the node of the requirement is created and SCP is open or available.
--> (2-3) The corresponding capability is available.
--> (5-2) avMsg(idCP) is in MP.
--> In this case, Rule R12 can be applied to SS.
open ProofContCont .
  eq mp = (avMsg(idCP) mp') .
  eq sCP = (cap(connectsTo,idCP,available,idND1) sCP') .
  eq sND = (node(tnd,idND,created) sND') .
  red contcont(< sND, sCP,
  	      	 (req(connectsTo,idRQ,unbound,idND) sRQ), 
		 (rel(connectsTo,idRL,idCP,idRQ) sRL), 
      		 (opMsg(idCP) mp) >,
               SS:State,CC:Bool) .
close

