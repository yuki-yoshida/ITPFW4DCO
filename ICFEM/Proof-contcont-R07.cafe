require ProofContCont Proof-contcont.cafe

-- As to rule R01, we have checked all possible cases, however,
-- here we will omit irrevant cases in which wfs(S) does not hold and thus contcont(S) holds.

--> ***********************************************************************
--> ctrans [R07]:
-->    < SetND, (cap(dependsOn,IDCP,SCP,IDND1) SetCP), 
-->  	      (req(dependsOn,IDRQ,unbound,IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP >
--> => < SetND, (cap(dependsOn,IDCP,SCP,IDND1) SetCP), 
--> 	      (req(dependsOn,IDRQ,waiting,IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP >
-->    if state(getNode(SetND,IDND2)) = created and isActivated(SCP) .
--> ***********************************************************************
--> Rule R07 makes a dependsOn requirement be waiting, so next applied rules may be Rule R08.
--> Case 1: The condition of R07 does not hold in S, otherwise
--> Case 2-38:
-->  #     C1        N1
-->  2/3   open      initial -> not reachable
-->  4-36  open      created -> Cyclic Dependency Theorem ensures that contcont holds.
-->  37    open      started -> R06 is applicable
-->  38    available *       -> R08 is applicable

--> Case 1:
--> (1-1) The condition of R07 does not hold.
--> In this case, there is no applicable rule.
open ProofContCont .
  eq (state(getNode(sND,idND2)) = created and isActivated(scp)) = false .
  red contcont(< sND, 
      	         (cap(dependsOn,idCP,scp,idND1) sCP), 
  	      	 (req(dependsOn,idRQ,unbound,idND2) sRQ), 
		 (rel(dependsOn,idRL,idCP,idRQ) sRL), 
		 mp >,
               SS:State,CC:Bool) .
close
--> Case 2:
--> (1-2) The condition of R07 holds, which means that
-->       the node of the requirement is created and SCP is open or available.
--> (2-1) SCP is open.
--> (3-1) The node of the capability is initial,
--> (4-1) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND1,ready) holds.
--> This case will be rejected by inv-ifNDInitialThenCPClosed(S).
open ProofContCont .
  eq inv(S:State) = inv-ifNDInitialThenCPClosed(S) .
  eq allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND1,ready) = true .
  eq sND' = (node(tnd',idND1,initial) sND'') .
  eq scp = open .
  eq sND = (node(tnd,idND2,created) sND') .
  red contcont(< sND, 
      	         (cap(dependsOn,idCP,scp,idND1) sCP), 
  	      	 (req(dependsOn,idRQ,unbound,idND2) sRQ), 
		 (rel(dependsOn,idRL,idCP,idRQ) sRL), 
		 mp >,
               SS:State,CC:Bool) .
close
--> Case 3:
--> (1-2) The condition of R07 holds, which means that
-->       the node of the requirement is created and SCP is open or available.
--> (2-1) SCP is open.
--> (3-1) The node of the capability is initial,
--> (4-2) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND1,ready) does not hold.
--> This case will be rejected by inv-ifNDInitialThenCPClosed(S).
open ProofContCont .
  eq inv(S:State) = inv-ifNDInitialThenCPClosed(S) .
  eq allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND1,ready) = false .
  eq sND' = (node(tnd',idND1,initial) sND'') .
  eq scp = open .
  eq sND = (node(tnd,idND2,created) sND') .
  red contcont(< sND, 
      	         (cap(dependsOn,idCP,scp,idND1) sCP), 
  	      	 (req(dependsOn,idRQ,unbound,idND2) sRQ), 
		 (rel(dependsOn,idRL,idCP,idRQ) sRL), 
		 mp >,
               SS:State,CC:Bool) .
close
--> Case 4-36:
--> (1-2) The condition of R07 holds, which means that
-->       the node of the requirement is created and SCP is open or available.
--> (2-1) SCP is open.
--> (3-2) The node N1 of the capability is created.
-->       Cyclic Dependency Theorem allows us to assume that DDSR02(N1,S) does not include created nodes.
--> In this case, the proofs are same as Case 11-43 of contcont(S) for R02.

--> Case 37:
--> (1-2) The condition of R07 holds, which means that
-->       the node of the requirement is created and SCP is open or available.
--> (2-1) SCP is open.
--> (3-2) The node of the capability is started.
--> In this case, Rule R06 can be applied to SS.
open ProofContCont .
  eq sND' = (node(tnd',idND1,started) sND'') .
  eq scp = open .
  eq sND = (node(tnd,idND2,created) sND') .
  red contcont(< sND, 
      	         (cap(dependsOn,idCP,scp,idND1) sCP), 
  	      	 (req(dependsOn,idRQ,unbound,idND2) sRQ), 
		 (rel(dependsOn,idRL,idCP,idRQ) sRL), 
		 mp >,
               SS:State,CC:Bool) .
close
--> Case 38:
--> (1-2) The condition of R07 holds, which means that
-->       the node of the requirement is created and SCP is open or available.
--> (2-2) SCP is available.
--> In this case, Rule R08 can be applied to SS.
open ProofContCont .
  eq scp = available .
  eq sND = (node(tnd,idND2,created) sND') .
  red contcont(< sND, 
      	         (cap(dependsOn,idCP,scp,idND1) sCP), 
  	      	 (req(dependsOn,idRQ,unbound,idND2) sRQ), 
		 (rel(dependsOn,idRL,idCP,idRQ) sRL), 
		 mp >,
               SS:State,CC:Bool) .
close
