require Proof Proof.cafe

--> ****************************
--> (1) init(S) implies cont(S).
--> ****************************
--> Rule R01 is the first one to be applied. It requires at least one initial node.
--> Case 1: There is no node.
--> Case 2: There is a created node.
--> Case 3: There is a started node.
--> Case 4-12: There is an initial node.
-->         Cyclic Dependency Theorem allows us to assume that
-->         DDSR01 of the node does not contain initial nodes.
--> Case 4: The condition of R01 holds, otherwise
--> Case 5-12: There is at least one HostedOn requirement (R1) that is not ready.
-->  #   R1      C1 N1
-->  5-9 unbound *  initial -> a contradiction
-->  10  unbound *  created -> not initial state
-->  11  unbound *  started -> not initial state
-->  12  waiting *  *       -> not initial state

module! ProofInitCont {
  pr(PROOFfuns)
  pred initcont : State .
  eq initcont(S:State) = init(S) implies cont(S) .
}
--> Case 1:
--> (1-1) sND is empty, i.e. sND = empND.
open ProofInitCont .
  eq sND = empND .
  red initcont(< sND, sCP, sRQ, sRL, mp >) .
  --> to be true because init(S) does not hold.
close
--> Case 2:
--> (1-2) sND has a node,
--> (2-1) it is created.
open ProofInitCont .
  eq sND = (node(tnd,idND,created) sND') .
  red initcont(< sND, sCP, sRQ, sRL, mp >) .
  --> to be true because init(S) does not hold.
close
--> Case 3:
--> (1-2) sND has a node,
--> (2-2) it is started.
open ProofInitCont .
  eq sND = (node(tnd,idND,started) sND') .
  red initcont(< sND, sCP, sRQ, sRL, mp >) .
  --> to be true because init(S) does not hold.
close
--> Case 4:
--> (1-2) sND has a node,
--> (2-3) it is initial then
-->       Cyclic Dependency Theorem ensures that
-->       there is a node X which is initial and DDSR01(X,S) does not include initial nodes
-->       and we can assume that X is the node idND.
--> (3-1) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND,ready) holds.
open ProofInitCont .
  eq allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND,ready) = true .
  eq sND = (node(tnd,idND,initial) sND') .
  red initcont(< sND, sCP, sRQ, sRL, mp >) .
  --> to be true because cont(S) holds.
close
--> Case 5:
--> (1-2) sND has a node,
--> (2-3) it is initial then
-->       Cyclic Dependency Theorem ensures that
-->       there is a node X which is initial and DDSR01(X,S) does not include initial nodes
-->       and we can assume that X is the node idND.
--> (3-2) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND,ready) does not hold, which means
-->       there is at least one HostedOn requirement of X which is not ready, 
-->       i.e. sRQ = (req(hostedOn,idRQ,SRQ,idND) sRQ'),
--> (4-1) SRQ is unbound,
--> (5-1) onlyOneRLOfRQ(sRL,idRQ) does not hold.
--> This case is rejected by wfs-allRQHaveRL(S) .
open ProofInitCont .
  eq wfs(S:State) = wfs-allRQHaveRL(S) .
  eq onlyOneRLOfRQ(sRL,idRQ) = false .
  eq sRQ = (req(hostedOn,idRQ,unbound,idND) sRQ') .
  eq sND = (node(tnd,idND,initial) sND') .
  red initcont(< sND, sCP, sRQ, sRL, mp >) .
close
--> Case 6:
--> (1-2) sND has a node,
--> (2-3) it is initial then
-->       Cyclic Dependency Theorem ensures that
-->       there is a node X which is initial and DDSR01(X,S) does not include initial nodes
-->       and we can assume that X is the node idND.
--> (3-2) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND,ready) does not hold, which means
-->       there is at least one HostedOn requirement of X which is not ready, 
-->       i.e. sRQ = (req(hostedOn,idRQ,SRQ,idND) sRQ'),
--> (4-1) SRQ is unbound,
--> (5-2) onlyOneRLOfRQ(sRL,idRQ) holds, which means sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL'),
--> (6-1) existCP(sCP,idCP) does not hold.
--> This case is rejected by wfs-allRLHaveCP(S) .
open ProofInitCont .
  eq wfs(S:State) = wfs-allRLHaveCP(S) .
  eq existCP(sCP,idCP) = false .
  eq sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL') .
  eq sRQ = (req(hostedOn,idRQ,unbound,idND) sRQ') .
  eq sND = (node(tnd,idND,initial) sND') .
  red initcont(< sND, sCP, sRQ, sRL, mp >) .
close
--> Case 7:
--> (1-2) sND has a node,
--> (2-3) it is initial then
-->       Cyclic Dependency Theorem ensures that
-->       there is a node X which is initial and DDSR01(X,S) does not include initial nodes
-->       and we can assume that X is the node idND.
--> (3-2) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND,ready) does not hold, which means
-->       there is at least one HostedOn requirement of X which is not ready, 
-->       i.e. sRQ = (req(hostedOn,idRQ,SRQ,idND) sRQ'),
--> (4-1) SRQ is unbound,
--> (5-2) onlyOneRLOfRQ(sRL,idRQ) holds, which means sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL'),
--> (6-2) existCP(sCP,idCP) holds, which means sCP = (cap(hostedOn,idCP,scp,IDND1) sCP'),
--> (7-1) IDND1 is idND .
--> This case is rejected by wfs-allRLNotInSameND(S) .
open ProofInitCont .
  eq wfs(S:State) = wfs-allRLNotInSameND(S) .
  eq sCP = (cap(hostedOn,idCP,scp,idND) sCP') .
  eq sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL') .
  eq sRQ = (req(hostedOn,idRQ,unbound,idND) sRQ') .
  eq sND = (node(tnd,idND,initial) sND') .
  red initcont(< sND, sCP, sRQ, sRL, mp >) .
close
--> Case 8:
--> (1-2) sND has a node,
--> (2-3) it is initial then
-->       Cyclic Dependency Theorem ensures that
-->       there is a node X which is initial and DDSR01(X,S) does not include initial nodes
-->       and we can assume that X is the node idND.
--> (3-2) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND,ready) does not hold, which means
-->       there is at least one HostedOn requirement of X which is not ready, 
-->       i.e. sRQ = (req(hostedOn,idRQ,SRQ,idND) sRQ'),
--> (4-1) SRQ is unbound,
--> (5-2) onlyOneRLOfRQ(sRL,idRQ) holds, which means sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL'),
--> (6-2) existCP(sCP,idCP) holds, which means sCP = (cap(hostedOn,idCP,scp,IDND1) sCP'),
--> (7-2) IDND1 is not idND, i.e. idND1,
--> (8-1) existND(sND',idND1) does not hold.
--> This case is rejected by wfs-allCPHaveND(S) .
open ProofInitCont .
  eq wfs(S:State) = wfs-allCPHaveND(S) .
  eq existND(sND',idND1) = false .
  eq sCP = (cap(hostedOn,idCP,scp,idND1) sCP') .
  eq sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL') .
  eq sRQ = (req(hostedOn,idRQ,unbound,idND) sRQ') .
  eq sND = (node(tnd,idND,initial) sND') .
  red initcont(< sND, sCP, sRQ, sRL, mp >) .
close
--> Case 9:
--> (1-2) sND has a node,
--> (2-3) it is initial then
-->       Cyclic Dependency Theorem ensures that
-->       there is a node X which is initial and DDSR01(X,S) does not include initial nodes
-->       and we can assume that X is the node idND.
--> (3-2) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND,ready) does not hold, which means
-->       there is at least one HostedOn requirement of X which is not ready, 
-->       i.e. sRQ = (req(hostedOn,idRQ,SRQ,idND) sRQ'),
--> (4-1) SRQ is unbound,
--> (5-2) onlyOneRLOfRQ(sRL,idRQ) holds, which means sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL'),
--> (6-2) existCP(sCP,idCP) holds, which menas sCP = (cap(hostedOn,idCP,scp,IDND1) sCP'),
--> (7-2) IDND1 is not idND, i.e. idND1,
--> (8-2) existND(sND',idND1) holds, which means sND' has a node of idND1,
-->       i.e. sND' = (node(tnd',idND1,SND) sND''),
--> (9-1) SND is initial.
--> This case will be rejected by the constraint that DDSR01(X,S) does not include initial nodes.
open ProofInitCont .
  eq sND' = (node(tnd',idND1,initial) sND'') .
  eq sCP = (cap(hostedOn,idCP,scp,idND1) sCP') .
  eq sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL') .
  eq sRQ = (req(hostedOn,idRQ,unbound,idND) sRQ') .
  eq sND = (node(tnd,idND,initial) sND') .
  red allNDInStates(DDSR01(node(tnd,idND,initial),< sND, sCP, sRQ, sRL, mp >),(created started)) = false .
--  red initcont(< sND, sCP, sRQ, sRL, mp >) .
close
--> Case 10:
--> (1-2) sND has a node,
--> (2-3) it is initial then
-->       Cyclic Dependency Theorem ensures that
-->       there is a node X which is initial and DDSR01(X,S) does not include initial nodes
-->       and we can assume that X is the node idND.
--> (3-2) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND,ready) does not hold, which means
-->       there is at least one HostedOn requirement of X which is not ready, 
-->       i.e. sRQ = (req(hostedOn,idRQ,SRQ,idND) sRQ'),
--> (4-1) SRQ is unbound,
--> (5-2) onlyOneRLOfRQ(sRL,idRQ) holds, which means sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL'),
--> (6-2) existCP(sCP,idCP) holds, which menas sCP = (cap(hostedOn,idCP,scp,IDND1) sCP'),
--> (7-2) IDND1 is not idND, i.e. idND1,
--> (8-2) existND(sND',idND1) holds, which means sND' has a node of idND1,
-->       i.e. sND' = (node(tnd',idND1,SND) sND''),
--> (9-2) SND is created.
open ProofInitCont .
  eq sND' = (node(tnd',idND1,created) sND'') .
  eq sCP = (cap(hostedOn,idCP,scp,idND1) sCP') .
  eq sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL') .
  eq sRQ = (req(hostedOn,idRQ,unbound,idND) sRQ') .
  eq sND = (node(tnd,idND,initial) sND') .
  red initcont(< sND, sCP, sRQ, sRL, mp >) .
close
--> Case 11:
--> (1-2) sND has a node,
--> (2-3) it is initial then
-->       Cyclic Dependency Theorem ensures that
-->       there is a node X which is initial and DDSR01(X,S) does not include initial nodes
-->       and we can assume that X is the node idND.
--> (3-2) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND,ready) does not hold, which means
-->       there is at least one HostedOn requirement of X which is not ready, 
-->       i.e. sRQ = (req(hostedOn,idRQ,SRQ,idND) sRQ'),
--> (4-1) SRQ is unbound,
--> (5-2) onlyOneRLOfRQ(sRL,idRQ) holds, which means sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL'),
--> (6-2) existCP(sCP,idCP) holds, which menas sCP = (cap(hostedOn,idCP,scp,IDND1) sCP'),
--> (7-2) IDND1 is not idND, i.e. idND1,
--> (8-2) existND(sND',idND1) holds, which means sND' has a node of idND1,
-->       i.e. sND' = (node(tnd',idND1,SND) sND''),
--> (9-3) SND is started.
open ProofInitCont .
  eq sND' = (node(tnd',idND1,started) sND'') .
  eq sCP = (cap(hostedOn,idCP,scp,idND1) sCP') .
  eq sRL = (rel(hostedOn,idRL,idCP,idRQ) sRL') .
  eq sRQ = (req(hostedOn,idRQ,unbound,idND) sRQ') .
  eq sND = (node(tnd,idND,initial) sND') .
  red initcont(< sND, sCP, sRQ, sRL, mp >) .
close
--> Case 12:
--> (1-2) sND has a node,
--> (2-3) it is initial then
-->       Cyclic Dependency Theorem ensures that
-->       there is a node X which is initial and DDSR01(X,S) does not include initial nodes
-->       and we can assume that X is the node idND.
--> (3-2) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND,ready) does not hold, which means
-->       there is at least one HostedOn requirement of X which is not ready, 
-->       i.e. sRQ = (req(hostedOn,idRQ,SRQ,idND) sRQ'),
--> (4-2) SRQ is waiting.
open ProofInitCont .
  eq sRQ = (req(hostedOn,idRQ,waiting,idND) sRQ') .
  eq sND = (node(tnd,idND,initial) sND') .
  red initcont(< sND, sCP, sRQ, sRL, mp >) .
close
