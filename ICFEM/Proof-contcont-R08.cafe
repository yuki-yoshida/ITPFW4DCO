require ProofContCont Proof-contcont.cafe

-- As to rule R01, we have checked all possible cases, however,
-- here we will omit irrevant cases in which wfs(S) does not hold and thus contcont(S) holds.

--> **************************************************************************************************
--> trans [R08]:
-->    < SetND, (cap(dependsOn,IDCP,available,IDND1) SetCP), 
--> 	      (req(dependsOn,IDRQ,waiting,IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP >
--> => < SetND, (cap(dependsOn,IDCP,available,IDND1) SetCP), 
--> 	      (req(dependsOn,IDRQ,ready,  IDND2) SetRQ), (rel(dependsOn,IDRL,IDCP,IDRQ) SetRL), MP > .
--> **************************************************************************************************
--> Rule R08 makes a dependsOn requirement be ready, so next applied rules may be Rule R02.
--> Case 1-37:
-->  #     N1
-->  1/2   initial -> not reachable
-->  3-36  created -> R02 is applicalble or Cyclic Dependency Theorem ensures that contcont holds.
-->  37    started -> not reachable

--> Case 1:
--> (1-1) The node N1 of the requirement is initial,
--> (2-1) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND2,ready) holds.
--> This case will be rejected by inv-ifNDInitialThenRQUnboundReady(S).
open ProofContCont .
  eq inv(S:State) = inv-ifNDInitialThenRQUnboundReady(S) .
  eq allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND2,ready) = true .
  eq sND = (node(tnd,idND2,initial) sND') .
  red contcont(< sND, 
      		 (cap(dependsOn,idCP,available,idND1) sCP), 
		 (req(dependsOn,idRQ,waiting,idND2) sRQ), 
		 (rel(dependsOn,idRL,idCP,idRQ) sRL),
		 mp >,
               SS:State,CC:Bool) .
close
--> Case 2:
--> (1-1) The node N1 of the requirement is initial,
--> (2-2) allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND2,ready) does not hold.
--> This case will be rejected by inv-ifNDInitialThenRQUnboundReady(S).
open ProofContCont .
  eq inv(S:State) = inv-ifNDInitialThenRQUnboundReady(S) .
  eq allRQOfNDInStates(filterRQ(sRQ,hostedOn),idND2,ready) = false .
  eq sND = (node(tnd,idND2,initial) sND') .
  red contcont(< sND, 
      		 (cap(dependsOn,idCP,available,idND1) sCP), 
		 (req(dependsOn,idRQ,waiting,idND2) sRQ), 
		 (rel(dependsOn,idRL,idCP,idRQ) sRL),
		 mp >,
               SS:State,CC:Bool) .
close
--> Case 3:
--> (1-2) The node N1 of the requirement is created,
-->       Cyclic Dependency Theorem allows us to assume that DDSR02(N1,S) does not include created nodes.
--> (3-1) allRQOfNDInStates(sRQ,idND2,ready) holds.
--> In this case, Rule R02 can be applied to SS.
open ProofContCont .
  eq allRQOfNDInStates(sRQ,idND2,ready) = true .
  eq sND = (node(tnd,idND2,created) sND') .
  red contcont(< sND, 
      		 (cap(dependsOn,idCP,available,idND1) sCP), 
		 (req(dependsOn,idRQ,waiting,idND2) sRQ), 
		 (rel(dependsOn,idRL,idCP,idRQ) sRL),
		 mp >,
               SS:State,CC:Bool) .
close
--> Case 4-36:
--> (1-2) The node N1 of the requirement is created,
-->       Cyclic Dependency Theorem allows us to assume that DDSR02(N1,S) does not include created nodes.
--> (3-2) allRQOfNDInStates(sRQ,idND2,ready) does not hold.
--> In this case, the proofs are same as Case 11-43 of contcont(S) for R02.

--> Case 37:
--> (1-3) The node N1 of the requirement is started.
--> This case will be rejected by inv-ifNDStartedThenRQReady(S).
open ProofContCont .
  eq inv(S:State) = inv-ifNDStartedThenRQReady(S).
  eq sND = (node(tnd,idND2,started) sND') .
  red contcont(< sND, 
      		 (cap(dependsOn,idCP,available,idND1) sCP), 
		 (req(dependsOn,idRQ,waiting,idND2) sRQ), 
		 (rel(dependsOn,idRL,idCP,idRQ) sRL),
		 mp >,
               SS:State,CC:Bool) .
close
