require SET ../lib/SET.cafe
provide Template

module OBJECT {
  -- Sorts
  [Object] [ObjID] [ObjType] [ObjState]

  -- Selectors
  op id : Object -> ObjID
  op type : Object -> ObjType
  op state : Object -> ObjState
}

module OBJECT2 {
  including(OBJECT)
  -- Selectors
  op state2 : Object -> ObjState
}

module OBJECT3 {
  including(OBJECT2)
  -- Selectors
  op state3 : Object -> ObjState
}

module -SET+NAT {
  including(SET + NAT)

  op #_ : Set -> Nat
  eq # empty = 0 .
  eq # (E:Elt.X S:Set) = 1 + # S .
}

module -SETOBJECT(OBJ :: OBJECT) {
  including(-SET+NAT(OBJ {sort Elt -> Object})
      * {sort Set -> SetOfObject,
      	 op empty -> empObj})
  including(-SET+NAT(OBJ {sort Elt -> ObjState})
      * {sort Set -> SetOfObjState,
      	 op empty -> empState})
}

module -PRMOBJPRED1 {
  [Object < SetOfObject]
  op empObj : -> SetOfObject {constr}
  op _ _ : SetOfObject SetOfObject -> SetOfObject {constr assoc comm id: empObj}
  [Arg]
  pred p : Object Arg
}

module -ALLOBJPRED1(P :: -PRMOBJPRED1) {
  pred allObjP : SetOfObject Arg
  pred allObjNotP : SetOfObject Arg
  pred someObjP : SetOfObject Arg
  pred onlyOneObjP : SetOfObject Arg

  var A : Arg
  var O : Object
  var S_O : SetOfObject

  eq allObjP(empObj,A)
     = true .
  eq allObjP((O S_O),A)
     = p(O,A) and allObjP(S_O,A) .

  eq allObjNotP(empObj,A)
     = true .
  eq allObjNotP((O S_O),A)
     = not p(O,A) and allObjNotP(S_O,A) .

  eq someObjP(empObj,A)
     = false .
  eq someObjP((O S_O),A)
     = p(O,A) or someObjP(S_O,A) .

  eq onlyOneObjP(empObj,A)
     = false .
  eq onlyOneObjP(O:Object S:SetOfObject, A:Arg)
     = if p(O,A) then allObjNotP(S,A) else onlyOneObjP(S,A) fi .

}

module -PRMOBJPRED2 {
  [Object < SetOfObject]
  op empObj : -> SetOfObject  {constr}
  op _ _ : SetOfObject SetOfObject -> SetOfObject {constr assoc comm id: empObj}
  [Arg1 Arg2]
  pred p : Object Arg1 Arg2
}

module -ALLOBJPRED2(P :: -PRMOBJPRED2) {
  pred allObjP : SetOfObject Arg1 Arg2
  pred allObjNotP : SetOfObject Arg1 Arg2
  pred someObjP : SetOfObject Arg1 Arg2
  pred onlyOneObjP : SetOfObject Arg1 Arg2

  var A1 : Arg1
  var A2 : Arg2
  var O : Object
  var S_O : SetOfObject

  eq allObjP(empObj,A1,A2)
     = true .
  eq allObjP((O S_O),A1,A2)
     = p(O,A1,A2) and allObjP(S_O,A1,A2) .

  eq allObjNotP(empObj,A1,A2)
     = true .
  eq allObjNotP((O S_O),A1,A2)
     = not p(O,A1,A2) and allObjNotP(S_O,A1,A2) .

  eq someObjP(empObj,A1,A2)
     = false .
  eq someObjP((O S_O),A1,A2)
     = p(O,A1,A2) or someObjP(S_O,A1,A2) . 

  eq onlyOneObjP(empObj,A1,A2)
     = false .
  eq onlyOneObjP(O:Object S:SetOfObject, A1:Arg1, A2:Arg2)
     = if p(O,A1,A2) then allObjNotP(S,A1,A2) else onlyOneObjP(S,A1,A2) fi .

}

module -PRMOBJPRED3 {
  [Object < SetOfObject]
  op empObj : -> SetOfObject {constr}
  op _ _ : SetOfObject SetOfObject -> SetOfObject {constr assoc comm id: empObj}
  [Arg1 Arg2 Arg3]
  pred p : Object Arg1 Arg2 Arg3
}

module -ALLOBJPRED3(P :: -PRMOBJPRED3) {
  pred allObjP : SetOfObject Arg1 Arg2 Arg3
  pred allObjNotP : SetOfObject Arg1 Arg2 Arg3
  pred someObjP : SetOfObject Arg1 Arg2 Arg3
  pred onlyOneObjP : SetOfObject Arg1 Arg2 Arg3

  var A1 : Arg1
  var A2 : Arg2
  var A3 : Arg3
  var O : Object
  var S_O : SetOfObject

  eq allObjP(empObj,A1,A2,A3)
     = true .
  eq allObjP((O S_O),A1,A2,A3)
     = p(O,A1,A2,A3) and allObjP(S_O,A1,A2,A3) .

  eq allObjNotP(empObj,A1,A2,A3)
     = true .
  eq allObjNotP((O S_O),A1,A2,A3)
     = not p(O,A1,A2,A3) and allObjNotP(S_O,A1,A2,A3) .

  eq someObjP(empObj,A1,A2,A3)
     = false .
  eq someObjP((O S_O),A1,A2,A3)
     = p(O,A1,A2,A3) or someObjP(S_O,A1,A2,A3) . 

  eq onlyOneObjP(empObj,A1,A2,A3)
     = false .
  eq onlyOneObjP(O:Object S:SetOfObject, A1:Arg1, A2:Arg2, A3:Arg3)
     = if p(O,A1,A2,A3) then allObjNotP(S,A1,A2,A3) else onlyOneObjP(S,A1,A2,A3) fi .

}

module -PRMOBJBASE {
  including(-SETOBJECT)

  -- Basic operators
  pred _>_ : ObjState ObjState

  op null : -> Object {constr}
  ceq (O:Object = null ) = false
    if not (O == null) .
  ceq (ID:ObjID = id(null) ) = false
    if not (ID == id(null)) .
  ceq (T:ObjType = type(null) ) = false
    if not (T == type(null)) .
  ceq (ST:ObjState = state(null) ) = false
    if not (ST == state(null)) .

  eq (O1:Object = O2:Object)
      = (id(O1) = id(O2)) .

  -- sort ObjIDLt should be renamed.
  [ObjIDLt < ObjID]
  eq (I1:ObjIDLt = I2:ObjIDLt) = (I1 == I2) .

  -- sort ObjTypeLt should be renamed,
  -- and literals should be defined.
  [ObjTypeLt < ObjType]
  eq (T1:ObjTypeLt = T2:ObjTypeLt) = (T1 == T2) .

  -- sort ObjStateLt should be renamed,
  -- and literals should be defined.
  [ObjStateLt < ObjState]
  eq (S1:ObjStateLt = S2:ObjStateLt) = (S1 == S2) .

  pred hasID : Object ObjID
  pred isType : Object ObjType
  pred isInStates0 : Object SetOfObjState

  eq hasID(O:Object,ID:ObjID)
     = id(O) = ID .

  eq isType(O:Object,T:ObjType)
     = type(O) = T .

  eq isInStates0(O:Object,SetS:SetOfObjState)
     = state(O) in SetS .

  pred ifOfTypeThenInStates0 : Object ObjType SetOfObjState
  eq ifOfTypeThenInStates0(O:Object,T:ObjType,SetSO:SetOfObjState)
     = (type(O) = T) implies (state(O) in SetSO) .

  pred hasIDInStates0 : Object ObjID SetOfObjState
  eq hasIDInStates0(O:Object,ID:ObjID,SetS:SetOfObjState)
     = hasID(O,ID) and isInStates0(O,SetS) .
    
}

module -OBJECTBASE0-lemma {

  including(-ALLOBJPRED1(-PRMOBJBASE {sort Arg -> ObjID,
  	                             op p -> hasID})
                    * {op someObjP -> existObj})

  including(-ALLOBJPRED1(-PRMOBJBASE {sort Arg -> SetOfObjState,
  			             op p -> isInStates0})
                    * {op allObjP -> allObjInStates0,
		       op allObjNotP -> allObjNotInStates0,
		       op someObjP -> someObjInStates0})

  including(-ALLOBJPRED2(-PRMOBJBASE {sort Arg1 -> ObjType,
                                     sort Arg2 -> SetOfObjState,
  			             op p -> ifOfTypeThenInStates0})
                    * {op allObjP -> allObjOfTypeInStates0})

  including(-ALLOBJPRED2(-PRMOBJBASE {sort Arg1 -> ObjID,
                                     sort Arg2 -> SetOfObjState,
  			             op p -> hasIDInStates0})
                    * {op someObjP -> existObjInStates0})

  pred uniqObj : SetOfObject
  op #ObjInStates0 : SetOfObjState SetOfObject -> Nat
  op getObject : SetOfObject ObjID -> Object
  
  var ID : ObjID
  var O : Object
  var S_O : SetOfObject
  var S_St : SetOfObjState

  eq uniqObj(empObj)
     = true .
  eq uniqObj((O S_O))
     = not existObj(S_O,id(O)) and uniqObj(S_O) .

  eq #ObjInStates0(S_St,empObj)
     = 0 .
  eq #ObjInStates0(S_St,(O S_O))
     = if (state(O) in S_St) then 1 else 0 fi
       + #ObjInStates0(S_St,S_O) .

  eq getObject(empObj,ID)
     = null .
  eq getObject((O:Object S:SetOfObject),ID:ObjID)
     = if (id(O) = ID) then O else getObject(S,ID) fi .
}

module -OBJECTBASE0 {
  including(-OBJECTBASE0-lemma)

  -- Proved Lemmas
  var ID : ObjID
  vars O O' : Object
  vars S_O S_O' S_O1 S_O2 : SetOfObject
  var St : ObjState 
  var S_St : SetOfObjState
  var OT : ObjType

  eq [base-lemma01]:
      (existObj(S_O,ID) and existObj((O S_O),ID))
     = existObj(S_O,ID) .

  eq [base-lemma02]:
      ((id(O) = ID) and existObj((O S_O),ID))
     = (id(O) = ID) .

  eq [base-lemma03]:
      (allObjInStates0(S_O,(St S_St)) and 
       #ObjInStates0(St,S_O) = 0 and
       allObjInStates0(S_O,S_St))
     = (allObjInStates0(S_O,(St S_St)) and #ObjInStates0(St,S_O) = 0) .

  ceq [base-lemma04]:
      (allObjInStates0(S_O,St) and
       allObjOfTypeInStates0(S_O,OT,S_St))
     = allObjInStates0(S_O,St) 
     if St in S_St .

  ceq [base-lemma05]:
    getObject(S_O,ID) = null
    if not existObj(S_O,ID) .

  ceq [set-lemma07]:
      ((O' in O) and (O' in S_O))
     = (O' in O)
     if O in S_O .

  eq [set-lemma08]:
      ((O in S_O) and (O in (S_O S_O')))
     = (O in S_O) .

  eq [set-lemma09]:
      (subset(S_O,S_O') and subset(S_O,(O S_O')))
     = subset(S_O,S_O') .

  ceq [set-lemma10]:
      (subset(S_O2,S_O) and subset((S_O1 S_O2),S_O))
     = subset(S_O2,S_O)
     if subset(S_O1,S_O) .

  eq [set-lemma11]:
      (subset(S_O,S_O1) and subset(S_O,(S_O1 S_O2)))
     = subset(S_O,S_O1) .

  eq [set-lemma12]:
     subset(S_O,S_O) = true .

  ceq [set-lemma13]:
      (subset(S_O1,S_O2) and subset(S_O1,S_O))
     = subset(S_O1,S_O2)
     if subset(S_O2,S_O) .
}

module OBJECTBASE(OBJ :: OBJECT) {
  including(-OBJECTBASE0(OBJ)
                    * {op #ObjInStates0 -> #ObjInStates,
                       op existObjInStates0 -> existObjInStates,
                       op allObjOfTypeInStates0 -> allObjOfTypeInStates,
                       op allObjNotInStates0 -> allObjNotInStates,
                       op allObjInStates0 -> allObjInStates,
                       op someObjInStates0 -> someObjInStates,
                       op hasIDInStates0 -> hasIDInStates,
                       op ifOfTypeThenInStates0 -> ifOfTypeThenInStates,
                       op isInStates0 -> isInStates})
}

module OBJECTBASE2(OBJ :: OBJECT2) {
  including(-OBJECTBASE0(OBJECTBASE(OBJ) {op state -> state2})
                    * {op #ObjInStates0 -> #ObjInStates2,
                       op existObjInStates0 -> existObjInStates2,
                       op allObjOfTypeInStates0 -> allObjOfTypeInStates2,
                       op allObjNotInStates0 -> allObjNotInStates2,
                       op allObjInStates0 -> allObjInStates2,
                       op someObjInStates0 -> someObjInStates2,
                       op hasIDInStates0 -> hasIDInStates2,
                       op ifOfTypeThenInStates0 -> ifOfTypeThenInStates2,
                       op isInStates0 -> isInStates2})
  ceq (ST:ObjState = state2(null) ) = false
    if not (ST == state2(null)) .
}

module OBJECTBASE3(OBJ :: OBJECT3) {
  including(-OBJECTBASE0(OBJECTBASE2(OBJ) {op state -> state3})
                    * {op #ObjInStates0 -> #ObjInStates3,
                       op existObjInStates0 -> existObjInStates3,
                       op allObjOfTypeInStates0 -> allObjOfTypeInStates3,
                       op allObjNotInStates0 -> allObjNotInStates3,
                       op allObjInStates0 -> allObjInStates3,
                       op someObjInStates0 -> someObjInStates3,
                       op hasIDInStates0 -> hasIDInStates3,
                       op ifOfTypeThenInStates0 -> ifOfTypeThenInStates3,
                       op isInStates0 -> isInStates3})
  ceq (ST:ObjState = state3(null) ) = false
    if not (ST == state3(null)) .
}

module PRMOBJLINK {
  -- Source Object
  [Object < SetOfObject]
  op null : -> Object {constr}
  op empObj : -> SetOfObject {constr}
  [ObjID]
  [ObjType]
  pred existObj : SetOfObject ObjID
  op getObject : SetOfObject ObjID -> Object
  [ObjState < SetOfObjState]
  op empState : -> SetOfObjState {constr}
  pred allObjInStates : SetOfObject SetOfObjState

  -- The followings are usually not renamed.
  op _ _ : SetOfObject SetOfObject -> SetOfObject {constr assoc comm id: empObj}
  op _ _ : SetOfObjState SetOfObjState -> SetOfObjState {constr assoc comm id: empState}
  op id : Object -> ObjID
  op type : Object -> ObjType
  op state : Object -> ObjState
  pred _>_ : ObjState ObjState
  pred _in_ : Object SetOfObject
  pred _in_ : ObjState SetOfObjState
  pred subset : SetOfObject SetOfObject

  -- Target Object 
  [LObject < SetOfLObject]
  op empLObj : -> SetOfLObject {constr}
  [LObjID]
  pred existObj : SetOfLObject LObjID
  op getObject : SetOfLObject LObjID -> LObject
  [LObjState < SetOfLObjState]
  op empState : -> SetOfLObjState {constr}
  pred allObjInStates : SetOfLObject SetOfLObjState
  pred existObjInStates : SetOfLObject LObjID SetOfLObjState

  -- Linking Objects which exist zero or many
  op link : Object -> LObjID

  -- The followings are usually not renamed.
  op _ _ : SetOfLObject SetOfLObject -> SetOfLObject {constr assoc comm}
  op _ _ : SetOfLObjState SetOfLObjState -> SetOfLObjState {constr assoc comm id: empState}
  op id : LObject -> LObjID
  op state : LObject -> LObjState
  pred _>_ : LObjState LObjState
  pred _in_ : LObject SetOfLObject
  pred _in_ : LObjState SetOfLObjState
  pred subset : SetOfLObject SetOfLObject
}

module PRMOBJLINK2 {
  including(PRMOBJLINK)
  pred allObjInStates2 : SetOfObject SetOfObjState
  op state2 : Object -> ObjState
  pred allObjInStates2 : SetOfLObject SetOfLObjState
  pred existObjInStates2 : SetOfLObject LObjID SetOfLObjState
  op state2 : LObject -> LObjState
}

module PRMOBJLINK3 {
  including(PRMOBJLINK2)
  pred allObjInStates3 : SetOfObject SetOfObjState
  op state3 : Object -> ObjState
  pred allObjInStates3 : SetOfLObject SetOfLObjState
  pred existObjInStates3 : SetOfLObject LObjID SetOfLObjState
  op state3 : LObject -> LObjState
}

module -PRMOBJLINKPRED(LINK :: PRMOBJLINK) {
  pred hasLObj : Object SetOfLObject
  eq hasLObj(O:Object,SetLO:SetOfLObject)
     = existObj(SetLO,link(O)) .

  pred ifOfXThenInStates0 : Object LObjID SetOfObjState
  eq ifOfXThenInStates0(O:Object,LOID:LObjID,SetSO:SetOfObjState)
     = (link(O) = LOID) implies (state(O) in SetSO) .

  pred ifOfTypeOfXThenInStates0 : Object ObjType LObjID SetOfObjState
  eq ifOfTypeOfXThenInStates0(O:Object,T:ObjType,LOID:LObjID,SetSO:SetOfObjState)
     = (type(O) = T) and (link(O) = LOID) implies (state(O) in SetSO) .

  pred isOfX : Object LObjID
  eq isOfX(O:Object,LOID:LObjID)
     = (link(O) = LOID) .
  
  pred changeObjState0 : Object Object
  eq changeObjState0(O1:Object,O2:Object)
     = (id(O1) = id(O2)) and 
       (link(O1) = link(O2)) and 
       (type(O1) = type(O2)) and
       (state(O1) >  state(O2)) .

  pred changeObjState0 : LObject LObject
  eq changeObjState0(LO1:LObject,LO2:LObject)
     = (id(LO1) = id(LO2)) and 
       (state(LO1) > state(LO2)) .
}

module -OBJLINKMANY2ONE0-lemma(LINK :: PRMOBJLINK) {
  -- one X has zero or many coressponding Z
  -- Z has a link to X

  including(-ALLOBJPRED1(-PRMOBJLINKPRED(LINK) 
			 {sort Arg -> SetOfLObject,
			  op p -> hasLObj})
                    * {op allObjP -> allZHaveX})

  including(-ALLOBJPRED2(-PRMOBJLINKPRED(LINK)
			 {sort Arg1 -> LObjID,
			  sort Arg2 -> SetOfObjState
			  op p -> ifOfXThenInStates0})
                    * {op allObjP -> allZOfXInStates0})

  including(-ALLOBJPRED3(-PRMOBJLINKPRED(LINK)
			 {sort Arg1 -> ObjType,
			  sort Arg2 -> LObjID,
			  sort Arg3 -> SetOfObjState
			  op p -> ifOfTypeOfXThenInStates0})
                    * {op allObjP -> allZOfTypeOfXInStates0})
  var X : LObject
  var Z : Object
  var IDX : LObjID
  var S_X : SetOfLObject
  var S_Z : SetOfObject
  var St_X : SetOfLObjState
  var St_Z : SetOfObjState
  var OT : ObjType

  ceq (IDX = link(null) ) = false
    if not (IDX == link(null)) .

  pred ifXInStatesThenZInStates0 : SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq ifXInStatesThenZInStates0(empLObj,St_X,S_Z,St_Z)
     = true .
  eq ifXInStatesThenZInStates0(S_X,St_X,empObj,St_Z)
     = true .
  ceq ifXInStatesThenZInStates0((X S_X),St_X,S_Z,St_Z)
     = ((state(X) in St_X) implies allZOfXInStates0(S_Z,id(X),St_Z))
       and ifXInStatesThenZInStates0(S_X,St_X,S_Z,St_Z)
     if not (S_Z = empObj) .

  pred ifXInStatesThenZOfTypeInStates0 : SetOfLObject SetOfLObjState SetOfObject ObjType SetOfObjState
  eq ifXInStatesThenZOfTypeInStates0(empLObj,St_X,S_Z,OT,St_Z)
     = true .
  eq ifXInStatesThenZOfTypeInStates0(S_X,St_X,empObj,OT,St_Z)
     = true .
  ceq ifXInStatesThenZOfTypeInStates0((X S_X),St_X,S_Z,OT,St_Z)
     = ((state(X) in St_X) implies allZOfTypeOfXInStates0(S_Z,OT,id(X),St_Z))
       and ifXInStatesThenZOfTypeInStates0(S_X,St_X,S_Z,OT,St_Z)
     if not (S_Z = empObj) .

  op getXOfZ : SetOfLObject Object -> LObject
  eq getXOfZ(empLObj,Z)
     = empLObj .
  eq getXOfZ(S_X,Z)
     = getObject(S_X,link(Z)) .

  op getXsOfZs : SetOfLObject SetOfObject -> SetOfLObject
  eq getXsOfZs(S_X,empObj)
     = empLObj .
  eq getXsOfZs(S_X,(Z S_Z))
     = (getXOfZ(S_X,Z) getXsOfZs(S_X,S_Z)) .

  op getXsOfZsInStates0 : SetOfLObject SetOfObject SetOfLObjState -> SetOfLObject
  op getXsOfZsInStates0 : SetOfLObject SetOfLObject SetOfObject SetOfLObjState -> SetOfLObject
  eq getXsOfZsInStates0(empLObj,S_Z,St_X)
     = empLObj .
  eq getXsOfZsInStates0(S_X,empObj,St_X)
     = empLObj .
  ceq getXsOfZsInStates0(S_X,(Z S_Z),St_X)
     = getXsOfZsInStates0(getXOfZ(S_X,Z),S_X,S_Z,St_X)
     if not S_X = empLObj .

  eq getXsOfZsInStates0(empLObj,S_X,S_Z,St_X)
     = getXsOfZsInStates0(S_X,S_Z,St_X) .
  eq getXsOfZsInStates0(X,S_X,S_Z,St_X)
     = if (state(X) in St_X) then
          (X getXsOfZsInStates0(S_X,S_Z,St_X))
       else
          getXsOfZsInStates0(S_X,S_Z,St_X)
       fi .

  op getZsOfX : SetOfObject LObjID -> SetOfObject
  op getZsOfX : SetOfObject LObject -> SetOfObject
  eq getZsOfX(S_Z,X)
     = getZsOfX(S_Z,id(X)) .
  eq getZsOfX(empObj,IDX)
     = empObj .
  eq getZsOfX((Z S_Z),IDX)
     = if (IDX = link(Z)) then
         (Z getZsOfX(S_Z,IDX))
       else
         getZsOfX(S_Z,IDX)
       fi .

  op getZsOfTypeOfX : SetOfObject ObjType LObjID -> SetOfObject
  op getZsOfTypeOfX : SetOfObject ObjType LObject -> SetOfObject
  eq getZsOfTypeOfX(S_Z,OT,X)
     = getZsOfTypeOfX(S_Z,OT,id(X)) .
  eq getZsOfTypeOfX(empObj,OT,IDX)
     = empObj .
  eq getZsOfTypeOfX((Z S_Z),OT,IDX)
     = if (OT = type(Z) and IDX = link(Z)) then
         (Z getZsOfTypeOfX(S_Z,OT,IDX))
       else
         getZsOfTypeOfX(S_Z,OT,IDX)
       fi .

  op getZsOfXs : SetOfObject SetOfLObject -> SetOfObject
  eq getZsOfXs(S_Z,empLObj)
     = empObj .
  eq getZsOfXs(S_Z,(X S_X))
     = (getZsOfX(S_Z,X) getZsOfXs(S_Z,S_X)) .

  op getZsOfTypeOfXs : SetOfObject ObjType SetOfLObject -> SetOfObject
  eq getZsOfTypeOfXs(S_Z,OT,empLObj)
     = empObj .
  eq getZsOfTypeOfXs(S_Z,OT,(X S_X))
     = (getZsOfTypeOfX(S_Z,OT,X) getZsOfTypeOfXs(S_Z,OT,S_X)) .

  op getZsOfXInStates0 : SetOfObject LObjID SetOfObjState -> SetOfObject
  op getZsOfXInStates0 : SetOfObject LObject SetOfObjState -> SetOfObject
  eq getZsOfXInStates0(S_Z,X,St_Z)
     = getZsOfXInStates0(S_Z,id(X),St_Z) .
  eq getZsOfXInStates0(empObj,IDX,St_Z)
     = empObj .
  eq getZsOfXInStates0((Z S_Z),IDX,St_Z)
     = if (IDX = link(Z)) and (state(Z) in St_Z) then
         (Z getZsOfXInStates0(S_Z,IDX,St_Z))
       else
         getZsOfXInStates0(S_Z,IDX,St_Z)
       fi .

  op getZsOfTypeOfXInStates0 : SetOfObject ObjType LObjID SetOfObjState -> SetOfObject
  op getZsOfTypeOfXInStates0 : SetOfObject ObjType LObject SetOfObjState -> SetOfObject
  eq getZsOfTypeOfXInStates0(S_Z,OT,X,St_Z)
     = getZsOfTypeOfXInStates0(S_Z,OT,id(X),St_Z) .
  eq getZsOfTypeOfXInStates0(empObj,OT,IDX,St_Z)
     = empObj .
  eq getZsOfTypeOfXInStates0((Z S_Z),OT,IDX,St_Z)
     = if (OT = type(Z)) and (IDX = link(Z)) and (state(Z) in St_Z) then
         (Z getZsOfTypeOfXInStates0(S_Z,OT,IDX,St_Z))
       else
         getZsOfTypeOfXInStates0(S_Z,OT,IDX,St_Z)
       fi .

  op getZsOfXsInStates0 : SetOfObject SetOfLObject SetOfObjState -> SetOfObject
  eq getZsOfXsInStates0(empObj,S_X,St_Z)
     = empObj .
  eq getZsOfXsInStates0(S_Z,empLObj,St_Z)
     = empObj .
  ceq getZsOfXsInStates0(S_Z,(X S_X),St_Z)
     = (getZsOfXInStates0(S_Z,X,St_Z) getZsOfXsInStates0(S_Z,S_X,St_Z)) 
     if not S_Z = empObj .

  op getZsOfTypeOfXsInStates0 : SetOfObject ObjType SetOfLObject SetOfObjState -> SetOfObject
  eq getZsOfTypeOfXsInStates0(S_Z,OT,empLObj,St_Z)
     = empObj .
  eq getZsOfTypeOfXsInStates0(S_Z,OT,(X S_X),St_Z)
     = (getZsOfTypeOfXInStates0(S_Z,OT,X,St_Z) getZsOfTypeOfXsInStates0(S_Z,OT,S_X,St_Z)) .
}

module -OBJLINKMANY2ONE0 {
  including(-OBJLINKMANY2ONE0-lemma)

  -- Proved Lemmas
  vars X X' : LObject
  vars Z Z' : Object
  var IDX : LObjID
  var IDZ : ObjID
  vars S_X S_X' : SetOfLObject
  vars S_Z S_Z' : SetOfObject
  var SX : LObjState
  var SZ : ObjState
  var St_X : SetOfLObjState
  var St_Z : SetOfObjState
  var OT : ObjType

  ceq [m2o-lemma01]:
      (allObjInStates(S_Z,SZ) and
       allZOfXInStates0(S_Z,IDX,St_Z))
     = allObjInStates(S_Z,SZ)
     if (SZ in St_Z) .

  ceq [m2o-lemma02]:
      (allObjInStates(S_Z,SZ) and
       allZOfTypeOfXInStates0(S_Z,OT,IDX,St_Z))
     = allObjInStates(S_Z,SZ)
     if (SZ in St_Z) .

  ceq [m2o-lemma03]:
      (allZOfXInStates0(S_Z,link(Z),St_Z) and
       (state(Z) in St_Z))
     = allZOfXInStates0(S_Z,link(Z),St_Z)
     if (Z in S_Z) .

  ceq [m2o-lemma04]:
      ((getZsOfXInStates0(S_Z,IDX,SZ) = empObj) and
       allZOfXInStates0(S_Z,IDX,St_Z) )
     = (getZsOfXInStates0(S_Z,IDX,SZ) = empObj)
     if allZOfXInStates0(S_Z,IDX,(SZ St_Z)) .

  ceq [m2o-lemma05]:
      (allZHaveX(S_Z,(X S_X)) and
       allZHaveX(S_Z,(X' S_X)))
     = allZHaveX(S_Z,(X S_X))
     if changeObjState0(X,X') .

  ceq [m2o-lemma06]:
      (allObjInStates(S_Z,SZ) and 
       ifXInStatesThenZInStates0(S_X,St_X,S_Z,St_Z))
     = allObjInStates(S_Z,SZ)
     if (SZ in St_Z) .

  ceq [m2o-lemma07]:
      (allObjInStates(S_X,SX) and
       ifXInStatesThenZInStates0(S_X,St_X,S_Z,St_Z))
     = allObjInStates(S_X,SX)
     if not (SX in St_X) .

  ceq [m2o-lemma08]:
      (ifXInStatesThenZInStates0(S_X,St_X,(Z S_Z),St_Z) and
       ifXInStatesThenZInStates0(S_X,St_X,(Z' S_Z),St_Z))
     = ifXInStatesThenZInStates0(S_X,St_X,(Z S_Z),St_Z)
     if not existObj(S_X,link(Z)) and changeObjState0(Z,Z') .

  eq [m2o-lemma09]:
      (ifXInStatesThenZInStates0(S_X,St_X,(Z S_Z),St_Z) and
       ifXInStatesThenZInStates0(S_X,St_X,S_Z,St_Z))
     = ifXInStatesThenZInStates0(S_X,St_X,(Z S_Z),St_Z) .
  
  ceq [m2o-lemma10]:
      (ifXInStatesThenZInStates0((X S_X),St_X,S_Z,St_Z) and
       ifXInStatesThenZInStates0((X' S_X),St_X,S_Z,St_Z))
     = ifXInStatesThenZInStates0((X S_X),St_X,S_Z,St_Z)
     if not (state(X') in St_X) and changeObjState0(X,X') .

  ceq [m2o-lemma11]:
      (ifXInStatesThenZInStates0(S_X,St_X,(Z S_Z),St_Z) and
       ifXInStatesThenZInStates0(S_X,St_X,(Z' S_Z),St_Z))
     = ifXInStatesThenZInStates0(S_X,St_X,(Z S_Z),St_Z)
     if (state(Z') in St_Z) and changeObjState0(Z,Z') .

  ceq [m2o-lemma12]:
      (ifXInStatesThenZInStates0((X S_X),St_X,S_Z,St_Z) and
       ifXInStatesThenZInStates0((X' S_X),St_X,S_Z,St_Z))
     = ifXInStatesThenZInStates0((X S_X),St_X,S_Z,St_Z)
     if allZOfXInStates0(S_Z,id(X'),St_Z) and changeObjState0(X,X') .

  ceq [m2o-lemma13]:
      (ifXInStatesThenZInStates0(S_X,St_X,(Z S_Z),St_Z) and
       ifXInStatesThenZInStates0(S_X,St_X,(Z' S_Z),St_Z))
     = ifXInStatesThenZInStates0(S_X,St_X,(Z S_Z),St_Z)
     if not (state(Z) in St_Z) and changeObjState0(Z,Z') .

  ceq [m2o-lemma14]:
      (allObjInStates(S_Z,SZ) and
       ifXInStatesThenZOfTypeInStates0(S_X,St_X,S_Z,OT,St_Z))
     = allObjInStates(S_Z,SZ)
     if (SZ in St_Z) .

  ceq [m2o-lemma15]:
      (allObjInStates(S_X,SX) and
       ifXInStatesThenZOfTypeInStates0(S_X,St_X,S_Z,OT,St_Z))
     = allObjInStates(S_X,SX)
     if not (SX in St_X) .

  ceq [m2o-lemma16]:
      (ifXInStatesThenZOfTypeInStates0(S_X,St_X,(Z S_Z),OT,St_Z) and
       ifXInStatesThenZOfTypeInStates0(S_X,St_X,(Z' S_Z),OT,St_Z))
     = ifXInStatesThenZOfTypeInStates0(S_X,St_X,(Z S_Z),OT,St_Z)
     if not existObj(S_X,link(Z)) and changeObjState0(Z,Z') .

  eq [m2o-lemma17]:
      (ifXInStatesThenZOfTypeInStates0(S_X,St_X,(Z S_Z),OT,St_Z) and
       ifXInStatesThenZOfTypeInStates0(S_X,St_X,S_Z,OT,St_Z))
     = ifXInStatesThenZOfTypeInStates0(S_X,St_X,(Z S_Z),OT,St_Z) .

  ceq [m2o-lemma18]:
      (ifXInStatesThenZOfTypeInStates0((X S_X),St_X,S_Z,OT,St_Z) and
       ifXInStatesThenZOfTypeInStates0((X' S_X),St_X,S_Z,OT,St_Z))
     = ifXInStatesThenZOfTypeInStates0((X S_X),St_X,S_Z,OT,St_Z)
     if not (state(X') in St_X) and changeObjState0(X,X') .

  ceq [m2o-lemma19]:
      (ifXInStatesThenZOfTypeInStates0(S_X,St_X,(Z S_Z),OT,St_Z) and
       ifXInStatesThenZOfTypeInStates0(S_X,St_X,(Z' S_Z),OT,St_Z))
     = ifXInStatesThenZOfTypeInStates0(S_X,St_X,(Z S_Z),OT,St_Z)
     if (state(Z') in St_Z) and changeObjState0(Z,Z') .

  ceq [m2o-lemma20]:
      (ifXInStatesThenZOfTypeInStates0((X S_X),St_X,S_Z,OT,St_Z) and
       ifXInStatesThenZOfTypeInStates0((X' S_X),St_X,S_Z,OT,St_Z))
     = ifXInStatesThenZOfTypeInStates0((X S_X),St_X,S_Z,OT,St_Z)
     if allZOfTypeOfXInStates0(S_Z,OT,id(X'),St_Z) and changeObjState0(X,X') .

  ceq [m2o-lemma21]:
      (ifXInStatesThenZOfTypeInStates0(S_X,St_X,(Z S_Z),OT,St_Z) and
       ifXInStatesThenZOfTypeInStates0(S_X,St_X,(Z' S_Z),OT,St_Z))
     = ifXInStatesThenZOfTypeInStates0(S_X,St_X,(Z S_Z),OT,St_Z)
     if not (type(Z) = OT) and changeObjState0(Z,Z') .

  ceq [m2o-lemma22]:
     (getObject(S_X,link(Z)) in getXsOfZsInStates0(S_X,S_Z,St_X)) = true
     if not S_X = empLObj and (state(getObject(S_X,link(Z))) in St_X) and (Z in S_Z) .

  eq [m2o-lemma23]:
      (subset(S_Z,S_Z') and
       subset(getXsOfZsInStates0(S_X,S_Z,St_X),getXsOfZsInStates0(S_X,S_Z',St_X)))
     = subset(S_Z,S_Z') .

  ceq [m2o-lemma24]:
       subset(getXsOfZsInStates0((X' S_X),S_Z,St_X),getXsOfZsInStates0((X S_X),S_Z,St_X))
     = true
     if changeObjState0(X,X') and not state(X') in St_X .

  ceq [m2o-lemma25]:
     subset(getZsOfXInStates0(S_Z,id(X),St_Z),getZsOfXsInStates0(S_Z,S_X,St_Z)) = true
     if X in S_X .

  eq [m2o-lemma26]:
      (subset(S_X,S_X') and
       subset(getZsOfXsInStates0(S_Z,S_X,St_Z),getZsOfXsInStates0(S_Z,S_X',St_Z)))
     = subset(S_X,S_X') .

  ceq [m2o-lemma27]:
     subset(getZsOfXsInStates0((Z' S_Z),S_X,St_Z),getZsOfXsInStates0((Z S_Z),S_X,St_Z)) = true
     if changeObjState0(Z,Z') and not state(Z') in St_Z .

  ceq [m2o-lemma28]:
     subset(getZsOfXInStates0((Z' S_Z),X,St_Z),getZsOfXInStates0((Z S_Z),X,St_Z)) = true
     if changeObjState0(Z,Z') and not state(Z') in St_Z .
}

module OBJLINKMANY2ONE(LINK :: PRMOBJLINK) {
  including(-OBJLINKMANY2ONE0(LINK)
	     * {op allZOfTypeOfXInStates0 -> allZOfTypeOfXInStates,
		op allZOfXInStates0 -> allZOfXInStates,
		op changeObjState0 -> changeObjState,
		op getXsOfZsInStates0 -> getXsOfZsInStates,
		op getZsOfTypeOfXsInStates0 -> getZsOfTypeOfXsInStates,
		op getZsOfXsInStates0 -> getZsOfXsInStates,
		op getZsOfTypeOfXInStates0 -> getZsOfTypeOfXInStates,
		op getZsOfXInStates0 -> getZsOfXInStates,
		op ifOfTypeOfXThenInStates0 -> ifOfTypeOfXThenInStates,
		op ifOfXThenInStates0 -> ifOfXThenInStates,
		op ifXInStatesThenZInStates0 -> ifXInStatesThenZInStates,
		op ifXInStatesThenZOfTypeInStates0 -> ifXInStatesThenZOfTypeInStates})
}

module OBJLINKMANY2ONE2(LINK :: PRMOBJLINK2) {
  including(-OBJLINKMANY2ONE0(OBJLINKMANY2ONE(LINK)
	             {op state -> state2,
		      op allObjInStates -> allObjInStates2,
		      op existObjInStates -> existObjInStates2})
	     * {op allZOfTypeOfXInStates0 -> allZOfTypeOfXInStates2,
		op allZOfXInStates0 -> allZOfXInStates2,
		op changeObjState0 -> changeObjState2,
		op getXsOfZsInStates0 -> getXsOfZsInStates2,
		op getZsOfTypeOfXsInStates0 -> getZsOfTypeOfXsInStates2,
		op getZsOfXsInStates0 -> getZsOfXsInStates2,
		op getZsOfTypeOfXsInStates0 -> getZsOfTypeOfXsInStates2,
		op getZsOfXsInStates0 -> getZsOfXsInStates2,
		op getZsOfTypeOfXInStates0 -> getZsOfTypeOfXInStates2,
		op getZsOfXInStates0 -> getZsOfXInStates2,
		op ifOfTypeOfXThenInStates0 -> ifOfTypeOfXThenInStates2,
		op ifOfXThenInStates0 -> ifOfXThenInStates2,
		op ifXInStatesThenZInStates0 -> ifXInStatesThenZInStates2,
		op ifXInStatesThenZOfTypeInStates0 -> ifXInStatesThenZOfTypeInStates2})
}

module OBJLINKMANY2ONE3(LINK :: PRMOBJLINK3) {
  including(-OBJLINKMANY2ONE0(OBJLINKMANY2ONE2(LINK)
	             {op state -> state3,
		      op allObjInStates -> allObjInStates3,
		      op existObjInStates -> existObjInStates3})
	     * {op allZOfTypeOfXInStates0 -> allZOfTypeOfXInStates3,
		op allZOfXInStates0 -> allZOfXInStates3,
		op changeObjState0 -> changeObjState3,
		op getXsOfZsInStates0 -> getXsOfZsInStates3,
		op getZsOfTypeOfXsInStates0 -> getZsOfTypeOfXsInStates3,
		op getZsOfXsInStates0 -> getZsOfXsInStates3,
		op getZsOfTypeOfXsInStates0 -> getZsOfTypeOfXsInStates3,
		op getZsOfXsInStates0 -> getZsOfXsInStates3,
		op getZsOfTypeOfXInStates0 -> getZsOfTypeOfXInStates3,
		op getZsOfXInStates0 -> getZsOfXInStates3,
		op ifOfTypeOfXThenInStates0 -> ifOfTypeOfXThenInStates3,
		op ifOfXThenInStates0 -> ifOfXThenInStates3,
		op ifXInStatesThenZInStates0 -> ifXInStatesThenZInStates3,
		op ifXInStatesThenZOfTypeInStates0 -> ifXInStatesThenZOfTypeInStates3})
}

module -OBJLINKONE2ONE0-lemma(LINK :: PRMOBJLINK) {
  -- one X has exactly one coressponding Y
  -- Y has a link to X

  including(-ALLOBJPRED1(-PRMOBJLINKPRED(LINK)
			 {sort Arg -> LObjID,
			  op p -> isOfX})
                    * {op someObjP -> existX0,
		       op onlyOneObjP -> onlyOneYOfX0})

  var X : LObject
  var Y : Object
  var IDX : LObjID
  var S_X : SetOfLObject
  var S_Y : SetOfObject
  var St_X : SetOfLObjState
  var St_Y : SetOfObjState

  ceq (IDX = link(null) ) = false
    if not (IDX == link(null)) .

  op getXOfY0 : SetOfLObject Object -> LObject
  eq getXOfY0(S_X,Y)
     = getObject(S_X,link(Y)) .

  op getXsOfYs0 : SetOfLObject SetOfObject -> SetOfLObject
  eq getXsOfYs0(S_X,empObj)
     = empLObj .
  eq getXsOfYs0(S_X,(Y S_Y))
     = (getXOfY0(S_X,Y) getXsOfYs0(S_X,S_Y)) .

  op getXsOfYsInStates0 : SetOfLObject SetOfObject SetOfLObjState -> SetOfLObject
  op getXsOfYsInStates0 : SetOfLObject SetOfLObject SetOfObject SetOfLObjState -> SetOfLObject
  eq getXsOfYsInStates0(empLObj,S_Y,St_X)
     = empLObj .
  eq getXsOfYsInStates0(S_X,empObj,St_X)
     = empLObj .
  ceq getXsOfYsInStates0(S_X,(Y S_Y),St_X)
     = getXsOfYsInStates0(getXOfY0(S_X,Y),S_X,S_Y,St_X) 
     if not S_X = empLObj .

  eq getXsOfYsInStates0(empLObj,S_X,S_Y,St_X)
     = getXsOfYsInStates0(S_X,S_Y,St_X) .
  eq getXsOfYsInStates0(X,S_X,S_Y,St_X)
     = if (state(X) in St_X) then
       	  (X getXsOfYsInStates0(S_X,S_Y,St_X))
       else
       	  getXsOfYsInStates0(S_X,S_Y,St_X)
       fi .

  op getYOfX0 : SetOfObject LObjID -> Object
  op getYOfX0 : SetOfObject LObject -> Object
  eq getYOfX0(S_Y,X)
     = getYOfX0(S_Y,id(X)) .
  eq getYOfX0(empObj,IDX)
     = null .
  eq getYOfX0((Y S_Y),IDX)
     = if (IDX = link(Y)) then Y else getYOfX0(S_Y,IDX) fi .

  op getYsOfXs0 : SetOfObject SetOfLObject -> SetOfObject
  eq getYsOfXs0(S_Y,empLObj)
     = empObj .
  eq getYsOfXs0(S_Y,(X S_X))
     = (getYOfX0(S_Y,X) getYsOfXs0(S_Y,S_X)) .

  op getYsOfXsInStates0 : SetOfObject SetOfLObject SetOfObjState -> SetOfObject
  op getYsOfXsInStates0 : Object SetOfObject SetOfLObject SetOfObjState -> SetOfObject
  eq getYsOfXsInStates0(empObj,S_X,St_Y)
     = empObj .
  eq getYsOfXsInStates0(S_Y,empLObj,St_Y)
     = empObj .
  ceq getYsOfXsInStates0(S_Y,(X S_X),St_Y)
     = getYsOfXsInStates0(getYOfX0(S_Y,id(X)),S_Y,S_X,St_Y) 
     if not S_Y = empObj .

  eq getYsOfXsInStates0(Y,S_Y,S_X,St_Y)
     = if (state(Y) in St_Y) then
          (Y getYsOfXsInStates0(S_Y,S_X,St_Y))
       else
          getYsOfXsInStates0(S_Y,S_X,St_Y)
       fi .

  pred uniqX : SetOfObject
  eq uniqX(empObj)
     = true .
  eq uniqX((Y S_Y))
     = not existX0(S_Y,link(Y)) and uniqX(S_Y) .

  pred YOfXInStates0 : SetOfObject LObjID SetOfObjState
  eq YOfXInStates0(empObj,IDX,St_Y)
     = false .
  ceq YOfXInStates0((Y S_Y),IDX,St_Y)
     = (state(Y) in St_Y) and not existX0(S_Y,IDX) 
     if (link(Y) = IDX) .
  ceq YOfXInStates0((Y S_Y),IDX,St_Y)
     = YOfXInStates0(S_Y,IDX,St_Y)
     if not (link(Y) = IDX) .

  pred ifXInStatesThenYInStates0 : SetOfLObject SetOfLObjState SetOfObject SetOfObjState
  eq ifXInStatesThenYInStates0(empLObj,St_X,S_Y,St_Y)
     = true .
  eq ifXInStatesThenYInStates0(S_X,St_X,empObj,St_Y)
     = true .
  ceq ifXInStatesThenYInStates0((X S_X),St_X,S_Y,St_Y)
     = ((state(X) in St_X) implies YOfXInStates0(S_Y,id(X),St_Y))
       and ifXInStatesThenYInStates0(S_X,St_X,S_Y,St_Y)
     if not (S_Y = empObj) .

  pred ifYInStatesThenXInStates0 : SetOfObject SetOfObjState SetOfLObject SetOfLObjState
  eq ifYInStatesThenXInStates0(empObj,St_Y,S_X,St_X)
     = true .
  eq ifYInStatesThenXInStates0(S_Y,St_Y,empLObj,St_X)
     = true .
  ceq ifYInStatesThenXInStates0((Y S_Y),St_Y,S_X,St_X)
     = ((state(Y) in St_Y) implies existObjInStates(S_X,link(Y),St_X))
       and ifYInStatesThenXInStates0(S_Y,St_Y,S_X,St_X)
     if not (S_X = empLObj) .

  pred allYHaveX : SetOfObject SetOfLObject
  eq allYHaveX(empObj,S_X)
     = true .
  eq allYHaveX((Y S_Y),S_X)
     = existObj(S_X,link(Y)) and not existX0(S_Y,link(Y)) and allYHaveX(S_Y,S_X) .

  pred allXHaveY : SetOfLObject SetOfObject
  eq allXHaveY(empLObj,S_Y)
     = true .
  eq allXHaveY((X S_X),S_Y)
     = onlyOneYOfX0(S_Y,id(X)) and allXHaveY(S_X,S_Y) .
}

module -OBJLINKONE2ONE0 {
  including(-OBJLINKONE2ONE0-lemma)

  -- Proved Lemmas
  vars X X' : LObject
  vars Y Y' : Object
  var IDX : LObjID
  var IDY : ObjID
  var SX : LObjState
  var SY : ObjState
  vars S_X S_X' : SetOfLObject
  vars S_Y S_Y' : SetOfObject
  var St_X : SetOfLObjState
  var St_Y : SetOfObjState
  var OT : ObjType

  ceq [o2o-lemma01]:
      (allObjInStates(S_Y,St_Y) and YOfXInStates0(S_Y,IDX,St_Y))
     = allObjInStates(S_Y,St_Y)
     if uniqX(S_Y) and onlyOneYOfX0(S_Y,IDX) .

  ceq [o2o-lemma02]:
      (ifXInStatesThenYInStates0(S_X,St_X,(Y S_Y),St_Y) and
       ifXInStatesThenYInStates0(S_X,St_X,(Y' S_Y),St_Y))
     = ifXInStatesThenYInStates0(S_X,St_X,(Y S_Y),St_Y)
     if changeObjState0(Y,Y') and (state(Y') in St_Y) .

  ceq [o2o-lemma03]:
      (allObjInStates(S_Y,St_Y) and ifXInStatesThenYInStates0(S_X,St_X,S_Y,St_Y))
     = allObjInStates(S_Y,St_Y)
     if uniqX(S_Y) and allXHaveY(S_X,S_Y) .

  ceq [o2o-lemma04]:
      (ifXInStatesThenYInStates0(S_X,St_X,(Y S_Y),St_Y) and
       ifXInStatesThenYInStates0(S_X,St_X,(Y' S_Y),St_Y))
     = ifXInStatesThenYInStates0(S_X,St_X,(Y S_Y),St_Y)
     if not existObj(S_X,link(Y)) and changeObjState0(Y,Y') .

  ceq [o2o-lemma05]:
      (ifXInStatesThenYInStates0(S_X,St_X,(Y S_Y),St_Y) and
       ifXInStatesThenYInStates0(S_X,St_X,(Y' S_Y),St_Y))
     = ifXInStatesThenYInStates0(S_X,St_X,(Y S_Y),St_Y)
     if changeObjState0(Y,Y') and not (state(Y) in St_Y) .

  ceq [o2o-lemma06]:
    getYOfX0(S_Y,IDX) = null
    if not existX0(S_Y,IDX) .
}

module OBJLINKONE2ONE(LINK :: PRMOBJLINK) {
  including(-OBJLINKONE2ONE0(LINK)
	     * {op existX0 -> existX,
		op onlyOneYOfX0 -> onlyOneYOfX,
		op getXOfY0 -> getXOfY,
		op getXsOfYs0 -> getXsOfYs,
		op getXsOfYsInStates0 -> getXsOfYsInStates,
		op getYOfX0 -> getYOfX,
		op getYsOfXs0 -> getYsOfXs,
		op getYsOfXsInStates0 -> getYsOfXsInStates,
		op YOfXInStates0 -> YOfXInStates,
		op ifXInStatesThenYInStates0 -> ifXInStatesThenYInStates,
		op ifYInStatesThenXInStates0 -> ifYInStatesThenXInStates})
}

module OBJLINKONE2ONE2(LINK :: PRMOBJLINK2) {
  including(-OBJLINKONE2ONE0(OBJLINKONE2ONE(LINK)
	             {op state -> state2,
		      op allObjInStates -> allObjInStates2,
		      op existObjInStates -> existObjInStates2})
	     * {op existX0 -> existX2,
		op onlyOneYOfX0 -> onlyOneYOfX2,
		op getXOfY0 -> getXOfY2,
		op getXsOfYs0 -> getXsOfYs2,
		op getXsOfYsInStates0 -> getXsOfYsInStates2,
		op getYOfX0 -> getYOfX2,
		op getYsOfXs0 -> getYsOfXs2,
		op getYsOfXsInStates0 -> getYsOfXsInStates2,
		op YOfXInStates0 -> YOfXInStates2,
		op ifXInStatesThenYInStates0 -> ifXInStatesThenYInStates2,
		op ifYInStatesThenXInStates0 -> ifYInStatesThenXInStates2})
}

module OBJLINKONE2ONE3(LINK :: PRMOBJLINK3) {
  including(-OBJLINKONE2ONE0(OBJLINKONE2ONE2(LINK)
	             {op state -> state3,
		      op allObjInStates -> allObjInStates3,
		      op existObjInStates -> existObjInStates3})
	     * {op existX0 -> existX3,
		op onlyOneYOfX0 -> onlyOneYOfX3,
		op getXOfY0 -> getXOfY3,
		op getXsOfYs0 -> getXsOfYs3,
		op getXsOfYsInStates0 -> getXsOfYsInStates3,
		op getYOfX0 -> getYOfX3,
		op getYsOfXs0 -> getYsOfXs3,
		op getYsOfXsInStates0 -> getYsOfXsInStates3,
		op YOfXInStates0 -> YOfXInStates3,
		op ifXInStatesThenYInStates0 -> ifXInStatesThenYInStates3,
		op ifYInStatesThenXInStates0 -> ifYInStatesThenXInStates3})
}

module STATEBASE {
  including(NAT)
    [State]
  pred wfs : State
  pred init : State
  pred final : State
  pred inv : State
  op m : State -> Nat
}

module -PRMLOCALSTATE {
  [LocalState] 
}

module PROOFBASE {
  including(RWL)
  including(STATEBASE)
  including(-SET+NAT(-PRMLOCALSTATE {sort Elt -> LocalState})
      * {sort Set -> SetOfLS,
      	 op empty -> empLS})

  op _!_ : Bool Bool -> Bool {constr assoc}
  op _=>_!!_ : State State Bool -> Bool {constr}

  pred (_when _) : Bool Bool { prec: 63 r-assoc }
  eq (B1:Bool when B2:Bool)
     = B2 implies B1 .

--> *************************
--> Step 0-2: Define cont(S).
--> *************************
  vars S SS : State
  pred cont : State
  eq cont(S)
     = (S =(*,1)=>+ SS) .

--> ******************************************
--> Step 1-0: Define a predicate to be proved.
--> ******************************************
  pred initcont : State .
  eq initcont(S) = init(S) implies cont(S) .

--> ******************************************
--> Step 2-0: Define a predicate to be proved.
--> ******************************************
  var CC : Bool

  pred ccont : State State
  eq ccont(S,SS)
     = inv(S) and not final(S) and inv(SS) implies cont(SS) or final(SS) .

  pred contcont : State
  eq contcont(S)
     = not (S =(*,1)=>+ SS if CC suchThat
            not ((CC implies ccont(S,SS)) == true)
     	   { S => SS !! CC ! inv(S) ! final(S) ! inv(SS) ! cont(SS) ! final(SS) }) .

}

module PRMCYCLE {
  [Object < SetOfObject]
  op empObj : -> SetOfObject
  op _ _ : SetOfObject SetOfObject -> SetOfObject
  pred _in_ : Object SetOfObject

  [ObjState]
  op state : Object -> ObjState

  [SetOfObjState]
  pred someObjInStates : SetOfObject SetOfObjState
  pred _in_ : ObjState SetOfObjState

  [State]
  op getAllObjInState : State -> SetOfObject
  pred inv : State
  pred init : State

  -- DDSC means get Direct Depending Set of the same Class.
  op DDSC : Object State -> SetOfObject
}

module CYCLEPRED(P :: PRMCYCLE) {

  var O  : Object
  vars V OS : SetOfObject
  var S : State
  var SS : SetOfObjState

  pred noCycleC : State
  pred noCycleC : Object State
  pred noCycleC : SetOfObject SetOfObject State

  eq noCycleC(S)
     = noCycleC(getAllObjInState(S),empObj,S) .

  eq noCycleC(O,S)
     = noCycleC(O,empObj,S) .

  eq noCycleC(empObj,V,S)
     = true .
  eq noCycleC((O OS),V,S)
     = if O in V then false else noCycleC(DDSC(O,S),(O V),S) fi
       and noCycleC(OS,V,S) .

  -- Cyclic Dependency Lemma
  ceq [noCycle :nonexec]: 
     noCycleC(S) = false if someObjInStates(DDSC(O,S),SS) and state(O) in SS .
  ceq [CycleInit :nonexec]: 
     init(S) = false if someObjInStates(DDSC(O,S),SS) and state(O) in SS .
  -- Note that equations above may depend on the order of processing `noCycleC` or `init`.
  -- Equations below does not so.
  ceq [CycleInv :nonexec]: 
     inv(S) = false if someObjInStates(DDSC(O,S),SS) and state(O) in SS .
  -- ceq [noCycle :nonexec]: 
  --    true = false if someObjInStates(DDSC(O,S),SS) and state(O) in SS .

}

