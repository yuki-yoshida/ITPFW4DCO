provide SET

mod! SET(X :: TRIV) {
  [Elt.X < Set]

  op empty : -> Set {constr}
  op _ _ : Set Set -> Set {constr assoc comm id: empty}

  ceq S:Set S = S if not (S == empty) .

  --
  op _U_ : Set Set -> Set
  op _in_ : Elt.X Set -> Bool
  op _A_ : Set Set -> Set
  op _\\_ : Set Set -> Set
  op subset : Set Set -> Bool
  pred _<wf_ : Set Set
  --
  vars S S1 S2 : Set
  vars E E1 : Elt.X

  -- for =
  eq ((E S1) = (E S2)) = (S1 = S2) .
  -- for empty
  eq ((E S) = empty) = false .
  -- for _U_
  eq S1 U S2 = S1 S2 .
  -- for _in_
  eq E in empty = false .
  eq E in (E S) = true .
  ceq E in (E1 S) = E in S if not(E = E1) .
  -- for _A_
  eq empty A S2 = empty .
  eq (E S1) A (E S2) = E (S1 A S2) .
  ceq (E S1) A S2 = S1 A S2 if not(E in S2) .
  -- for _\\_ 
  eq empty \\ E = empty .
  eq (E S) \\ E = S .
  ceq (E1 S) \\ E = (E1 (S \\ E)) if not (E = E1) .
  -- for subset
  eq subset(empty,S) = true .
  eq subset(S,empty) = (S = empty) .
  eq subset(S,S) = true .
  eq subset((E S1),S2) = E in S2 and subset(S1,S2) .
  eq subset(S1,(E S2)) = true .
  -- for well-founded binary relation
  eq (S <wf (E S)) = true .

}
