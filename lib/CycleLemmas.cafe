require Template Template.cafe

-- No Cyclic Dependency Lemma:
-- if noCycleC(S) and some object O in S is in a local state LS
-- then there is some object X in S that is also in LS
--      but does not depend on any other objects in LS.
-- eq noCDL(O,S,LS)
--   = (noCycleC(S) and O in getAllObjC(S) and state(O) = LS) 
--     implies someNoDependObj(getAllObjC(S), LS, S) .
module CYCLELEMMA {
  protecting(CYCLEPRED)
  
  op getNoDependObj : SetOfObject ObjState State -> Object
  pred noCDL : Object State ObjState
  pred cycle-lemma1 : Object ObjState State
  pred cycle-lemma2 : Object ObjState State
  pred SDL : SetOfObject SetOfObject SetOfObject State State

  vars O O' : Object
  vars OS OS' OS0 OS0' OS1 OS1' : SetOfObject
  var LS : ObjState
  vars S S' : State

  -- Assuming subset(DDSC(O,S),getAllObjC(S)) .
  eq [DDSCinS :nonexec]:
    subset(DDSC(O,S),getAllObjC(S)) = true .

  ceq getNoDependObj((O OS),LS,S) 
    = (if isNoDepend(O,LS,S) then O else getNoDependObj(DDSC(O,S),LS,S) fi)
    if state(O) = LS .

  ceq getNoDependObj((O OS),LS,S) 
    = getNoDependObj(OS,LS,S)
    if not (state(O) = LS) .

  -- no Cyclic Dependency Lemma
  eq noCDL(O,S,LS)
    = (noCycleC(S) and O in getAllObjC(S) and state(O) = LS) 
      implies someNoDependObj(getAllObjC(S), LS, S) .

  eq cycle-lemma1(O,LS,S)
    = (noCycleC(S) and 
       O in getAllObjC(S) and 
       state(O) = LS) implies 
      isNoDepend(getNoDependObj(O,LS,S),LS,S) .

  eq cycle-lemma2(O,LS,S)
    = (noCycleC(S) and 
       O in getAllObjC(S) and 
       state(O) = LS) implies 
      getNoDependObj(O,LS,S) in getAllObjC(S) .

  -- Define <wf for cycle-lemma1,2
  [OLSS] op t : Object ObjState State -> OLSS {constr} .
  pred _<wf_ : OLSS OLSS .
  ceq ( t(O',LS,S) <wf t(O,LS,S) ) = true
     if O' in DDSC(O,S) .

  -- Subset Dependency Lemma
  eq SDL(OS,OS',OS0,S,S')
    = (subset(OS',getAllObjC(S')) and subset(OS',OS) and
       (inv(S) implies subsetDepend(S',S))) implies
      (inv(S) and noCycleC(OS,OS0,S)) implies noCycleC(OS',OS0,S') .

  -- Define <wf for SDL
  [OSOSOSSS] op t : SetOfObject SetOfObject SetOfObject State State -> OSOSOSSS {constr} .
  pred _<wf_ : OSOSOSSS OSOSOSSS .
  eq ( t(OS1,OS,OS0,S,S') <wf t((O OS1),(O OS),OS0,S,S') ) = true .
  eq ( t(OS1',DDSC(O,S'),(O OS0),S,S') <wf t(OS1,(O OS),OS0,S,S') ) = true .

  -- Set Axiom
  ceq [OinOS :nonexec]:
      (O in OS) = true
   if subset((O OS'),OS) .

  ops o o' : -> Object .
  ops os os' os0 os0' os1 os1' : -> SetOfObject .
  op ls : -> ObjState .
  ops s s' : -> State .
}

--> Proof of cycle-lemma1
-->  eq cycle-lemma1(O,LS,S)
-->    = (noCycleC(S) and 
-->       O in getAllObjC(S) and 
-->       state(O) = LS) implies 
-->      isNoDepend(getNoDependObj(O,LS,S),LS,S) .
open CYCLELEMMA .

  -- Induction Hypothesis
  ceq [cycle-lemma1-IH :nonexec]:
    cycle-lemma1(O,LS,S) = true
    if t(O,LS,S) <wf t(o,ls,s) .

:goal { eq cycle-lemma1(o,ls,s) = true . }
:def OinScsp = :csp {
  eq (o in getAllObjC(s)) = false .
  eq getAllObjC(s) = (o os) .
}
:apply (OinScsp rd-)
:def OinLSctf = :ctf {
  eq (state(o) = ls) = true .
}
:apply (OinLSctf rd-)
:def allNScsp = :csp {
  eq allObjNotInState(DDSC(o,s),ls) = true .
  eq DDSC(o,s) = (o' os') .
}
:apply (allNScsp rd-)
:csp {
  eq (state(o') = ls) = true .
}
:def OisO'ctf = :ctf {
  eq (o' in o) = true .
}
:apply (OisO'ctf rd-)
:init as DDSCinS-in [DDSCinS]
  by {O:Object <- o;
      S:State <- s; }
:init as OinOS-in [OinOS]
  by {O:Object <- o';
      OS:SetOfObject <- getAllObjC(s);
      OS':SetOfObject <- os'; }
:init as cycle-lemma1-IH-in [cycle-lemma1-IH]
  by {O:Object <- o'; 
      LS:ObjState <- ls; 
      S:State <- s; }
:apply (rd-)
--> Proof of cycle-lemma1 done
-->
show proof
close

--> Proof of cycle-lemma2
-->  eq cycle-lemma2(O,LS,S)
-->    = (noCycleC(S) and 
-->       O in getAllObjC(S) and 
-->       state(O) = LS) implies 
-->      getNoDependObj(O,LS,S) in getAllObjC(S) .
open CYCLELEMMA .

  -- Induction Hypothesis
  ceq [cycle-lemma2-IH :nonexec]:
    cycle-lemma2(O,LS,S) = true
    if t(O,LS,S) <wf t(o,ls,s) .

:goal { eq cycle-lemma2(o,ls,s) = true . }
:def OinScsp = :csp {
  eq (o in getAllObjC(s)) = false .
  eq getAllObjC(s) = (o os) .
}
:apply (OinScsp rd-)
:def OinLSctf = :ctf {
  eq (state(o) = ls) = true .
}
:apply (OinLSctf rd-)
:def allNScsp = :csp {
  eq allObjNotInState(DDSC(o,s),ls) = true .
  eq DDSC(o,s) = (o' os') .
}
:apply (allNScsp rd-)
:csp {
  eq (state(o') = ls) = true .
}
:def OisO'ctf = :ctf {
  eq (o' in o) = true .
}
:apply (OisO'ctf rd-)
:init as DDSCinS-in [DDSCinS]
  by {O:Object <- o;
      S:State <- s; }
:init as OinOS-in [OinOS]
  by {O:Object <- o';
      OS:SetOfObject <- getAllObjC(s);
      OS':SetOfObject <- os'; }
:init as cycle-lemma2-IH-in [cycle-lemma2-IH]
  by {O:Object <- o'; 
      LS:ObjState <- ls; 
      S:State <- s; }
:apply (rd-)
--> Proof of cycle-lemma2 done
-->
show proof
close

--> Proof of noCDL
-->  eq noCDL(O,S,LS)
-->    = (noCycleC(S) and O in getAllObjC(S) and state(O) = LS)
-->      implies someNoDependObj(getAllObjC(S), LS, S) .
open CYCLELEMMA .

  -- sublemma
  -- eq cycle-lemma1(O,LS,S)
  --   = (noCycleC(S) and 
  --      O in getAllObjC(S) and 
  --      state(O) = LS) implies 
  --     isNoDepend(getNoDependObj(O,LS,S),LS,S) .
  ceq [cycle-lemma1 :nonexec]:
    isNoDepend(getNoDependObj(O,LS,S),LS,S) = true
    if (noCycleC(S) and 
        O in getAllObjC(S) and 
        state(O) = LS) .

  -- eq cycle-lemma2(O,LS,S)
  --   = (noCycleC(S) and 
  --      O in getAllObjC(S) and 
  --      state(O) = LS) implies 
  --     getNoDependObj(O,LS,S) in getAllObjC(S) .
  ceq [cycle-lemma2 :nonexec]:
    (getNoDependObj(O,LS,S) in getAllObjC(S)) = true
    if noCycleC(S) and O in getAllObjC(S) and state(O) = LS .

:goal { eq noCDL(o,s,ls) = true . }
:def noCyclectf = :ctf {
  eq noCycleC(s) = true .
}
:apply (noCyclectf rd-)
:def OinScsp = :csp {
  eq (o in getAllObjC(s)) = false .
  eq getAllObjC(s) = (o os) .
}
:apply (OinScsp rd-)
:def OinLSctf = :ctf {
  eq (state(o) = ls) = true .
}
:apply (OinLSctf rd-)
:def allNSctf = :ctf {
  eq allObjNotInState(DDSC(o,s),ls) = true .
}
:apply (allNSctf rd-)
:def getNDisOcsp = :csp {
  eq getNoDependObj(DDSC(o, s), ls, s) in (o os) = false .
  eq (o os) = (o getNoDependObj(DDSC(o,s),ls,s) os') .
}
:apply (getNDisOcsp)
-- 1-2-1-2-1
:init as cycle-lemma2-in [cycle-lemma2]
  by {O:Object <- o;
      LS:ObjState <- ls;
      S:State <- s; }
:apply (rd-)
-- 1-2-1-2-2
:init as cycle-lemma1-in [cycle-lemma1]
  by {O:Object <- o;
      LS:ObjState <- ls;
      S:State <- s; }
:apply (rd-)
--> Proof of noCDL done
-->
show proof
close 

--> Proof of Subset Dependency Lemma
-->  eq SDL(OS,OS',OS0,S,S')
-->    = (subset(OS',getAllObjC(S')) and subset(OS',OS) and
-->       (inv(S) implies subsetDepend(S',S))) implies
-->      (inv(S) and noCycleC(OS,OS0,S)) implies noCycleC(OS',OS0,S') .
open CYCLELEMMA .

  -- Subset Axiom
  eq subset(OS,(OS OS')) = true .
  ceq [Subset :nonexec]:
    subset(OS,OS') = true if subset((O OS),OS') = true .

  -- Induction Hypothesis
  ceq [SDL-IH :nonexec]:
      (inv(S) and noCycleC(OS1,OS0,S) and noCycleC(OS,OS0,S'))
    = (inv(S) and noCycleC(OS1,OS0,S))
    if subset(OS,getAllObjC(S')) and 
       subset(OS,OS1) and
       subsetDepend(S',S) and
       (t(OS1,OS,OS0,S,S') <wf t(os1,os,os0,s,s')) .
:goal { eq SDL(os1,os,os0,s,s') = true . }
:def subDctf = :ctf {
  eq subsetDepend(getAllObjC(s'),getAllObjC(s),s',s) = true .
}
:apply (subDctf rd-)
-- subsetDepend(getAllObjC(s'),getAllObjC(s),s',s) = true means that
-- subset(DDSC(o,s'),DDSC(o,s)) for any object O in getAllObjC(s') 
:csp {
  eq subset(DDSC(o,s'),DDSC(o,s)) = true .
}
:def empObjcsp = :csp {
  eq os = empObj .
  eq os = (o os') .
}
:apply (empObjcsp rd-)
:def subsetos = :csp {
  eq subset((o os'),os1) = false .
  eq os1 = (o os' os1') .
}
:apply (subsetos rd-)
:def subgetActf = :ctf {
  eq subset((o os'),getAllObjC(s')) = true .
}
:apply (subgetActf rd-)
:def oinos0ctf = :ctf {
  eq (o in os0) = true .
}
:apply (oinos0ctf rd-)
:init as Subset-in [Subset]
  by {O:Object <- o;
      OS:SetOfObject <- os';
      OS':SetOfObject <- getAllObjC(s'); }
:init as SDL-IH-in1 [SDL-IH]
  by {OS:SetOfObject   <- os';
      OS1:SetOfObject   <- (os1' os');
      OS0:SetOfObject  <- os0;
      S:State  <- s; 
      S':State <- s'; }
:init as DDSCinS-in [DDSCinS]
  by {O:Object <- o;
      S:State <- s'; }
:init as SDL-IH-in2 [SDL-IH]
  by {OS:SetOfObject   <- DDSC(o,s');
      OS1:SetOfObject  <- DDSC(o,s);
      OS0:SetOfObject  <- (o os0);
      S:State  <- s; 
      S':State <- s'; }
:apply (rd-)
--> Proof of Subset Dependency Lemma done
-->
show proof
close
--> Totally 4 goals should be proved
