require PROOF Proof.cafe

--> ***************************
--> (3) init(S) implies inv(S).
--> (4) inv(S) implies inv(SS).
--> ***************************

--> *************************************************************
--> Proof of inv-ifRSStartedThenPRReady.
-->  eq inv-ifRSStartedThenPRReady(< SetRS,SetPR >)
-->     = ifRSInStatesThenPRInStates(SetRS,started,SetPR,ready) .
--> *************************************************************
--> ******************************************
--> Step 3-0: Define a predicate to be proved.
--> ******************************************
module Proofinv-ifRSStartedThenPRReady {
  protecting(PROOF)
  var S : State
  eq invK(S) = inv-ifRSStartedThenPRReady(S) .
}

select Proofinv-ifRSStartedThenPRReady
--> ***************************
--> (3) init(S) implies inv(S).
--> ***************************
--> ***************************************************
--> Step 3-1: Begin with the most general initial case.
--> ***************************************************
:goal {
  eq initinv(< sRS,sPR >) = true .
}
:apply (rd-) 
show proof

--> ***************************
--> (4) inv(S) implies inv(SS).
--> ***************************
--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
--> *************************************************************************
--> Step 4-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRS,initial) sRS), sPR >) = true .
}
--> ************************************************************************
--> Step 4-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp4-2R01 = :csp {
  eq allPROfRSInStates(sPR,idRS,ready) = true .
}
:apply (csp4-2R01 rd-)
show proof

--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
--> *************************************************************************
--> Step 4-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
:apply (rd-)
show proof
select

--> ***********************************
--> Proof of wfs-allPRHaveRS.
-->  eq wfs-allPRHaveRS(< SetRS,SetPR >)
-->     = allPRHaveRS(SetPR,SetRS) .
--> ***********************************
--> ******************************************
--> Step 3-0: Define a predicate to be proved.
--> ******************************************
module Proofwfs-allPRHaveRS {
  protecting(PROOF)
  var S : State
  eq invK(S) = wfs-allPRHaveRS(S) .
}

select Proofwfs-allPRHaveRS 
--> ***************************
--> (3) init(S) implies inv(S).
--> ***************************
-- Since wfs-* is imposed by init(S), init(S) implies wfs-* always holds.

--> ***************************
--> (4) inv(S) implies inv(SS).
--> ***************************
--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
--> *************************************************************************
--> Step 4-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRS,initial) sRS), sPR >) = true .
}
--> ************************************************************************
--> Step 4-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp4-2R01 = :csp {
  eq allPROfRSInStates(sPR,idRS,ready) = true .
}
:apply (csp4-2R01 rd-)
show proof

--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
--> *************************************************************************
--> Step 4-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
:apply (rd-)
show proof
select

--> ***********************************
--> Proof of wfs-allPRHaveRRS.
-->  eq wfs-allPRHaveRRS(< SetRS,SetPR >)
-->     = allPRHaveRRS(SetPR,SetRS) .
--> ***********************************
--> ******************************************
--> Step 3-0: Define a predicate to be proved.
--> ******************************************
module Proofwfs-allPRHaveRRS {
  protecting(PROOF)
  var S : State
  eq invK(S) = wfs-allPRHaveRRS(S) .
}

select Proofwfs-allPRHaveRRS 
--> ***************************
--> (3) init(S) implies inv(S).
--> ***************************
-- Since wfs-* is imposed by init(S), init(S) implies wfs-* always holds.

--> ***************************
--> (4) inv(S) implies inv(SS).
--> ***************************
--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
--> *************************************************************************
--> Step 4-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRS,initial) sRS), sPR >) = true .
}
--> ************************************************************************
--> Step 4-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp4-2R01 = :csp {
  eq allPROfRSInStates(sPR,idRS,ready) = true .
}
:apply (csp4-2R01 rd-)
show proof

--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
--> *************************************************************************
--> Step 4-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
:apply (rd-)
show proof
select

--> *************************************
--> Proof of noRSCycle.
--> *************************************j
--> ******************************************
--> Step 3-0: Define a predicate to be proved.
--> ******************************************
module Proofinv-noRSCycle {
  protecting(PROOF)
  vars S S' : State
  vars OS OS' : SetOfResource
  eq invK(S) = noRSCycle(S) .

  pred noRSCycle-lemma : State State
  eq noRSCycle-lemma(S,S') = inv(S) implies subsetDepend(S',S) .
}

select Proofinv-noRSCycle
--> ***************************
--> (3) init(S) implies inv(S).
--> ***************************
--> ***************************************************
--> Step 3-1: Begin with the most general initial case.
--> ***************************************************
:goal {
  eq initinv(< sRS,sPR >) = true .
}
:apply (rd-) 
show proof

--> ***************************
--> (4) inv(S) implies inv(SS).
--> ***************************
--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
--> *************************************************************************
--> Step 4-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRS,initial) sRS), sPR >) = true .
}
--> ************************************************************************
--> Step 4-2: When the current rule is conditinal, 
-->  add an axiom representing that the condition holds to the current case.
--> ************************************************************************
:def csp4-2R01 = :csp {
  eq allPROfRSInStates(sPR,idRS,ready) = true .
}
:apply (csp4-2R01 rd-)
--> **************************************************
--> Step 4-3: Use Subset Dependency Lemma if possible.
--> **************************************************
:def invsctf = :ctf {
  eq inv(< (res(trs,idRS,initial) sRS), sPR >) = true .
}
:apply (invsctf rd-)
:init as noRSCycle-lemma-in ( eq noRSCycle-lemma(S:State,S':State) = true . )
  by {S:State  <- (< (res(trs,idRS,initial) sRS) , sPR >);
      S':State <- (< (res(trs,idRS,started) sRS) , sPR >); }
:init as SDL-lemma-in [SDL-lemma]
  by {OS:SetOfResource <- sRS;
      OS':SetOfResource <- sRS;
      S:State  <- (< (res(trs,idRS,initial) sRS) , sPR >);
      S':State <- (< (res(trs,idRS,started) sRS) , sPR >); }
:apply (rd-)
show proof
--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
--> *************************************************************************
--> Step 4-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
--> **************************************************
--> Step 4-3: Use Subset Dependency Lemma if possible.
--> **************************************************
:def invsctf = :ctf {
  eq inv(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
:apply (invsctf rd-)
:init as noRSCycle-lemma-in ( eq noRSCycle-lemma(S:State,S':State) = true . )
  by {S:State  <- (< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >);
      S':State <- (< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,ready,idRS,idRRS) sPR) >); }
:init as SDL-lemma-in [SDL-lemma]
  by {OS:SetOfResource <- sRS;
      OS':SetOfResource <- sRS;
      S:State  <- (< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >);
      S':State <- (< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,ready,idRS,idRRS) sPR) >); }
:apply (rd-)
show proof
select

--> Lemma for invariant noRSCycle(S)
module Proofinv-noRSCycle-lemma {
  protecting(Proofinv-noRSCycle)
  [SRSRRPR] op t : SetOfResource SetOfResource Resource Resource SetOfProperty -> SRSRRPR {constr} .
  [SRSPPPR] op t : SetOfResource SetOfResource Property Property SetOfProperty -> SRSPPPR {constr} .
  pred _<wf_ : SRSRRPR SRSRRPR
  pred _<wf_ : SRSPPPR SRSPPPR
  vars RS RS' : Resource
  vars SRS SRS' SRS0 : SetOfResource
  vars PR PR' : Property
  var SPR : SetOfProperty
  ceq ( t(SRS',SRS0,RS,RS',SPR) <wf t(SRS,SRS0,RS,RS',SPR) ) = true
    if SRS' <wf SRS .
  ceq ( t(SRS',SRS0,PR,PR',SPR) <wf t(SRS,SRS0,PR,PR',SPR) ) = true
    if SRS' <wf SRS .

  pred noRSCycle-lemma1 : SetOfResource SetOfResource Resource Resource SetOfProperty
  ceq noRSCycle-lemma1(SRS,SRS0,RS,RS',SPR)
    = inv(< (RS SRS0), SPR >) implies subsetDepend(SRS,SRS,< (RS' SRS0), SPR >,< (RS SRS0), SPR >)
      if subset(SRS,(RS SRS0)) .

  pred noRSCycle-lemma2 : SetOfResource SetOfResource Property Property SetOfProperty
  ceq noRSCycle-lemma2(SRS,SRS0,PR,PR',SPR)
    = inv(< SRS0, (PR SPR) >) implies subsetDepend(SRS,SRS,< SRS0, (PR' SPR) >,< SRS0, (PR SPR) >)
      if subset(SRS,SRS0) .
}

--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
open Proofinv-noRSCycle-lemma .
-- Induction Hypothesis
ceq [noRSCycle-lemma1-IH :nonexec]:
   noRSCycle-lemma1(SRS,SRS0,RS,RS',SPR) = true
   if t(SRS,SRS0,RS,RS',SPR) <wf t(sRS,SRS0,RS,RS',SPR) .
:goal {
  eq noRSCycle-lemma1(sRS,sRS,res(trs,idRS,initial),res(trs,idRS,started),sPR) = true .
}
:def cspempRS = :csp {
  eq sRS = empRS .
  eq sRS = (res(trs',idRS',srs) sRS') .
}
:apply (cspempRS rd-)
:def ctfidRS = :ctf {
  eq idRS' = idRS .
}
:apply (ctfidRS rd-)
:def cspsrs = :csp {
  eq srs = initial .
  eq srs = started .
}
:apply (cspsrs rd-)
:def initIH = :init as noRSCycle-lemma1-IH-in [noRSCycle-lemma1-IH]
  by {SRS:SetOfResource  <- sRS';
      SRS0:SetOfResource <- sRS;
      RS:Resource  <- res(trs,idRS,initial);
      RS':Resource <- res(trs,idRS,started);
      SPR:SetOfProperty <- sPR; }
  -- Note: Following predefined lemma automatically used here:
  -- ceq [m2o-lemma27]:
  --    subset(getZsOfXsInStates0((Z' S_Z),S_X,St_Z),getZsOfXsInStates0((Z S_Z),S_X,St_Z)) = true
  --    if changeObjState0(Z,Z') and not state(Z') in St_Z .
  -- which assuming that initial > started .
:apply (initIH rd-)
:apply (initIH rd-)
show proof
close
open Proofinv-noRSCycle-lemma .
  -- ceq noRSCycle-lemma1(SRS,SRS0,RS,RS',SPR)
  --   = inv(< (RS SRS0), SPR >) implies subsetDepend(SRS,SRS,< (RS' SRS0), SPR >,< (RS SRS0), SPR >)
  --     if subset(SRS,(RS SRS0)) .
  eq [noRSCycle-lemma1-NE :nonexec]:
    noRSCycle-lemma1(SRS,SRS0,RS,RS',SPR) = true .
:goal {
  eq noRSCycle-lemma(< (res(trs,idRS,initial) sRS), sPR >, < (res(trs,idRS,started) sRS), sPR >) = true .
}
:init as noRSCycle-lemma1-NE-in [noRSCycle-lemma1-NE]
  by {SRS:SetOfResource  <- sRS;
      SRS0:SetOfResource <- sRS;
      RS:Resource  <- res(trs,idRS,initial);
      RS':Resource <- res(trs,idRS,started);
      SPR:SetOfProperty <- sPR; }
:apply (rd-)
show proof
close

--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
open Proofinv-noRSCycle-lemma .
-- Induction Hypothesis
ceq [noRSCycle-lemma2-IH :nonexec]:
   noRSCycle-lemma2(SRS,SRS0,PR,PR',SPR) = true
     if t(SRS,SRS0,PR,PR',SPR) <wf t(sRS,SRS0,PR,PR',SPR) .
:goal {
  eq noRSCycle-lemma2(sRS,(res(trs,idRRS,started) sRS),
		      prop(tpr,idPR,notready,idRS,idRRS),prop(tpr,idPR,ready,idRS,idRRS),sPR) = true .
}
:def cspempRS = :csp {
  eq sRS = empRS .
  eq sRS = (res(trs',idRS',srs) sRS') .
}
:apply (cspempRS rd-)
:def ctfidRRS = :ctf {
  eq idRS' = idRRS .
}
:apply (ctfidRRS rd-)
:def ctfidRS = :ctf {
  eq idRS' = idRS .
}
:apply (ctfidRS rd-)
:def cspsrs = :csp {
  eq srs = initial .
  eq srs = started .
}
:apply (cspsrs rd-)
:def initIH = :init as noRSCycle-lemma2-IH-in [noRSCycle-lemma2-IH]
  by {SRS:SetOfResource  <- sRS';
      SRS0:SetOfResource <- (res(trs,idRRS,started) sRS);
      PR:Property  <- prop(tpr,idPR,notready,idRS,idRRS);
      PR':Property <- prop(tpr,idPR,ready,idRS,idRRS);
      SPR:SetOfProperty <- sPR; }
:apply (initIH rd-)
:apply (cspsrs rd-)
:apply (initIH rd-)
  -- Note: Following predefined lemma automatically used here:
  -- eq [m2o-lemma23]:
  --     (subset(S_Z,S_Z') and
  --      subset(getXsOfZsInStates0(S_X,S_Z,St_X),getXsOfZsInStates0(S_X,S_Z',St_X)))
  --    = subset(S_Z,S_Z') .
  -- ceq [m2o-lemma27]:
  --    subset(getZsOfXsInStates0((Z' S_Z),S_X,St_Z),getZsOfXsInStates0((Z S_Z),S_X,St_Z)) = true
  --    if changeObjState0(Z,Z') and not state(Z') in St_Z .
  -- which assuming that initial > started .
:apply (initIH rd-)
show proof
close
open Proofinv-noRSCycle-lemma .
  -- ceq noRSCycle-lemma2(SRS,SRS0,PR,PR',SPR)
  --   = inv(< SRS0, (PR SPR) >) implies subsetDepend(SRS,SRS,< SRS0, (PR' SPR) >,< SRS0, (PR SPR) >)
  --     if subset(SRS,SRS0) .
  eq [noRSCycle-lemma2-NE :nonexec]:
    noRSCycle-lemma2(SRS,SRS0,PR,PR',SPR) = true .
:goal {
  eq noRSCycle-lemma(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >,
                     < (res(trs,idRRS,started) sRS), (prop(tpr,idPR,ready,idRS,idRRS) sPR) >) = true .
}
:init as noRSCycle-lemma2-NE-in [noRSCycle-lemma2-NE]
  by {SRS:SetOfResource  <- sRS;
      SRS0:SetOfResource <- (res(trs,idRRS,started) sRS);
      PR:Property  <- prop(tpr,idPR,notready,idRS,idRRS);
      PR':Property <- prop(tpr,idPR,ready,   idRS,idRRS);
      SPR:SetOfProperty <- sPR; }
:apply (rd-)
show proof
close
--> AWS/Proof-inv.cafe
--> Totally 14 goals should be proved.

