require Template ../lib/Template.cafe
provide DomainModel
module! RESOURCE {
  [Resource RSID RSType RSState]
  op res : RSType RSID RSState -> Resource {constr}
  op id : Resource -> RSID
  op type : Resource -> RSType
  op state : Resource -> RSState
  var TRS : RSType
  var IDRS : RSID
  var SRS : RSState
  eq id(res(TRS,IDRS,SRS)) = IDRS .
  eq type(res(TRS,IDRS,SRS)) = TRS .
  eq state(res(TRS,IDRS,SRS)) = SRS .
}
module! RESOURCEfuns {
  extending(OBJECTBASE(
	RESOURCE {sort Object -> Resource,
		  sort ObjID -> RSID,
		  sort ObjType -> RSType,
		  sort ObjState -> RSState})
	* {sort ObjIDLt -> RSIDLt,
	   sort ObjTypeLt -> RSTypeLt,
	   sort ObjStateLt -> RSStateLt,
	   sort SetOfObject -> SetOfResource,
	   sort SetOfObjState -> SetOfRSState,
	   op empObj -> empRS,
	   op empState -> empSRS,
	   op existObj -> existRS,
	   op existObjInStates -> existRSInStates,
	   op uniqObj -> uniqRS,
	   op #ObjInStates -> #ResourceInStates,
	   op getObject -> getResource,
	   op allObjInStates -> allRSInStates,
	   op allObjNotInStates -> allRSNotInStates,
	   op someObjInStates -> someRSInStates})
  ops initial started : -> RSStateLt {constr}
  eq (initial > started) = true .
}
module! PROPERTY {
  protecting(RESOURCE)
  [Property PRID PRType PRState]
  op prop : PRType PRID PRState RSID RSID -> Property {constr}
  op id : Property -> PRID
  op type : Property -> PRType
  op state : Property -> PRState
  op parent : Property -> RSID
  op refer : Property -> RSID
  var TPR : PRType
  var IDPR : PRID
  var SPR : PRState
  vars IDRS1 IDRS2 : RSID
  eq type(prop(TPR,IDPR,SPR,IDRS1,IDRS2)) = TPR .
  eq id(prop(TPR,IDPR,SPR,IDRS1,IDRS2)) = IDPR .
  eq state(prop(TPR,IDPR,SPR,IDRS1,IDRS2)) = SPR .
  eq parent(prop(TPR,IDPR,SPR,IDRS1,IDRS2)) = IDRS1 .
  eq refer(prop(TPR,IDPR,SPR,IDRS1,IDRS2)) = IDRS2 .
}
module! PROPERTYfuns {
  protecting(RESOURCEfuns)
  extending(OBJECTBASE(
	PROPERTY {sort Object -> Property,
		  sort ObjID -> PRID,
		  sort ObjType -> PRType,
		  sort ObjState -> PRState})
	* {sort ObjIDLt -> PRIDLt,
	   sort ObjTypeLt -> PRTypeLt,
	   sort ObjStateLt -> PRStateLt,
	   sort SetOfObject -> SetOfProperty,
	   sort SetOfObjState -> SetOfPRState,
	   op empObj -> empPR,
	   op empState -> empSPR,
	   op existObj -> existPR,
	   op existObjInStates -> existPRInStates,
	   op uniqObj -> uniqPR,
	   op #ObjInStates -> #PropertyInStates,
	   op getObject -> getProperty,
	   op allObjInStates -> allPRInStates,
	   op allObjNotInStates -> allPRNotInStates,
	   op someObjInStates -> somePRInStates})
  ops notready ready : -> PRStateLt {constr}
  eq (notready > ready) = true .
}
module! LINKS {
  extending(OBJLINKMANY2ONE(
	PROPERTYfuns {sort Object -> Property,
		      sort ObjID -> PRID,
		      sort ObjType -> PRType,
		      sort ObjState -> PRState,
		      sort SetOfObject -> SetOfProperty,
		      sort SetOfObjState -> SetOfPRState,
		      op empObj -> empPR,
		      op getObject -> getProperty,
		      op existObj -> existPR,
		      op allObjInStates -> allPRInStates,
		      sort LObject -> Resource,
		      sort LObjID -> RSID,
		      sort LObjState -> RSState,
		      sort SetOfLObject -> SetOfResource,
		      sort SetOfLObjState -> SetOfRSState,
		      op link -> parent,
		      op empLObj -> empRS,
		      op getLObject -> getResource,
		      op existLObj -> existRS,
		      op allLObjInStates -> allRSInStates,
		      op existLObjInStates -> existRSInStates})
	* {op hasLObj -> hasParent,
	   op allZHaveX -> allPRHaveRS,
	   op allZOfXInStates -> allPROfRSInStates,
	   op getXOfZ -> getRSOfPR,
	   op getXsOfZs -> getRSsOfPRs,
	   op getXsOfZsInStates -> getRSsOfPRsInStates,
	   op getZsOfX -> getPRsOfRS,
	   op getZsOfXInStates -> getPRsOfRSInStates,
	   op getZsOfXs -> getPRsOfRSs,
	   op getZsOfXsInStates -> getPRsOfRSsInStates,
	   op ifOfXThenInStates -> ifOfRSThenInStates,
	   op ifXInStatesThenZInStates -> ifRSInStatesThenPRInStates}
	)
  extending(OBJLINKMANY2ONE(
	PROPERTYfuns {sort Object -> Property,
		      sort ObjID -> PRID,
		      sort ObjType -> PRType,
		      sort ObjState -> PRState,
		      sort SetOfObject -> SetOfProperty,
		      sort SetOfObjState -> SetOfPRState,
		      op empObj -> empPR,
		      op getObject -> getProperty,
		      op existObj -> existPR,
		      op allObjInStates -> allPRInStates,
		      sort LObject -> Resource,
		      sort LObjID -> RSID,
		      sort LObjState -> RSState,
		      sort SetOfLObject -> SetOfResource,
		      sort SetOfLObjState -> SetOfRSState,
		      op link -> refer,
		      op empLObj -> empRS,
		      op getLObject -> getResource,
		      op existLObj -> existRS,
		      op allLObjInStates -> allRSInStates,
		      op existLObjInStates -> existRSInStates})
	* {op hasLObj -> hasRefRS,
  	   op allZHaveX -> allPRHaveRRS,
  	   op allZOfXInStates -> allPROfRRSInStates,
  	   op getXOfZ -> getRRSOfPR,
  	   op getXsOfZs -> getRRSsOfPRs,
  	   op getXsOfZsInStates -> getRRSsOfPRsInStates,
  	   op getZsOfX -> getPRsOfRRS,
  	   op getZsOfXInStates -> getPRsOfRRSInStates,
  	   op getZsOfXs -> getPRsOfRRSs,
  	   op getZsOfXsInStates -> getPRsOfRRSsInStates,
	   op ifOfXThenInStates -> ifOfRRSThenInStates,
  	   op ifXInStatesThenZInStates -> ifRRSInStatesThenPRInStates}
  	)
}
module! STATE {
  protecting(STATEBASE)
  protecting(LINKS)
  op <_,_> : SetOfResource SetOfProperty -> State {constr}
}
module! STATECyclefuns {
  protecting(STATE)
  var RS : Resource
  var SetRS : SetOfResource
  var SetPR : SetOfProperty
  op getAllRSInState : State -> SetOfResource
  eq getAllRSInState(< SetRS,SetPR >) = SetRS .
  op DDSRS : Resource State -> SetOfResource
  eq DDSRS(RS,< SetRS,SetPR >)
    = if state(RS) = initial then
         getRRSsOfPRsInStates(SetRS,getPRsOfRSInStates(SetPR,RS,notready),initial)
      else empRS fi .
}
module! STATEfuns {
  extending(CYCLEPRED(
  	STATECyclefuns {sort Object -> Resource,
  	       		sort SetOfObject -> SetOfResource,
			sort ObjState -> RSState,
			op DDSC -> DDSRS,
  	       		op empObj -> empRS,
  	       		op getAllObjC -> getAllRSInState})
  	* {op noCycleC -> noRSCycle}
  	)

  var SetRS : SetOfResource
  var SetPR : SetOfProperty
  var S : State
  var TRS : RSType
  var IDRS : RSID
  vars SRS SRS' : RSState
  pred wfs-uniqRS : State
  eq wfs-uniqRS(< SetRS,SetPR >) = uniqRS(SetRS) .
  pred wfs-uniqPR : State
  eq wfs-uniqPR(< SetRS,SetPR >) = uniqPR(SetPR) .
  pred wfs-allPRHaveRS : State
  eq wfs-allPRHaveRS(< SetRS,SetPR >) = allPRHaveRS(SetPR,SetRS) .
  pred wfs-allPRHaveRRS : State
  eq wfs-allPRHaveRRS(< SetRS,SetPR >) = allPRHaveRRS(SetPR,SetRS) .
  eq [:nonexec]: wfs(S)
     = wfs-uniqRS(S) and wfs-uniqPR(S) and 
       wfs-allPRHaveRS(S) and wfs-allPRHaveRRS(S) .
}
module! STATERules {
  protecting(STATEfuns)
  vars IDRS IDRRS : RSID 
  var IDPR : PRID
  var TRS : RSType
  var TPR : PRType
  var SetRS : SetOfResource
  var SetPR : SetOfProperty
  ctrans [R01]:
     < (res(TRS,IDRS,initial) SetRS), SetPR >
  => < (res(TRS,IDRS,started) SetRS), SetPR > 
     if allPROfRSInStates(SetPR,IDRS,ready) .
  trans [R02]:
     < (res(TRS,IDRRS,started) SetRS), 
       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
  => < (res(TRS,IDRRS,started) SetRS), 
       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
}
