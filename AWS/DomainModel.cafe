require Template ../lib/Template.cafe
provide DomainModel

-- An abstract model for AWS CloudFormation

-- There are two kinds of objects:
-- Resource(RS): a resource of which a cloud system composes.
-- Property(PR): a property of a resource.

-- There are typical types of resources, 
--   EC2(Elastic Compute), EIP(Elastic IP), ...
-- There are typical types of properties.

module! RESOURCE {
  -- Sorts
  [Resource RSID RSType RSState]
  -- Constructor
  -- res(RSType, RSID, RSState) is a Resource.
  op res : RSType RSID RSState -> Resource {constr}

  -- Selectors
  op id : Resource -> RSID
  op type : Resource -> RSType
  op state : Resource -> RSState
  var TRS : RSType
  var IDRS : RSID
  var SRS : RSState
  eq id(res(TRS,IDRS,SRS)) = IDRS .
  eq type(res(TRS,IDRS,SRS)) = TRS .
  eq state(res(TRS,IDRS,SRS)) = SRS .
}
  
module! RESOURCEfuns {
  -- Instantiation of Template
  extending(OBJECTBASE(
	RESOURCE {sort Object -> Resource,
		  sort ObjID -> RSID,
		  sort ObjType -> RSType,
		  sort ObjState -> RSState})
	* {sort ObjIDLt -> RSIDLt,
	   sort ObjTypeLt -> RSTypeLt,
	   sort ObjStateLt -> RSStateLt,
	   sort SetOfObject -> SetOfResource,
	   sort SetOfObjState -> SetOfRSState,
	   op empObj -> empRS,
	   op empState -> empSRS,
	   op existObj -> existRS,
	   op existObjInStates -> existRSInStates,
	   op uniqObj -> uniqRS,
	   op #ObjInStates -> #ResourceInStates,
	   op getObject -> getResource,
	   op allObjInStates -> allRSInStates,
	   op allObjNotInStates -> allRSNotInStates,
	   op someObjInStates -> someRSInStates})

  -- Local States
  ops initial started : -> RSStateLt {constr}
  eq (initial > started) = true .
}

module! PROPERTY {
  protecting(RESOURCE)
  -- Sorts
  [Property PRID PRType PRState]
  -- Constructor
  -- prop(PRType, PRID, PRState, RSID, RSID) is a Property of a Resource.
  op prop : PRType PRID PRState RSID RSID -> Property {constr}

  -- Selectors
  op id : Property -> PRID
  op type : Property -> PRType
  op state : Property -> PRState
  op parent : Property -> RSID
  op refer : Property -> RSID
  var TPR : PRType
  var IDPR : PRID
  var SPR : PRState
  vars IDRS1 IDRS2 : RSID
  eq type(prop(TPR,IDPR,SPR,IDRS1,IDRS2)) = TPR .
  eq id(prop(TPR,IDPR,SPR,IDRS1,IDRS2)) = IDPR .
  eq state(prop(TPR,IDPR,SPR,IDRS1,IDRS2)) = SPR .
  eq parent(prop(TPR,IDPR,SPR,IDRS1,IDRS2)) = IDRS1 .
  eq refer(prop(TPR,IDPR,SPR,IDRS1,IDRS2)) = IDRS2 .
}

module! PROPERTYfuns {
  protecting(RESOURCEfuns)

  -- Instantiation of Template
  extending(OBJECTBASE(
	PROPERTY {sort Object -> Property,
		  sort ObjID -> PRID,
		  sort ObjType -> PRType,
		  sort ObjState -> PRState})
	* {sort ObjIDLt -> PRIDLt,
	   sort ObjTypeLt -> PRTypeLt,
	   sort ObjStateLt -> PRStateLt,
	   sort SetOfObject -> SetOfProperty,
	   sort SetOfObjState -> SetOfPRState,
	   op empObj -> empPR,
	   op empState -> empSPR,
	   op existObj -> existPR,
	   op existObjInStates -> existPRInStates,
	   op uniqObj -> uniqPR,
	   op #ObjInStates -> #PropertyInStates,
	   op getObject -> getProperty,
	   op allObjInStates -> allPRInStates,
	   op allObjNotInStates -> allPRNotInStates,
	   op someObjInStates -> somePRInStates})

  -- Local States
  ops notready ready : -> PRStateLt {constr}
  eq (notready > ready) = true .
}

module! LINKS {
  extending(OBJLINKMANY2ONE(
	PROPERTYfuns {sort Object -> Property,
		      sort ObjID -> PRID,
		      sort ObjType -> PRType,
		      sort ObjState -> PRState,
		      sort SetOfObject -> SetOfProperty,
		      sort SetOfObjState -> SetOfPRState,
		      op empObj -> empPR,
		      op getObject(X:SetOfObject,Y:ObjID) 
		        -> getProperty(X:SetOfProperty,Y:PRID),
		      op existObj(X:SetOfObject,Y:ObjID)
		        -> existPR(X:SetOfProperty,Y:PRID),
		      op allObjInStates(X:SetOfObject,Y:SetOfObjState)
		        -> allPRInStates(X:SetOfProperty,Y:SetOfPRState),
		      sort LObject -> Resource,
		      sort LObjID -> RSID,
		      sort LObjState -> RSState,
		      sort SetOfLObject -> SetOfResource,
		      sort SetOfLObjState -> SetOfRSState,
		      op link -> parent,
		      op empLObj -> empRS,
		      op getObject(X:SetOfLObject,Y:LObjID) 
		        -> getResource(X:SetOfResource,Y:RSID),
		      op existObj(X:SetOfLObject,Y:LObjID)
		        -> existRS(X:SetOfResource,Y:RSID),
		      op allObjInStates(X:SetOfLObject,Y:SetOfLObjState)
		        -> allRSInStates(X:SetOfResource,Y:SetOfRSState),
		      op existObjInStates -> existRSInStates})
	* {op hasLObj -> hasParent,
	   op allZHaveX -> allPRHaveRS,
	   op allZOfXInStates -> allPROfRSInStates,
	   op getXOfZ -> getRSOfPR,
	   op getXsOfZs -> getRSsOfPRs,
	   op getXsOfZsInStates -> getRSsOfPRsInStates,
	   op getZsOfX -> getPRsOfRS,
	   op getZsOfXInStates -> getPRsOfRSInStates,
	   op getZsOfXs -> getPRsOfRSs,
	   op getZsOfXsInStates -> getPRsOfRSsInStates,
	   op ifOfXThenInStates -> ifOfRSThenInStates,
	   op ifXInStatesThenZInStates -> ifRSInStatesThenPRInStates}
	)

  extending(OBJLINKMANY2ONE(
	PROPERTYfuns {sort Object -> Property,
		      sort ObjID -> PRID,
		      sort ObjType -> PRType,
		      sort ObjState -> PRState,
		      sort SetOfObject -> SetOfProperty,
		      sort SetOfObjState -> SetOfPRState,
		      op empObj -> empPR,
		      op getObject(X:SetOfObject,Y:ObjID) 
		        -> getProperty(X:SetOfProperty,Y:PRID),
		      op existObj(X:SetOfObject,Y:ObjID)
		        -> existPR(X:SetOfProperty,Y:PRID),
		      op allObjInStates(X:SetOfObject,Y:SetOfObjState)
		        -> allPRInStates(X:SetOfProperty,Y:SetOfPRState),
		      sort LObject -> Resource,
		      sort LObjID -> RSID,
		      sort LObjState -> RSState,
		      sort SetOfLObject -> SetOfResource,
		      sort SetOfLObjState -> SetOfRSState,
		      op link -> refer,
		      op empLObj -> empRS,
		      op getObject(X:SetOfLObject,Y:LObjID) 
		        -> getResource(X:SetOfResource,Y:RSID),
		      op existObj(X:SetOfLObject,Y:LObjID)
		        -> existRS(X:SetOfResource,Y:RSID),
		      op allObjInStates(X:SetOfLObject,Y:SetOfLObjState)
		        -> allRSInStates(X:SetOfResource,Y:SetOfRSState),
		      op existObjInStates -> existRSInStates})
	* {op hasLObj -> hasRefRS,
  	   op allZHaveX -> allPRHaveRRS,
  	   op allZOfXInStates -> allPROfRRSInStates,
  	   op getXOfZ -> getRRSOfPR,
  	   op getXsOfZs -> getRRSsOfPRs,
  	   op getXsOfZsInStates -> getRRSsOfPRsInStates,
  	   op getZsOfX -> getPRsOfRRS,
  	   op getZsOfXInStates -> getPRsOfRRSInStates,
  	   op getZsOfXs -> getPRsOfRRSs,
  	   op getZsOfXsInStates -> getPRsOfRRSsInStates,
	   op ifOfXThenInStates -> ifOfRRSThenInStates,
  	   op ifXInStatesThenZInStates -> ifRRSInStatesThenPRInStates}
  	)
}

module! STATE {
  protecting(LINKS)

  [State]
  op <_,_> : SetOfResource SetOfProperty -> State {constr}

  pred wfs : State
  pred init : State
  pred final : State
  pred inv : State
}

module! STATECyclefuns {
  protecting(STATE)

  var RS : Resource
  var SetRS : SetOfResource
  var SetPR : SetOfProperty

  op getAllRSInState : State -> SetOfResource
  eq getAllRSInState(< SetRS,SetPR >) = SetRS .

  op DDSRS : Resource State -> SetOfResource
  eq DDSRS(RS,< SetRS,SetPR >)
    = if state(RS) = initial then
         getRRSsOfPRsInStates(SetRS,getPRsOfRSInStates(SetPR,RS,notready),initial)
      else empRS fi .
}

module! STATEfuns {
  protecting(STATE)

  var SetRS : SetOfResource
  var SetPR : SetOfProperty
  var S : State

  extending(CYCLEPRED(
  	STATECyclefuns {sort Object -> Resource,
  	       		sort SetOfObject -> SetOfResource,
			sort ObjState -> RSState,
			sort SetOfObjState -> SetOfRSState,
			op DDSC -> DDSRS,
  	       		op empObj -> empRS,
			op someObjInStates -> someRSInStates,
  	       		op getAllObjInState -> getAllRSInState})
  	* {op noCycleC -> noRSCycle}
  	)

  pred wfs-atLeastOneRS : State
  eq wfs-atLeastOneRS(< SetRS,SetPR >) = not (SetRS = empRS) .
  pred wfs-uniqRS : State
  eq wfs-uniqRS(< SetRS,SetPR >) = uniqRS(SetRS) .
  pred wfs-uniqPR : State
  eq wfs-uniqPR(< SetRS,SetPR >) = uniqPR(SetPR) .
  pred wfs-allPRHaveRS : State
  eq wfs-allPRHaveRS(< SetRS,SetPR >) = allPRHaveRS(SetPR,SetRS) .
  pred wfs-allPRHaveRRS : State
  eq wfs-allPRHaveRRS(< SetRS,SetPR >) = allPRHaveRRS(SetPR,SetRS) .
  
--> **************************************
--> Step 0-1: Define init(S) and final(S).
--> **************************************
  -- wfs is a conjunction of invariants which are intentionally imposed by the init condition.
  -- Since too long wfs causes a large evalutaion cost, define wfs minimally for each use case.
  eq [:nonexec]: wfs(S)
     = wfs-atLeastOneRS(S) and
       wfs-uniqRS(S) and wfs-uniqPR(S) and 
       wfs-allPRHaveRS(S) and wfs-allPRHaveRRS(S) .

  eq init(< SetRS,SetPR >)
     = wfs(< SetRS,SetPR >) and
       noRSCycle(< SetRS,SetPR >) and
       allRSInStates(SetRS,initial) and 
       allPRInStates(SetPR,notready) .

  eq final(< SetRS,SetPR >)
     = allRSInStates(SetRS,started) .
}

module! STATERules {
  protecting(STATEfuns)

  -- Variables
  vars IDRS IDRRS : RSID 
  var IDPR : PRID
  var TRS : RSType
  var TPR : PRType
  var SetRS : SetOfResource
  var SetPR : SetOfProperty

  -- Start an initial resource if all of its properties are ready.
  ctrans [R01]:
     < (res(TRS,IDRS,initial) SetRS), SetPR >
  => < (res(TRS,IDRS,started) SetRS), SetPR > 
     if allPROfRSInStates(SetPR,IDRS,ready) .

  -- Let a not-ready property be ready if its referring resource is started.
  trans [R02]:
     < (res(TRS,IDRRS,started) SetRS), 
       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
  => < (res(TRS,IDRRS,started) SetRS), 
       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
}
