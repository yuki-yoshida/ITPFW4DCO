require PROOF Proof.cafe

--> ****************************************
--> (1) inv(S) implies final(S) or cont(S) .
--> ****************************************
-- Proof of (1) inv(S) implies final(S) or cont(S) .

select PROOF .

--> ***********************************************************************
--> Step 1-1: Begin with the most general representation of a global state.
--> ***********************************************************************
:goal {eq invcont(< sRS, sPR >) = true .}
--> *********************************************************************************
--> Step 1-2: Split the current case into cases where final(S) does or does not hold.
--> *********************************************************************************
-- eq final(< SetRS,SetPR >) = allRSInStates(SetRS,started) .
:def csp1-2 = :csp  { 
  eq final(< sRS, sPR >) = true .
  eq sRS = (res(trs,idRS,initial) sRS') .
}
:apply (csp1-2 rd-)
-- Case 2: sRS = (res(trs,idRS,started) sRS') .
--> *****************************************************************
--> Step 1-3: Consider which rule can be applied to the current case.
--> *****************************************************************
-- rule R01 should be applied
--> *************************************************************************************
--> Step 1-4: Split the current case into cases which collectively cover the current case
-->  and one of which is matched with the LHS of the current rule.
--> *************************************************************************************
-- The corrent case is already matched with the LHS of rule R01.
--> *********************************************************
--> Step 1-5: Split the current case into cases where
-->  the condition of the current rule does or does not hold. 
--> *********************************************************
-- The condition of R01 is allPROfRSInStates(sPR,idRS,ready) .
:def csp1-5 = :csp { 
  eq allPROfRSInStates(sPR,idRS,ready) = true .
  eq sPR = (prop(tpr,idPR,notready,idRS,idRRS) sPR') .
}
:apply (csp1-5 rd-)
--> **********************************************************************
--> Step 1-6: When there are two identifier constants of the same sort,
-->  split the current case into cases where they are or are not the same.
--> **********************************************************************
:def ctf1-6idRRS = :ctf { eq idRRS = idRS .  }
:apply (ctf1-6idRRS rd-)
--> **************************************************************************
--> Step 1-7: When there is a dangling link, split the current case into cases
-->  where the linked object does or does not exist.
--> **************************************************************************
:def csp1-7 = :csp {
  eq existRS(sRS',idRRS) = false . 
  eq sRS' = (res(trs',idRRS,srs') sRS'') . 
}
:apply (csp1-7 rd-)
--> *****************************************************************
--> Step 1-3: Consider which rule can be applied to the current case.
--> *****************************************************************
-- rule R02 should be applied
--> *************************************************************************************
--> Step 1-4: Split the current case into cases which collectively cover the current case
-->  and one of which is matched with the LHS of the current rule.
--> *************************************************************************************
-- In order to be matched with the LHS of rule R02, the state of resource idRRS should be started.
:def csp1-4 = :csp {
  eq srs' = initial .
  eq srs' = started .
}
:apply (csp1-4 rd-)
--> ******************************************************************************
--> Step 1-8: When falling in a cyclic situation, use No Cyclic Dependency Lemma.
--> ******************************************************************************
-- The Cyclic Dependency Lemma rejects this case.
:def noCycle = :init as noCDL-in [noCDL]
  by {Oc:Resource <- res(trs,idRS,initial);
      Xc:Resource <- res(trs,idRS,initial);
      S:State <- (< sRS, sPR >);
      LS:RSState <- initial; }
:apply (noCycle rd-)
show proof
select
--> AWS/Proof-invcont.cafe
--> Totally 1 goal should be proved.
