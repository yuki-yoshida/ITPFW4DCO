require Proof Proof.cafe

--> ***************************
--> (5) init(S) implies inv(S).
--> (6) inv(S) implies inv(SS).
--> ***************************

module! ProofInv {
  pr(PROOFbase)
  pr(STATERules)
  pred invS : State

  pred initinv : State
  eq initinv(S:State)
     = init(S) implies invS(S) .

  pred invinv : State
  eq invinv(S:State)
     = not (S =(*,1)=>+ SS:State if CC:Bool suchThat
            not ((CC implies
                  (wfs(S) and invS(S) implies invS(SS))) == true)
     	   { S => SS !! CC ! wfs(S) ! invS(S) ! invS(SS) }) .
}

--> *****************************
--> Proof of wfs-noRSCycleStruct.
-->  eq wfs-noRSCycleStruct(S)
-->     = noRSCycleStruct(S) .
--> *****************************
--> Proof of inv(S) implies inv(SS)
module! Proofwfs-noRSCycleStruct {
  pr(ProofInv)
  eq invS(S:State) = wfs-noRSCycleStruct(S) .

  var SetRS : SetOfResource
  var SetPR : SetOfProperty
  var IDRS : RSID
  var TRS : RSType

  pred changeRSState : Resource  Resource
  eq changeRSState(R1:Resource,R2:Resource)
     = (id(R1) = id(R2)) .

  pred changePRState : Property  Property
  eq changePRState(P1:Property,P2:Property)
     = (id(P1) = id(P2)) and (parent(P1) = parent(P2)) and (refer(P1) = refer(P2)) .

  vars R R' : Resource
  vars SetRS' SetRS'' : SetOfResource
  pred lemma : Resource Resource SetOfResource SetOfResource SetOfResource SetOfProperty
  eq lemma(R,R',SetRS,SetRS',SetRS'',SetPR) =
    changeRSState(R,R') implies
    (noRSCycleStruct(SetRS,SetRS',< (R SetRS''),SetPR >)
     implies noRSCycleStruct(SetRS,SetRS',< (R' SetRS''),SetPR >)) .

  ops r r' x : -> Resource

  pred lemma2 : Resource Resource SetOfResource SetOfProperty
  eq lemma2(R,R',SetRS,SetPR) =
    changeRSState(R,R') implies
     getRRSsOfPRs((R' SetRS),SetPR) = getRRSsOfPRs((R SetRS),SetPR) .

  op p : -> Property
}

-- open Proofwfs-noRSCycleStruct .
--   eq (id(r) = id(r')) = false .
--   red lemma2(r,r',sRS,sPR) .
-- close
-- open Proofwfs-noRSCycleStruct .
--   eq id(r) = id(r') .
--   red lemma2(r,r',sRS,empPR) .
-- close
-- open Proofwfs-noRSCycleStruct .
--   eq id(r) = id(r') .
--   eq id(r') = refer(p) .
--   red lemma2(r,r',sRS,sPR) 
--       implies lemma2(r,r',sRS,(p sPR)) .
-- close
-- eof
open Proofwfs-noRSCycleStruct .
  red lemma(r,r',empRS,sRS',sRS'',sPR) .
close
open Proofwfs-noRSCycleStruct .
  eq (id(r) = id(r')) = false .
  red lemma(r,r',sRS,sRS',sRS'',sPR)
      implies lemma(r,r',(x sRS),sRS',sRS'',sPR) .
close
open Proofwfs-noRSCycleStruct .
  eq id(r) = id(r') .
  eq (x \in sRS') = true .
  red lemma(r,r',sRS,sRS',sRS'',sPR)
      implies lemma(r,r',(x sRS),sRS',sRS'',sPR) .
close
open Proofwfs-noRSCycleStruct .
  eq id(r) = id(r') .
  eq (x \in sRS') = false .
  eq getRRSsOfPRs((r sRS''),getPRsOfRS(sPR,id(x)))
     = getRRSsOfPRs(sRS'',getPRsOfRS(sPR,id(x))) .
  eq getRRSsOfPRs((r' sRS''),getPRsOfRS(sPR,id(x)))
     = getRRSsOfPRs(sRS'',getPRsOfRS(sPR,id(x))) .
  binspect lemma(r,r',sRS,sRS',sRS'',sPR)
      implies lemma(r,r',(x sRS),sRS',sRS'',sPR) .
  bshow grind .
close
open Proofwfs-noRSCycleStruct .
  eq id(r) = id(r') .
  eq (x \in sRS') = false .
  eq getRRSsOfPRs((r sRS''),getPRsOfRS(sPR,id(x)))
     = (r getRRSsOfPRs(sRS'',getPRsOfRS(sPR,id(x)))) .
  eq getRRSsOfPRs((r' sRS''),getPRsOfRS(sPR,id(x)))
     = (r' getRRSsOfPRs(sRS'',getPRsOfRS(sPR,id(x)))) .
  eq (r \in (x sRS')) = true .
  eq (r' \in (x sRS')) = true .
  red lemma(r,r',sRS,sRS',sRS'',sPR)
      implies lemma(r,r',(x sRS),sRS',sRS'',sPR) .
close
open Proofwfs-noRSCycleStruct .
  eq id(r) = id(r') .
  eq (x \in sRS') = false .
  eq getRRSsOfPRs((r sRS''),getPRsOfRS(sPR,id(x)))
     = (r getRRSsOfPRs(sRS'',getPRsOfRS(sPR,id(x)))) .
  eq getRRSsOfPRs((r' sRS''),getPRsOfRS(sPR,id(x)))
     = (r' getRRSsOfPRs(sRS'',getPRsOfRS(sPR,id(x)))) .
  eq (r \in (x sRS')) = false .
  eq (r' \in (x sRS')) = false .
  binspect lemma(r,r',sRS,sRS',sRS'',sPR)
      implies lemma(r,r',(x sRS),sRS',sRS'',sPR) .
  bshow grind .
close
