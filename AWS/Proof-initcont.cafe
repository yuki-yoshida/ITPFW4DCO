require Proof Proof.cafe

--> ****************************
--> (1) init(S) implies cont(S).
--> ****************************

--> ******************************************
--> Step 1-0: Define a predicate to be proved.
--> ******************************************
module! ProofInitCont {
  protecting(ProofBase)

  var S : State
  pred initcont : State .
  eq initcont(S) = init(S) implies cont(S) .
}

-- Proof of (1) init(S) implies cont(S).
select ProofInitCont .

--> *******************************************
--> Step 1-1: Begin with the most general case. 
--> *******************************************
:goal {eq initcont(< sRS, sPR >) = true .}

--> *************************************************************************************
--> Step 1-2: Consider which rule can be applied to the global state in the current case. 
--> *************************************************************************************
-- The first rule is R01.
--> **********************************************************************
--> Step 1-3: Split the current case into cases which collectively cover
-->  the current case and one of which matches to LHS of the current rule.
--> **********************************************************************
-- LHS of R01 requires at least one initial resource.
:def csp1-3a = :csp  { 
  eq sRS = empRS .
  eq sRS = (res(trs,idRS,srs) sRS') .
}
:def csp1-3b = :csp { 
  eq srs = initial .
  eq srs = started .
}
:apply (csp1-3a rd- csp1-3b rd-)
-- When the resource is initial:
-- Note that res(trs,idRS,initial) is arbitrary selected.
-- Thus, we can assume that all of DDSRS(res(trs,idRS,initial),S) are not initial,
-- which the Cyclic Dependency Lemma assures.
--> *********************************************************
--> Step 1-4: Split the current case into cases where
-->  the condition of the current rule does or does not hold. 
--> *********************************************************
-- The condition of R01 is allPROfRSInStates(sPR,idRS,ready) .
:def csp1-4 = :csp { 
  eq allPROfRSInStates(sPR,idRS,ready) = true .
  eq sPR = (prop(tpr,idPR,notready,idRS,idRRS) sPR') .
}
:apply (csp1-4 rd-)
-- When there is a not-ready property of the resource:
--> **********************************************************************
--> Step 1-5: When there are two identifier constants of the same sort,
-->  split the current case into cases where they are or are not the same.
--> **********************************************************************
:def ctf1-5idRRS = :ctf {
  eq idRRS = idRS .
}
:apply (ctf1-5idRRS rd-)
--> ***************************************************************
--> Step 1-6: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The resource referred by the property does or does not exist.
:def csp1-6a = :csp {
  eq existRS(sRS',idRRS) = false .
  eq sRS' = (res(trs',idRRS,srs') sRS'') .
}
:def csp1-6b = :csp {
  eq srs' = initial .
  eq srs' = started .
}
:apply (csp1-6a rd- csp1-6b rd-)
-- When the resource idRRS is initial:
--> ******************************************************************************
--> Step 1-7: When falling in a cyclic situation, use the Cyclic Dependency Lemma.
--> ******************************************************************************
-- The Cyclic Dependency Lemma rejects this case.
:set(normalize-init,on)
:init [noCycle] by {
  O:Resource <- res(trs,idRS,initial);
  S:State <- < sRS, sPR >;
  SS:SetOfRSState <- initial;
}
:set(normalize-init,off)
:apply (rd-)
show proof

select
