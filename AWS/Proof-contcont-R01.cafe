require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
select ProofContCont .
-- When R01 can be applied to the state S:
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (res(trs,idRS,initial) sRS), sPR >) = true .
}
--> ******************************************************
--> Step 2-2: Split the current case for a rule into cases
--> where the condition of the rule does or does not hold.
--> ******************************************************
-- The condition of R01 does or does not hold for the resource of idRS.
:def ctf2-2 = :ctf {
  eq allPROfRSInStates(sPR,idRS,ready) = true .
}
:apply (ctf2-2 rd-)
-- When the condition of R01 holds for the resource of idRS:
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
-- All of the other resources are or are not started.
:def csp2-3 = :csp {
  eq allRSInStates(sRS,started) = true .
  eq sRS = (res(trs',idRS',initial) sRS') .
}
:apply (csp2-3 rd-)
-- When there is an initial resource:
--> *********************************************************************
--> Step 2-7: When there are two identifier constants of the same sort,
--> split the current case into cases where they are or are not the same.
--> *********************************************************************
-- idRS and idRS' are or are not the same.
:def ctf2-7idRS' = :ctf {
  eq idRS' = idRS .
}
:apply (ctf2-7idRS' rd-)
--> ***************************************************************
--> Step 2-4: Consider which rule can be applied to the next state.
--> ***************************************************************
-- The next rule should be R01 for the resource of idRS'.
--> *************************************************************************************
--> Step 2-5: Split the current case into cases which collectively cover the current case
-->  and the next state of one of the split cases matches to LHS of the current rule.
--> *************************************************************************************
--> The case already matches to LHS of R01.
--> ***************************************************************
--> Step 2-6: Split the current case into cases where the condition
-->  of the current rule does or does not hold in the next state.
--> ***************************************************************
-- The condition of R01 does or does not hold for the resource o idRS'.
:def csp2-6 = :csp {
  eq allPROfRSInStates(sPR,idRS',ready) = true .
  eq sPR = (prop(tpr,idPR,notready,idRS',idRRS) sPR') .
}
:apply (csp2-6 rd-)
-- When at least one of properties of the resource idRS' is not-ready.
--> *********************************************************************
--> Step 2-7: When there are two identifier constants of the same sort,
--> split the current case into cases where they are or are not the same.
--> *********************************************************************
-- idRRS and idRS/idRS' are or are not the same.
:def ctf2-7idRRSa = :ctf {
  eq idRRS = idRS .
}
:def ctf2-7idRRSb = :ctf {
  eq idRRS = idRS' .
}
:apply (ctf2-7idRRSa rd-)
:apply (ctf2-7idRRSb rd-)
-- When at least one of properties of the resource idRS' is not-ready.
-- Because sPR is redefined, allPROfRSInStates(sPR,idRS,ready) should be claimed again.
:set(normalize-init,on)
:init ( ceq B1:Bool = true if not B2:Bool . ) by {
  B1:Bool <- allPROfRSInStates(sPR,idRS,ready) ;
  B2:Bool <- allPROfRSInStates(sPR,idRS,ready) == true ;
}
:set(normalize-init,off)
--> ***************************************************************
--> Step 2-8: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The resource referred by the property does or does not exist.
:def csp2-8a = :csp {
  eq existRS(sRS',idRRS) = false .
  eq sRS' = (res(trs'',idRRS,srs'') sRS'') .
}
:def csp2-8b = :csp { 
  eq srs'' = initial .
  eq srs'' = started .
}
:apply (csp2-8a rd- csp2-8b rd-)
-- When the resource idRRS is initial:
--> ******************************************************************************
--> Step 2-9: When falling in a cyclic situation, use the Cyclic Dependency Lemma.
--> ******************************************************************************
-- The Cyclic Dependency Lemma rejects this case.
:set(normalize-init,on)
:init [noCycle] by {
  O:Resource <- res(trs',idRS',initial);
  S:State <- < (res(trs,idRS,initial) sRS), sPR >;
  SS:SetOfRSState <- initial;
}
:set(normalize-init,off)
:apply (rd-)
show proof

select
