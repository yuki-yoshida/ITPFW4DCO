require PROOF Proof.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
select PROOF .
-- When R02 can be applied to the state S:
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
--> ******************************************************
--> Step 2-2: Split the current case for a rule into cases
--> where the condition of the rule does or does not hold.
--> ******************************************************
-- R02 is unconditional.
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
-- If all of the other resources are started, the next state is final.
-- But it is not the case because we know a notready property has
-- an initial parent resource.
--> *********************************************************************
--> Step 2-7: When there are two identifier constants of the same sort,
--> split the current case into cases where they are or are not the same.
--> *********************************************************************
-- idRRS and idRS are or are not the same.
:def ctf2-7idRRS = :ctf {
  eq idRRS = idRS .
}
:apply (ctf2-7idRRS rd-)
-- When idRRS and idRS are not the same:
--> ***************************************************************
--> Step 2-8: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The parent resource of the property does or does not exist.
:def csp2-8idRSa = :csp {
  eq existRS(sRS,idRS) = false .
  eq sRS = (res(trs',idRS,srs') sRS') .
}
:def csp2-8idRSb = :csp {
  eq srs' = initial .
  eq srs' = started .
}
:apply (csp2-8idRSa rd- csp2-8idRSb rd-)
-- When the parent resource is initial:
-- Cyclic Dependency Lemma ensures there is an initial resource R
-- where DDSRS(R,S) does not include any initial nodes.
:init ( eq SRS:SetOfResource = (RS:Resource SRS':SetOfResource) . ) by {
  SRS:SetOfResource <- sRS';
  SRS':SetOfResource <- sRS'';
  RS:Resource <- res(trs'',idRS1,initial);
}
--> ***************************************************************
--> Step 2-4: Consider which rule can be applied to the next state.
--> ***************************************************************
-- The next rule should be R01 for the resource of idRS1.
--> *************************************************************************************
--> Step 2-5: Split the current case into cases which collectively cover the current case
-->  and the next state of one of the split cases matches to LHS of the current rule.
--> *************************************************************************************
--> The case already matches to LHS of R01.
--> ***************************************************************
--> Step 2-6: Split the current case into cases where the condition
-->  of the current rule does or does not hold in the next state.
--> ***************************************************************
-- The condition of R01 does or does not hold for the resource idRS1.
:def csp2-6R01 = :csp {
  eq allPROfRSInStates(sPR,idRS1,ready) = true .
  eq sPR = (prop(tpr',idPR',notready,idRS1,idRS') sPR') .
}
:apply (csp2-6R01 rd-)
-- When one of properties of the resource idRS1 is not-ready.
--> *********************************************************************
--> Step 2-7: When there are two identifier constants of the same sort,
--> split the current case into cases where they are or are not the same.
--> *********************************************************************
-- idRS' and idRS are or are not the same.
:def ctf2-7idRS'a = :ctf {
  eq idRS' = idRS .
}
:apply (ctf2-7idRS'a rd-)
-- When idRS' and idRS are the same:
--> ******************************************************************************
--> Step 2-9: When falling in a cyclic situation, use the Cyclic Dependency Lemma.
--> ******************************************************************************
-- The Cyclic Dependency Lemma rejects this case.
:init as noCycleLemma-in [noCycleLemma]
  by {O:Resource <- res(trs'',idRS1,initial);
      X:Resource <- res(trs'',idRS1,initial);
      S:State <- (< (res(trs, idRRS, started) sRS),
                    (prop(tpr,idPR,notready,idRS,idRRS) sPR) >);
      LS:RSState <- initial; }
:apply (rd-)
-- When idRS' and idRS are not the same:
--> *********************************************************************
--> Step 2-7: When there are two identifier constants of the same sort,
--> split the current case into cases where they are or are not the same.
--> *********************************************************************
-- idRS' and idRRS are or are not the same.
:def ctf2-7idRS'b = :ctf {
  eq idRS' = idRRS .
}
:apply (ctf2-7idRS'b rd-)
-- When idRS' and idRRS are not the same:
--> *********************************************************************
--> Step 2-7: When there are two identifier constants of the same sort,
--> split the current case into cases where they are or are not the same.
--> *********************************************************************
-- idRS' and idRS1 are or are not the same.
:def ctf2-7idRS'c = :ctf {
  eq idRS' = idRS1 .
}
:apply (ctf2-7idRS'c rd-)
-- When idRS' and idRS1 are not the same:
--> ***************************************************************
--> Step 2-8: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The resource referred by the property does or does not exist.
:def csp2-8idRS'a = :csp {
  eq existRS(sRS'',idRS') = false .
  eq sRS'' = (res(trs''',idRS',srs''') sRS''') .
}
:def csp2-8idRS'b = :csp {
  eq srs''' = initial .
  eq srs''' = started .
}
:apply (csp2-8idRS'a rd- csp2-8idRS'b rd-)
-- When the resource idRS' is initial:
--> ******************************************************************************
--> Step 2-9: When falling in a cyclic situation, use the Cyclic Dependency Lemma.
--> ******************************************************************************
-- The Cyclic Dependency Lemma rejects this case.
:init as noCycleLemma-in [noCycleLemma]
  by {O:Resource <- res(trs'',idRS1,initial);
      X:Resource <- res(trs'',idRS1,initial);
      S:State <- (< (res(trs, idRRS, started) sRS),
                    (prop(tpr,idPR,notready,idRS,idRRS) sPR) >);
      LS:RSState <- initial; }
:apply (rd-)
show proof

select
